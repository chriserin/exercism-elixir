[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable ev is unused
  forth.exs:16

[33mwarning: [0mvariable s is unused
  forth.exs:16

[33mwarning: [0mvariable ev is unused
  forth.exs:25

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test drop  * test drop (skipped)
  * test division by zero  * test division by zero (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test dup  * test dup (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test over  * test over (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test swap  * test swap (skipped)
  * test defining a new word  * test defining a new word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 145708
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable ev is unused
  forth.exs:16

[33mwarning: [0mvariable s is unused
  forth.exs:16

[33mwarning: [0mvariable ev is unused
  forth.exs:25

Excluding tags: [:pending]


ForthTest
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test dup  * test dup (skipped)
  * test defining a number  * test defining a number (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test drop  * test drop (skipped)
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test division by zero  * test division by zero (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test over  * test over (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (1.3ms)[0m

  1) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5"
     [36mlhs:  [0m""
     [36mrhs:  [0m"1 2 3 4 5"
     [36mstacktrace:[0m
       forth_test.exs:21: (test)

  * test calling a non-existing word  * test calling a non-existing word (skipped)
  * test swap  * test swap (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 295021
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (1.9ms)[0m

  1) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5"
     [36mlhs:  [0m""
     [36mrhs:  [0m"1 2 3 4 5"
     [36mstacktrace:[0m
       forth_test.exs:21: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
["", ""]
  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (2.6ms)[0m

  1) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5"
     [36mlhs:  [0m""
     [36mrhs:  [0m"1 2 3 4 5"
     [36mstacktrace:[0m
       forth_test.exs:22: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
["", ""]
  * test numbers just get pushed onto the stack["", ""]
[31m  * test numbers just get pushed onto the stack (8.4ms)[0m

  1) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5"
     [36mlhs:  [0m""
     [36mrhs:  [0m"1 2 3 4 5"
     [36mstacktrace:[0m
       forth_test.exs:22: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[31m  * test numbers just get pushed onto the stack (4.6ms)[0m

  1) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5"
     [36mlhs:  [0m"12345"
     [36mrhs:  [0m"1[32m [0m2[32m [0m3[32m [0m4[32m [0m5"
     [36mstacktrace:[0m
       forth_test.exs:22: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (4.0ms)[0m
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
** (SyntaxError) forth.exs:18: unexpected token: "\" (column 22, codepoint U+005C)
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (2.0ms)[0m
[<<49, 0, 50, 1, 51>>, "4", "5 6", "7"]
  * test non-word characters are separators[31m  * test non-word characters are separators (2.8ms)[0m
["1", "2", "+", "4", "-"]

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 0, 50, 1, 51, 32, 52, 32, 53, 225, 154, 128, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:30: (test)

  * test basic arithmetic[31m  * test basic arithmetic (0.1ms)[0m

  2) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:33[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1 2 + 4 -"
     [36mrhs:  [0m"-1"
     [36mstacktrace:[0m
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 2 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (3.2ms)[0m
[<<49, 0, 50, 1, 51>>, "4", "5 6", "7"]
  * test non-word characters are separators[31m  * test non-word characters are separators (3.5ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 0, 50, 1, 51, 32, 52, 32, 53, 225, 154, 128, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:30: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (1.9ms)[0m
  * test non-word characters are separators["1", "2", "3", "4", "5", "", "", "6", "7"]
[31m  * test non-word characters are separators (1.1ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m"1 2 3 4 5 [31m  [0m6 7"
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:30: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (2.2ms)[0m
  * test non-word characters are separators["1", "2", "3", "4", "5", "", "", "6", "7"]
[31m  * test non-word characters are separators (3.9ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m"1 2 3 4 5 [31m  [0m6 7"
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:30: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5", "", "", "6", "7"]
[32m  * test numbers just get pushed onto the stack (2.0ms)[0m
  * test non-word characters are separators[31m  * test non-word characters are separators (1.1ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m"1 2 3 4 5 [31m  [0m6 7"
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:30: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack["1", "2", "3", "4", "5"]
[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (2.0ms)[0m
  * test non-word characters are separators["1", "2", "3", "4", <<53, 225>>, "", "6", "7"]
[31m  * test non-word characters are separators (2.1ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 32, 50, 32, 51, 32, 52, 32, 53, 225, 32, 32, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:30: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
** (TokenMissingError) forth_test.exs:201: missing terminator: end (for "do" starting at line 47)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
["1", "2", "3", "4", "5"]
[32m  * test numbers just get pushed onto the stack (1.8ms)[0m
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", <<53, 225>>, "", "6", "7"]
[31m  * test non-word characters are separators (5.0ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 32, 50, 32, 51, 32, 52, 32, 53, 225, 32, 32, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:31: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", <<53, 225>>, "", "6", "7"]
[31m  * test non-word characters are separators (3.3ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 32, 50, 32, 51, 32, 52, 32, 53, 225, 32, 32, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:31: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", <<53, 225>>, "", "6", "7"]
[31m  * test non-word characters are separators (4.3ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 32, 50, 32, 51, 32, 52, 32, 53, 225, 32, 32, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:31: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", <<53, 225>>, "", "6", "7"]
[31m  * test non-word characters are separators (3.1ms)[0m

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m<<49, 32, 50, 32, 51, 32, 52, 32, 53, 225, 32, 32, 54, 32, 55>>
     [36mrhs:  [0m"1 2 3 4 5 6 7"
     [36mstacktrace:[0m
       forth_test.exs:31: (test)

  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (8.3ms)[0m
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
["1", "2", "3", "4", "5", "6", "7"]
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators[32m  * test non-word characters are separators (3.5ms)[0m
["1", "2", "", "", "4", "", ""]
  * test basic arithmetic[31m  * test basic arithmetic (2.5ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1 2   4  "
     [36mrhs:  [0m"-1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
** (SyntaxError) forth.exs:43: unexpected token: "end". "(" starting at line 32 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[31m  * test non-word characters are separators (3.4ms)[0m
["1", "2", "", "", "4", "", ""]

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth_test.exs:30: (test)

  * test basic arithmetic[31m  * test basic arithmetic (1.0ms)[0m

  2) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 2 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[31m  * test non-word characters are separators (3.1ms)[0m
["1", "2", "", "", "4", "", ""]

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:30: (test)

  * test basic arithmetic[31m  * test basic arithmetic (1.2ms)[0m

  2) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 2 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable op is unused
  forth.exs:40

** (CompileError) forth.exs:45: undefined function frame/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[31m  * test non-word characters are separators (3.2ms)[0m
["1", "2", "", "", "4", "", ""]

  1) test non-word characters are separators (ForthTest)
     [1m[30mforth_test.exs:26[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 4 5 6 7"
     [36mlhs:  [0m"[31m7[0m [31m6[0m [31m5[0m 4 [31m3[0m [31m2[0m [31m1[0m"
     [36mrhs:  [0m"[32m1[0m [32m2[0m [32m3[0m 4 [32m5[0m [32m6[0m [32m7[0m"
     [36mstacktrace:[0m
       forth_test.exs:31: (test)

  * test basic arithmetic[31m  * test basic arithmetic (0.8ms)[0m

  2) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"  4   2 1"
     [36mrhs:  [0m"-1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 2 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.2ms)[0m
  * test basic arithmetic["1", "2", "", "", "4", "", ""]
[31m  * test basic arithmetic (1.7ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1 2   4  "
     [36mrhs:  [0m"-1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.3ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
[31m  * test basic arithmetic (3.0ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:48: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.3ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
***
1
***
[31m  * test basic arithmetic (2.0ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:52: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:48: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.2ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
***
0
***
[31m  * test basic arithmetic (2.0ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:52: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:48: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.2ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
***
0
1
***
[31m  * test basic arithmetic (2.0ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:53: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:48: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
["1", "2", "3", "4", "5", "6", "7"]
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
["1", "2", "+", "4", "-"]
  * test non-word characters are separators******* + *******
***
0
1
[32m  * test non-word characters are separators (1.1ms)[0m
***
  * test basic arithmetic[31m  * test basic arithmetic (2.8ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:54: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:49: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.2ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
***
0
1
[31m  * test basic arithmetic (1.9ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:53: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:49: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.2ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
***
0
1
[31m  * test basic arithmetic (2.1ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:53: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:49: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.3ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
***
0
1
***
***
1
2
***
******* - *******
[31m  * test basic arithmetic (2.0ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:56: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:56: Forth.perform_operation/2
       forth.exs:34: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:32: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
** (SyntaxError) forth.exs:22: unexpected token: "\" (column 39, codepoint U+005C)
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) forth.exs:26: unexpected token: ")". "fn" starting at line 22 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) forth.exs:26: unexpected token: ")". "fn" starting at line 22 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) forth.exs:26: unexpected token: ")". "fn" starting at line 22 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (CompileError) forth.exs:22: cannot invoke remote function Kernel.=~/2 inside guard
    (elixir) src/elixir_fn.erl:9: anonymous fn/3 in :elixir_fn.translate/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (elixir) src/elixir_fn.erl:14: :elixir_fn.translate/3

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (1.8ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
[31m  * test basic arithmetic (3.5ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       forth.exs:56: anonymous fn/2 in Forth.perform_operation/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:55: Forth.perform_operation/2
       forth.exs:40: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:38: Forth.format_stack/1
       forth_test.exs:37: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (3.1ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
[31m  * test basic arithmetic (1.0ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.2ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
3
***
[31m  * test basic arithmetic (1.2ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (3.7ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
3
***
[31m  * test basic arithmetic (4.3ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (3.3ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
3
***
[31m  * test basic arithmetic (2.4ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.3ms)[0m
["1", "2", "+", "4", "-"]
  * test basic arithmetic******* + *******
******* - *******
***
true
true
***
***
true
true
***
[31m  * test basic arithmetic (1.2ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
["1", "2", "3", "4", "5", "6", "7"]
  * test non-word characters are separators[32m  * test non-word characters are separators (3.9ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
true
true
***
***
true
true
***
[31m  * test basic arithmetic (1.2ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.6ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
3
***
[31m  * test basic arithmetic (1.8ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

** (CompileError) forth.exs:58: undefined function frame/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.3ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
-3
***
[31m  * test basic arithmetic (1.7ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"-[31m7[0m"
     [36mrhs:  [0m"-[32m1[0m"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.7ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
-3
***
[31m  * test basic arithmetic (1.8ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"-[31m7[0m"
     [36mrhs:  [0m"-[32m1[0m"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.6ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
3
***
[31m  * test basic arithmetic (1.3ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.1ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
3
0
***
***
4
-3
***
[31m  * test basic arithmetic (1.2ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"-[31m7[0m"
     [36mrhs:  [0m"-[32m1[0m"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (3.9ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
***
4
3
***
[31m  * test basic arithmetic (2.8ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "-1"
     [36mlhs:  [0m"1"
     [36mrhs:  [0m"[32m-[0m1"
     [36mstacktrace:[0m
       forth_test.exs:38: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.4ms)[0m
["1", "2", "+", "4", "-"]
******* + *******
  * test basic arithmetic******* - *******
***
4
3
***
["2", "4", "*", "3", "/"]
******* * *******
******* / *******
[31m  * test basic arithmetic (2.3ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:34[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "2"
     [36mlhs:  [0m"2.6666666666666665"
     [36mrhs:  [0m"2"
     [36mstacktrace:[0m
       forth_test.exs:42: (test)

  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5", "6", "7"]
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "+", "4", "-"]
[32m  * test non-word characters are separators (2.0ms)[0m
******* + *******
******* - *******
***
4
3
***
  * test basic arithmetic["2", "4", "*", "3", "/"]
******* * *******
******* / *******
[32m  * test basic arithmetic (0.5ms)[0m
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["1", "2", "3", "4", "5", "6", "7"]
[32m  * test non-word characters are separators (2.2ms)[0m
  * test basic arithmetic["1", "2", "+", "4", "-"]
******* + *******
******* - *******
["2", "4", "*", "3", "/"]
******* * *******
******* / *******
[32m  * test basic arithmetic (0.3ms)[0m
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators[32m  * test non-word characters are separators (1.0ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators[32m  * test non-word characters are separators (1.6ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[31m  * test division by zero (1.1ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:45[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:46: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators[32m  * test non-word characters are separators (1.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[31m  * test division by zero (0.9ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:45[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:46: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separatorsdividing 8 by 3
[32m  * test non-word characters are separators (1.0ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[31m  * test division by zero (1.0ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:45[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:46: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
******* 1 *******
  * test non-word characters are separators******* 3 *******
[32m  * test non-word characters are separators (1.6ms)[0m
  * test basic arithmetic******* 2 *******
******* 8 *******
dividing 8 by 3
[32m  * test basic arithmetic (0.2ms)[0m
  * test division by zero[31m  * test division by zero (1.5ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:45[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:46: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
******* 1 *******
******* 3 *******
  * test non-word characters are separators******* 2 *******
[32m  * test non-word characters are separators (3.3ms)[0m
******* 8 *******
  * test basic arithmeticdividing 8 by 3
[32m  * test basic arithmetic (0.6ms)[0m
  * test division by zero[31m  * test division by zero (4.1ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:45[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:46: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (2.3ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (3.5ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (0.8ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[32m  * test division by zero (0.3ms)[0m
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (0.8ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (2.7ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (4.1ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (1.8ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (1.3ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (1.3ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
["4", "2", "2", "-", "/"]
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (3.3ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (9.1ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but got FunctionClauseError (no function clause matching in String.Unicode.graphemes/1)[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:170: String.Unicode.graphemes('+-*')
       forth.exs:22: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (5.6ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but got FunctionClauseError (no function clause matching in String.Unicode.graphemes/1)[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:170: String.Unicode.graphemes('+-*')
       forth.exs:22: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (2.9ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero"frame inspect /"
"frame inspect -"
"frame inspect 2"
"frame inspect 2"
"frame inspect 4"
[31m  * test division by zero (4.4ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
"frame inspect / and "
  * test basic arithmetic  * test basic arithmetic (skipped)
"frame inspect - and /"
  * test division by zero"frame inspect 2 and -"
"frame inspect 2 and 2"
"frame inspect 4 and 2"
[31m  * test division by zero (8.9ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
"frame inspect / and false"
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
"frame inspect - and false"
  * test non-word characters are separators  * test non-word characters are separators (skipped)
"frame inspect 2 and true"
  * test basic arithmetic"frame inspect 2 and false"
  * test basic arithmetic (skipped)
  * test division by zero"frame inspect 4 and false"
[31m  * test division by zero (17.5ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[31m  * test division by zero (13.9ms)[0m

  1) test division by zero (ForthTest)
     [1m[30mforth_test.exs:47[0m
     [31mExpected exception Forth.DivisionByZero but got UndefinedFunctionError (function DivisionByZero.exception/1 is undefined (module DivisionByZero is not available))[0m
     [36mstacktrace:[0m
       DivisionByZero.exception([])
       forth.exs:23: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth_test.exs:48: (test)

  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[32m  * test division by zero (2.5ms)[0m
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stackin format stack
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (4.2ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 1"
     [36mlhs:  [0m"1 [31mDUP[0m"
     [36mrhs:  [0m"1 [32m1[0m"
     [36mstacktrace:[0m
       forth_test.exs:58: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

Excluding tags: [:pending]


ForthTest
  * test no input, no stackin format stack
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (4.0ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 1"
     [36mlhs:  [0m"1 [31mDUP[0m"
     [36mrhs:  [0m"1 [32m1[0m"
     [36mstacktrace:[0m
       forth_test.exs:58: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (4.2ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 2"
     [36mlhs:  [0m"1 2 [31mDup[0m"
     [36mrhs:  [0m"1 2 [32m2[0m"
     [36mstacktrace:[0m
       forth_test.exs:62: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (8.4ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 2"
     [36mlhs:  [0m"1 2 [31mDup[0m"
     [36mrhs:  [0m"1 2 [32m2[0m"
     [36mstacktrace:[0m
       forth_test.exs:62: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (11.5ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (FunctionClauseError) no function clause matching in String.Casing.upcase/2[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:329: String.Casing.upcase(1, "")
       forth.exs:40: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:38: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (10.7ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (FunctionClauseError) no function clause matching in String.Casing.upcase/2[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:329: String.Casing.upcase(1, "")
       forth.exs:40: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:38: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (10.1ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (FunctionClauseError) no function clause matching in String.Casing.upcase/2[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:329: String.Casing.upcase(1, "")
       forth.exs:40: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:38: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable stack is unused
  forth.exs:47

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (15.7ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (FunctionClauseError) no function clause matching in String.Casing.upcase/2[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:329: String.Casing.upcase(1, "")
       forth.exs:40: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:38: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (10.2ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (FunctionClauseError) no function clause matching in String.Casing.upcase/2[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:329: String.Casing.upcase(1, "")
       forth.exs:40: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:38: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
"found dup"
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
"found dup"
  * test non-word characters are separators"found dup"
  * test non-word characters are separators (skipped)
"found dup"
  * test basic arithmetic"found dup"
  * test basic arithmetic (skipped)
"found dup"
  * test division by zero"found dup"
  * test division by zero (skipped)
"found dup"
  * test dup"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
"found dup"
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (14.0ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 2"
     [36mlhs:  [0m"1 2 [31m1[0m"
     [36mrhs:  [0m"1 2 [32m2[0m"
     [36mstacktrace:[0m
       forth_test.exs:62: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:49

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (12.3ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (17.5ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (12.3ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
"Got dup"
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators"Got dup"
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (11.7ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
<<71, 111, 116, 32, 100, 117, 112, 32, 97, 110, 100, 32, 1>>
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
<<71, 111, 116, 32, 100, 117, 112, 32, 97, 110, 100, 32, 2, 1>>
  * test dup[31m  * test dup (13.9ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack<<71, 111, 116, 32, 100, 117, 112, 32, 97, 110, 100, 32, 1>>
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
<<71, 111, 116, 32, 100, 117, 112, 32, 97, 110, 100, 32, 2, 1>>
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (17.4ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators"Got dup and "
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero"Got dup and "
  * test division by zero (skipped)
  * test dup[31m  * test dup (12.8ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"doing frame 1"
"doing frame DUP"
  * test numbers just get pushed onto the stack (skipped)
"Got dup and "
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic"doing frame 1"
  * test basic arithmetic (skipped)
"doing frame 2"
  * test division by zero"doing frame Dup"
  * test division by zero (skipped)
  * test dup"Got dup and "
[31m  * test dup (14.5ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"doing frame 1"
  * test numbers just get pushed onto the stack (skipped)
"doing frame DUP"
  * test non-word characters are separators"Got dup and "
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
"doing frame 1"
  * test division by zero"doing frame 2"
  * test division by zero (skipped)
"doing frame Dup"
  * test dup"Got dup and "
[31m  * test dup (12.9ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:63: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (8.7ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (Forth.StackUnderflow) stack underflow[0m
     [36mstacktrace:[0m
       forth.exs:23: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth_test.exs:56: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
"Got dup and "
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (10.9ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:51: Forth.perform_operation/2
       forth.exs:41: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:39: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators"Got dup and "
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[31m  * test dup (11.2ms)[0m

  1) test dup (ForthTest)
     [1m[30mforth_test.exs:54[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:51: Forth.perform_operation/2
       forth.exs:41: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:39: Forth.format_stack/1
       forth_test.exs:57: (test)

  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
"Got dup and "
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup"Got dup and "
[32m  * test dup (11.4ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
"Got dup and "
  * test division by zero[32m  * test division by zero (14.8ms)[0m
  * test dup"Got dup and "
[32m  * test dup (3.2ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic[32m  * test basic arithmetic (10.1ms)[0m
  * test division by zero"Got dup and "
[32m  * test division by zero (0.07ms)[0m
  * test dup"Got dup and "
[32m  * test dup (1.3ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators[32m  * test non-word characters are separators (11.5ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[32m  * test numbers just get pushed onto the stack (17.6ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.2ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[32m  * test numbers just get pushed onto the stack (11.2ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.2ms)[0m
  * test division by zero[32m  * test division by zero (0.05ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (19.2ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.2ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[32m15 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.4ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (13.6ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.2ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[31m  * test drop (2.9ms)[0m

  1) test drop (ForthTest)
     [1m[30mforth_test.exs:62[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:71: (test)

  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:51

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.2ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:50

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:55

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (15.8ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.1ms)[0m
  * test dup[32m  * test dup (0.3ms)[0m
  * test drop[32m  * test drop (0.2ms)[0m
  * test swap[31m  * test swap (2.4ms)[0m

  1) test swap (ForthTest)
     [1m[30mforth_test.exs:76[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:85: (test)

  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 1 failure, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.8ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.05ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.8ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[31m  * test over (1.0ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 1"
     [36mlhs:  [0m"[31m2 [0m1 2"
     [36mrhs:  [0m"1 2[32m 1[0m"
     [36mstacktrace:[0m
       forth_test.exs:97: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.3ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.08ms)[0m
  * test swap"over a 2"
[32m  * test swap (0.2ms)[0m
  * test over"over b 1"
[31m  * test over (2.4ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 1"
     [36mlhs:  [0m"[31m2 [0m1 2"
     [36mrhs:  [0m"1 2[32m 1[0m"
     [36mstacktrace:[0m
       forth_test.exs:97: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (39.0ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.2ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.09ms)[0m
  * test swap"over a 1"
[32m  * test swap (0.1ms)[0m
  * test over"over b 2"
"over a 1"
"over b 2"
[31m  * test over (2.7ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"[31m3 [0m1 2 [31m1[0m"
     [36mrhs:  [0m"1 2 [32m3 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.04s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.3ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.09ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.08ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over<<111, 118, 101, 114, 32, 2, 1>>
<<111, 118, 101, 114, 32, 3, 2, 1>>
[31m  * test over (5.5ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"[31m3 [0m1 2 [31m1[0m"
     [36mrhs:  [0m"1 2 [32m3 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
** (SyntaxError) forth.exs:67: unexpected token: "}". "<<" starting at line 67 is missing terminator ">>"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.2ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.05ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.09ms)[0m
  * test swap[32m  * test swap (0.3ms)[0m
  * test over[31m  * test over (3.4ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31m** (ArgumentError) cannot convert the given list to a string.
     
     To be converted to a string, a list must contain only:
     
       * strings
       * integers representing Unicode codepoints
       * or a list containing one of these three elements
     
     Please check the given list or call inspect/1 to get the list representation, got:
     
     [2, 1 | 1]
     [0m
     [36mstacktrace:[0m
       (elixir) lib/list.ex:624: List.to_string/1
       forth.exs:67: Forth.perform_operation/2
       forth.exs:44: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:42: Forth.format_stack/1
       forth_test.exs:96: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (15.0ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.4ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.4ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.08ms)[0m
  * test swap<<111, 118, 101, 114, 32, 2, 1>>
[32m  * test swap (0.2ms)[0m
  * test over<<111, 118, 101, 114, 32, 3, 2, 1>>
[31m  * test over (3.5ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"[31m3 [0m1 2 [31m1[0m"
     [36mrhs:  [0m"1 2 [32m3 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.3ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.08ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over<<111, 118, 101, 114, 32, 2, 1, 32, 33, 33, 33>>
<<111, 118, 101, 114, 32, 3, 2, 1, 32, 33, 33, 33>>
[31m  * test over (3.4ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"[31m3 [0m1 2 [31m1[0m"
     [36mrhs:  [0m"1 2 [32m3 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.9ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.09ms)[0m
  * test swap[2, 1]
<<111, 118, 101, 114, 32, 2, 1, 32, 33, 33, 33>>
[32m  * test swap (0.1ms)[0m
  * test over[3, 2, 1]
<<111, 118, 101, 114, 32, 3, 2, 1, 32, 33, 33, 33>>
[31m  * test over (4.1ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"[31m3 [0m1 2 [31m1[0m"
     [36mrhs:  [0m"1 2 [32m3 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (14.1ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[2, 1]
[32m  * test swap (0.1ms)[0m
  * test over<<111, 118, 101, 114, 32, 2, 1, 32, 33, 33, 33>>
[3, 2, 1]
<<111, 118, 101, 114, 32, 3, 2, 1, 32, 33, 33, 33>>
[31m  * test over (7.8ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"1 2 [31m1 [0m3"
     [36mrhs:  [0m"1 2 3[32m 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (16.1ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.7ms)[0m
  * test over[2, 1]
<<111, 118, 101, 114, 32, 2, 1, 32, 33, 33, 33>>
[3, 2, 1]
<<111, 118, 101, 114, 32, 3, 2, 1, 32, 33, 33, 33>>
[31m  * test over (8.5ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"1 2 [31m1 [0m3"
     [36mrhs:  [0m"1 2 3[32m 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (11.0ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[2, 1]
[32m  * test drop (0.1ms)[0m
  * test swap<<111, 118, 101, 114, 32, 2, 1, 32, 33, 33, 33>>
[32m  * test swap (0.2ms)[0m
  * test over[3, 2, 1]
<<111, 118, 101, 114, 32, 3, 2, 1, 32, 33, 33, 33>>
[31m  * test over (4.5ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"1 2 [31m1 [0m3"
     [36mrhs:  [0m"1 2 3[32m 2[0m"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.1ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.09ms)[0m
  * test swap[2, 1]
[32m  * test swap (0.1ms)[0m
  * test over<<111, 118, 101, 114, 32, 2, 1, 32, 33, 33, 33>>
[31m  * test over (3.5ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 1"
     [36mlhs:  [0m"[31m2 [0m1 2"
     [36mrhs:  [0m"1 2[32m 1[0m"
     [36mstacktrace:[0m
       forth_test.exs:97: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (12.4ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.09ms)[0m
  * test division by zero[32m  * test division by zero (0.05ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.06ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[2, 1]
[31m  * test over (2.0ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 1"
     [36mlhs:  [0m"[31m2 [0m1 2"
     [36mrhs:  [0m"1 2[32m 1[0m"
     [36mstacktrace:[0m
       forth_test.exs:97: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.6ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.08ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[2, 1]
[31m  * test over (2.0ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 1"
     [36mlhs:  [0m"[31m2 [0m1 2"
     [36mrhs:  [0m"1 2[32m 1[0m"
     [36mstacktrace:[0m
       forth_test.exs:97: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.1ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.2ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[2, 1]
[3, 2, 1]
[31m  * test over (2.3ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mAssertion with == failed[0m
     [36mcode: [0ms == "1 2 3 2"
     [36mlhs:  [0m"2 3 2[31m 1[0m"
     [36mrhs:  [0m"[32m1 [0m2 3 2"
     [36mstacktrace:[0m
       forth_test.exs:101: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (11.2ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.08ms)[0m
  * test dup[2, 1]
[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
[3, 2, 1]
  * test over[31m  * test over (2.5ms)[0m

  1) test over (ForthTest)
     [1m[30mforth_test.exs:93[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:102: (test)

  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.2ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.3ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.07ms)[0m
  * test dup[32m  * test dup (0.2ms)[0m
  * test drop[2, 1]
[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[3, 2, 1]
[32m  * test over (1.6ms)[0m
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (13.9ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.1ms)[0m
  * test division by zero[32m  * test division by zero (0.06ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[2, 1]
[32m  * test swap (0.1ms)[0m
  * test over[3, 2, 1]
[32m  * test over (1.1ms)[0m
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:52

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:57

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:54

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:59

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
["", "", "dup", "dup", "dup-twice", "", "", 1, "dup-twice"]
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["", "", "", ""]
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
["dup", "dup", "dup-twice", 1, "dup-twice"]
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[31m  * test defining a new word (12.9ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:55: Forth.perform_operation/2
       forth.exs:47: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:45: Forth.format_stack/1
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
["dup", "dup", "dup-twice", 1, "dup-twice"]
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[31m  * test defining a new word (13.1ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (MatchError) no match of right hand side value: [][0m
     [36mstacktrace:[0m
       forth.exs:55: Forth.perform_operation/2
       forth.exs:47: anonymous fn/2 in Forth.format_stack/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:45: Forth.format_stack/1
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop[";", "dup", "dup", "dup-twice", ":", 1, "dup-twice"]
  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic[":", "dup-twice", "dup", "dup", ";", 1, "dup-twice"]
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable normalized_frame is unused
  forth.exs:20

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:56

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:61

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup[":", "dup-twice", "dup", "dup", ";", 1, "dup-twice"]
  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable normalized_frame is unused
  forth.exs:20

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:56

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:61

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
[1, 2, "over"]
  * test basic arithmetic  * test basic arithmetic (skipped)
[2, 1]
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop[1, 2, 3, "over"]
  * test drop (skipped)
  * test swap[3, 2, 1]
  * test swap (skipped)
  * test over[32m  * test over (12.7ms)[0m
  * test defining a new word[":", "dup-twice", "dup", "dup", ";", 1, "dup-twice"]
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable normalized_frame is unused
  forth.exs:20

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:56

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:61

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
[1, 2, "over"]
  * test non-word characters are separators  * test non-word characters are separators (skipped)
[2, 1]
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
[1, 2, 3, "over"]
  * test drop  * test drop (skipped)
[3, 2, 1]
  * test swap  * test swap (skipped)
  * test over[31m  * test over (17.6ms)[0m
[":", "dup-twice", "dup", "dup", ";", 1, "dup-twice"]

  1) test over (ForthTest)
     [1m[30mforth_test.exs:101[0m
     [31mExpected exception Forth.StackUnderflow but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:110: (test)

  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:56

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:61

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
[1, 2, "over"]
  * test non-word characters are separators  * test non-word characters are separators (skipped)
[2, 1]
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
[1, 2, 3, "over"]
  * test drop  * test drop (skipped)
[3, 2, 1]
  * test swap  * test swap (skipped)
  * test over[32m  * test over (22.3ms)[0m
  * test defining a new word[":", "dup-twice", "dup", "dup", ";", 1, "dup-twice"]
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:27

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:48

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over["1", "2", "OVER"]
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:27

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:48

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack["1", "2", "SWAP"]
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:27

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:48

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:53

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[32m  * test no input, no stack (0.04ms)[0m
  * test numbers just get pushed onto the stack["1", "2", "3", "4", "5"]
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:37

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:58

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:63

** (CompileError) forth.exs:21: undefined function build_stack/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:34

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

** (CompileError) forth.exs:25: undefined function build_stack/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mfunction build_stack/2 is unused
  forth.exs:32

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

** (CompileError) forth.exs:25: undefined function build_stack/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:34

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:55

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:60

Excluding tags: [:pending]


ForthTest
[]
  * test no input, no stack[32m  * test no input, no stack (0.04ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[32m  * test numbers just get pushed onto the stack (13.6ms)[0m
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic[1, 2, "OVER"]
[2, 1]
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[1, 2, 3, "OVER"]
[3, 2, 1]
[32m  * test over (2.0ms)[0m
  * test defining a new word[":", "DUP-TWICE", "DUP", "DUP", ";", 1, "DUP-TWICE"]
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:37

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:58

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:63

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[32m  * test no input, no stack (0.05ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[32m  * test numbers just get pushed onto the stack (8.1ms)[0m
  * test non-word characters are separators  * test non-word characters are separators (skipped)
[1, 2, "OVER"]
  * test basic arithmetic  * test basic arithmetic (skipped)
[2, 1]
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
[1, 2, 3, "OVER"]
  * test swap  * test swap (skipped)
  * test over[3, 2, 1]
[32m  * test over (1.3ms)[0m
  * test defining a new word[":", "DUP-TWICE", "DUP", "DUP", ";", 1, "DUP-TWICE"]
** (SyntaxError) forth.exs:41: unexpected token: ")". "fn" starting at line 27 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:72

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:77

Excluding tags: [:pending]


ForthTest
  * test no input, no stack{[], []}
[31m  * test no input, no stack (7.0ms)[0m

  1) test no input, no stack (ForthTest)
     [1m[30mforth_test.exs:11[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:62: Forth.format_stack/1
       forth_test.exs:12: (test)

  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (9.6ms)[0m

  2) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:16[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[5, 4, 3, 2, 1], [], false}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:43: Forth.eval/2
       forth_test.exs:18: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[31m  * test over (2.9ms)[0m

  3) test over (ForthTest)
     [1m[30mforth_test.exs:99[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {["OVER", 2, 1], [], false}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:43: Forth.eval/2
       forth_test.exs:101: (test)

  * test defining a new word[31m  * test defining a new word (5.0ms)[0m

  4) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:116[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], [[[[[]]]]], false}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:43: Forth.eval/2
       forth_test.exs:118: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 4 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:72

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:77

Excluding tags: [:pending]


ForthTest
  * test no input, no stack{[], []}
[31m  * test no input, no stack (5.8ms)[0m

  1) test no input, no stack (ForthTest)
     [1m[30mforth_test.exs:11[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:62: Forth.format_stack/1
       forth_test.exs:12: (test)

  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (10.0ms)[0m

  2) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:16[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[5, 4, 3, 2, 1], [], false}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:43: Forth.eval/2
       forth_test.exs:18: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[31m  * test over (2.3ms)[0m

  3) test over (ForthTest)
     [1m[30mforth_test.exs:99[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {["OVER", 2, 1], [], false}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:43: Forth.eval/2
       forth_test.exs:101: (test)

  * test defining a new word[31m  * test defining a new word (2.8ms)[0m

  4) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:116[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], [[[[[]]]]], false}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:43: Forth.eval/2
       forth_test.exs:118: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 4 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack{[], []}
[31m  * test no input, no stack (5.2ms)[0m
{[1, 2, 3, 4, 5], []}
{[1, 2, "OVER"], []}

  1) test no input, no stack (ForthTest)
     [1m[30mforth_test.exs:11[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:12: (test)

{[1, "DUP-TWICE"], [[[[[]]]]]}
  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (11.7ms)[0m

  2) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:16[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, 3, 4, 5], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:19: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[31m  * test over (8.3ms)[0m

  3) test over (ForthTest)
     [1m[30mforth_test.exs:99[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, "OVER"], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:102: (test)

  * test defining a new word[31m  * test defining a new word (4.1ms)[0m

  4) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:116[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, "DUP-TWICE"], [[[[[]]]]]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:120: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.03s on tests)
[31m15 tests, 4 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack{[], []}
[31m  * test no input, no stack (5.0ms)[0m
{[1, 2, 3, 4, 5], []}
{[1, 2, "OVER"], []}

  1) test no input, no stack (ForthTest)
     [1m[30mforth_test.exs:11[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:12: (test)

{[1, "DUP-TWICE"], [[[[[]]]]]}
  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (11.7ms)[0m

  2) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:16[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, 3, 4, 5], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:19: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[31m  * test over (4.5ms)[0m

  3) test over (ForthTest)
     [1m[30mforth_test.exs:99[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, "OVER"], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:102: (test)

  * test defining a new word[31m  * test defining a new word (2.0ms)[0m

  4) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:116[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, "DUP-TWICE"], [[[[[]]]]]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:120: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 4 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack{[], []}
[31m  * test no input, no stack (5.0ms)[0m
{[1, 2, 3, 4, 5], []}
{[1, 2, "OVER"], []}
{[1, "DUP-TWICE"], [[[[[]]]]]}

  1) test no input, no stack (ForthTest)
     [1m[30mforth_test.exs:11[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:12: (test)

  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (12.7ms)[0m

  2) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:16[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, 3, 4, 5], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:19: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[31m  * test over (7.0ms)[0m

  3) test over (ForthTest)
     [1m[30mforth_test.exs:99[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, "OVER"], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:102: (test)

  * test defining a new word[31m  * test defining a new word (3.2ms)[0m

  4) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:116[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, "DUP-TWICE"], [[[[[]]]]]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:120: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 4 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack{[], []}
[31m  * test no input, no stack (5.5ms)[0m
{[1, 2, 3, 4, 5], []}
{[1, 2, "OVER"], []}
{[1, "DUP-TWICE"], [[[[[]]]]]}

  1) test no input, no stack (ForthTest)
     [1m[30mforth_test.exs:11[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:12: (test)

  * test numbers just get pushed onto the stack[31m  * test numbers just get pushed onto the stack (11.2ms)[0m

  2) test numbers just get pushed onto the stack (ForthTest)
     [1m[30mforth_test.exs:16[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, 3, 4, 5], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:19: (test)

  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[31m  * test over (6.3ms)[0m

  3) test over (ForthTest)
     [1m[30mforth_test.exs:99[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, 2, "OVER"], []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:102: (test)

  * test defining a new word[31m  * test defining a new word (5.7ms)[0m

  4) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:116[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for {[1, "DUP-TWICE"], [[[[[]]]]]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       forth.exs:61: Forth.format_stack/1
       forth_test.exs:120: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 4 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable stack is unused
  forth.exs:58

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

** (CompileError) forth.exs:59: undefined function ev/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[32m  * test no input, no stack (0.04ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[32m  * test numbers just get pushed onto the stack (10.1ms)[0m
  * test non-word characters are separators[1, 2, "OVER"]
  * test non-word characters are separators (skipped)
[2, 1]
  * test basic arithmetic  * test basic arithmetic (skipped)
[1, 2, 3, "OVER"]
[3, 2, 1]
  * test division by zero  * test division by zero (skipped)
[1, "DUP-TWICE"]
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[32m  * test over (2.0ms)[0m
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:70

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:75

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[32m  * test no input, no stack (0.03ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[1, 2, "OVER"]
[32m  * test numbers just get pushed onto the stack (8.6ms)[0m
  * test non-word characters are separators[2, 1]
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
[1, 2, 3, "OVER"]
  * test dup  * test dup (skipped)
[3, 2, 1]
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[1, "DUP-TWICE"]
[32m  * test over (1.5ms)[0m
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:50

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:70

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:75

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[32m  * test no input, no stack (0.04ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[1, 2, "OVER"]
[32m  * test numbers just get pushed onto the stack (9.5ms)[0m
  * test non-word characters are separators[2, 1]
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
[1, 2, 3, "OVER"]
  * test dup  * test dup (skipped)
[3, 2, 1]
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over[1, "DUP-TWICE"]
[32m  * test over (2.5ms)[0m
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[]
[32m  * test no input, no stack (0.04ms)[0m
  * test numbers just get pushed onto the stack[1, 2, 3, 4, 5]
[]
[]
[32m  * test numbers just get pushed onto the stack (9.0ms)[0m
  * test non-word characters are separators[1, "DUP-TWICE"]
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
[]
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
[1, "DUP-TWICE"]
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:69

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:74

Excluding tags: [:pending]


ForthTest
[]
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
[]
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:69

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:74

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
{[], [[[[[]]]]]}
  * test division by zero[]
  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:51

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:69

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:74

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
{[], [[[[[]]]]]}
  * test basic arithmetic[]
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:52

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:70

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:75

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack'is defining'
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators'is defining'
  * test non-word characters are separators (skipped)
'is defining'
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
{[], [[[[[]]]]]}
  * test dup[]
  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:53

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:71

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:76

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"is defining"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"end of def"
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
{[], [[[[[]]]]]}
  * test dup[]
  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:54

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:72

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:77

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"end of def"
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup{[], [[[[[]]]]]}
  * test dup (skipped)
[]
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"end of def"
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup{[], [[[[[]]]]]}
  * test dup (skipped)
[]
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"end of def"
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup{[], [[[[[]]]]]}
  * test dup (skipped)
[]
  * test drop  * test drop (skipped)
  * test swap[[[[]]]]
  * test swap (skipped)
  * test over[[[[]]]]
  * test over (skipped)
  * test defining a new word[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
"start of def"
  * test division by zero"is defining"
  * test division by zero (skipped)
  * test dup"is defining"
  * test dup (skipped)
"is defining"
  * test drop  * test drop (skipped)
"end of def"
  * test swap  * test swap (skipped)
  * test over[[[[[]]]]]
  * test over (skipped)
  * test defining a new word{[], [[[[[]]]]]}
[]
[[[[]]]]
[[[[]]]]
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators"start of def"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic  * test basic arithmetic (skipped)
"is defining"
  * test division by zero"is defining"
  * test division by zero (skipped)
  * test dup"end of def"
  * test dup (skipped)
  * test drop  * test drop (skipped)
[["DUP", "DUP", "DUP-TWICE"]]
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
{[], [["DUP-TWICE", "DUP", "DUP"]]}
  * test defining a new word[]
["DUP-TWICE"]
["DUP-TWICE"]
[31m  * test defining a new word (11.9ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(true)
       forth.exs:43: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
"start of def"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic  * test basic arithmetic (skipped)
"is defining"
  * test division by zero"end of def"
  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop[["DUP", "DUP", "DUP-TWICE"]]
  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over{[], [["DUP-TWICE", "DUP", "DUP"]]}
  * test over (skipped)
[]
  * test defining a new word["DUP-TWICE"]
["DUP-TWICE"]
[31m  * test defining a new word (10.7ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(true)
       forth.exs:43: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
"start of def"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"is defining"
  * test basic arithmetic (skipped)
"end of def"
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
[["DUP", "DUP", "DUP-TWICE"]]
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
{[], [["DUP-TWICE", "DUP", "DUP"]]}
  * test over[]
  * test over (skipped)
  * test defining a new word["DUP-TWICE"]
["DUP-TWICE"]
[31m  * test defining a new word (15.1ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(true)
       forth.exs:43: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"end of def"
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
[["DUP", "DUP", "DUP-TWICE"]]
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap{[], [["DUP-TWICE", "DUP", "DUP"]]}
[]
  * test swap (skipped)
  * test over["DUP-TWICE"]
  * test over (skipped)
["DUP-TWICE"]
  * test defining a new word[31m  * test defining a new word (11.4ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(true)
       forth.exs:43: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"end of def"
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
[["DUP", "DUP", "DUP-TWICE"]]
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap{[], [["DUP-TWICE", "DUP", "DUP"]]}
[]
  * test swap (skipped)
  * test over["DUP-TWICE"]
  * test over (skipped)
["DUP-TWICE"]
  * test defining a new word[31m  * test defining a new word (10.8ms)[0m

  1) test defining a new word (ForthTest)
     [1m[30mforth_test.exs:119[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(true)
       forth.exs:43: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:123: (test)

  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
"start of def"
  * test division by zero"is defining"
  * test division by zero (skipped)
"is defining"
  * test dup"is defining"
  * test dup (skipped)
"end of def"
  * test drop  * test drop (skipped)
  * test swap[["DUP", "DUP", "DUP-TWICE"]]
  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word{[], [["DUP-TWICE", "DUP", "DUP"]]}
[]
["DUP-TWICE"]
["DUP-TWICE"]
[32m  * test defining a new word (11.2ms)[0m
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"end of def"
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[["DUP", "FOO"]]
  * test division by zero (skipped)
[]
  * test dup"start of def"
  * test dup (skipped)
"is defining"
  * test drop"is defining"
  * test drop (skipped)
"is defining"
  * test swap"end of def"
  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word[["DUP", "DUP", "FOO"], ["FOO", "DUP"]]
  * test defining a new word (skipped)
[]
  * test redefining an existing word["FOO", "FOO"]
["FOO", "FOO"]
[32m  * test redefining an existing word (11.8ms)[0m
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"end of def"
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[["DUP", "SWAP"]]
  * test division by zero (skipped)
[]
  * test dup["SWAP"]
  * test dup (skipped)
  * test drop["SWAP"]
  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (22.0ms)[0m
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
"start of def"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"is defining"
  * test basic arithmetic (skipped)
"end of def"
  * test division by zero  * test division by zero (skipped)
  * test dup[[220371, "", ""]]
  * test dup (skipped)
  * test drop[""]
  * test drop (skipped)
[""]
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:55

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:73

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:78

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"is defining"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic"end of def"
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
[[220371, "", ""]]
  * test dup  * test dup (skipped)
[""]
  * test drop[""]
  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
"start of def"
  * test basic arithmetic  * test basic arithmetic (skipped)
"is defining"
  * test division by zero[[]]
  * test division by zero (skipped)
"is defining"
  * test dup  * test dup (skipped)
[[""]]
  * test drop"is defining"
  * test drop (skipped)
  * test swap[["", ""]]
  * test swap (skipped)
  * test over"end of def"
  * test over (skipped)
  * test defining a new word[[220371, "", ""]]
  * test defining a new word (skipped)
[""]
  * test redefining an existing word  * test redefining an existing word (skipped)
[""]
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero"start of def"
  * test division by zero (skipped)
  * test dup"is defining"
  * test dup (skipped)
""
"is defining"
""
"is defining"
220371
  * test drop"end of def"
  * test drop (skipped)
  * test swap  * test swap (skipped)
[[220371, "", ""]]
  * test over  * test over (skipped)
[""]
  * test defining a new word[""]
  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"€"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic220371
  * test basic arithmetic (skipped)
"end of def"
  * test division by zero  * test division by zero (skipped)
  * test dup[[220371, "€"]]
  * test dup (skipped)
  * test drop["€"]
  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[32m  * test defining words with odd characters (11.1ms)[0m
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"€"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic220371
  * test basic arithmetic (skipped)
"end of def"
  * test division by zero  * test division by zero (skipped)
  * test dup[[220371, "€"]]
  * test dup (skipped)
  * test drop["€"]
  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[32m  * test defining words with odd characters (11.7ms)[0m
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
"start of def"
  * test division by zero  * test division by zero (skipped)
"is defining"
  * test dup  * test dup (skipped)
1
  * test drop  * test drop (skipped)
  * test swap"is defining"
2
  * test swap (skipped)
  * test over"end of def"
  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word[[2, 1]]
  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number[31m  * test defining a number (10.8ms)[0m

  1) test defining a number (ForthTest)
     [1m[30mforth_test.exs:156[0m
     [31mExpected exception Forth.InvalidWord but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:157: (test)

  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators"start of def"
  * test non-word characters are separators (skipped)
"is defining"
  * test basic arithmetic  * test basic arithmetic (skipped)
1
  * test division by zero"is defining"
  * test division by zero (skipped)
2
  * test dup"end of def"
  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number[[2, 1]]
[31m  * test defining a number (13.2ms)[0m

  1) test defining a number (ForthTest)
     [1m[30mforth_test.exs:156[0m
     [31mExpected exception Forth.InvalidWord but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:157: (test)

  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:59

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:77

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:82

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number[32m  * test defining a number (8.5ms)[0m
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:59

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:77

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:82

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators1
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number[32m  * test defining a number (9.2ms)[0m
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:59

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:77

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:82

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
"is defining"
  * test non-word characters are separators"€"
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero[]
  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
"start of def"
  * test swap"is defining"
1
  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[31m  * test defining words with odd characters (16.3ms)[0m

  1) test defining words with odd characters (ForthTest)
     [1m[30mforth_test.exs:148[0m
     [31m** (CaseClauseError) no case clause matching: false[0m
     [36mstacktrace:[0m
       forth.exs:39: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:150: (test)

  * test defining a number[32m  * test defining a number (2.0ms)[0m
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:60

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:78

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:83

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero"start of def"
  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over"is defining"
  * test over (skipped)
  * test defining a new word"€"
"is defining"
  * test defining a new word (skipped)
  * test redefining an existing word220371
  * test redefining an existing word (skipped)
"end of def"
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
[[220371, "€"]]
  * test defining words with odd characters["€"]
[]
[32m  * test defining words with odd characters (13.4ms)[0m
"start of def"
  * test defining a number"is defining"
1
[32m  * test defining a number (0.5ms)[0m
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack"start of def"
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators["€"]
  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
[]
  * test drop  * test drop (skipped)
"start of def"
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters[32m  * test defining words with odd characters (9.2ms)[0m
  * test defining a number[32m  * test defining a number (0.1ms)[0m
  * test calling a non-existing word  * test calling a non-existing word (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
[]
  * test no input, no stack  * test no input, no stack (skipped)
[]
  * test numbers just get pushed onto the stack[]
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word[31m  * test calling a non-existing word (11.6ms)[0m

  1) test calling a non-existing word (ForthTest)
     [1m[30mforth_test.exs:163[0m
     [31mExpected exception Forth.UnknownWord but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:164: (test)



Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack[]
[]
  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word[31m  * test calling a non-existing word (17.2ms)[0m

  1) test calling a non-existing word (ForthTest)
     [1m[30mforth_test.exs:163[0m
     [31mExpected exception Forth.UnknownWord but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:164: (test)



Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators  * test non-word characters are separators (skipped)
[]
  * test basic arithmetic[]
  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word[31m  * test calling a non-existing word (8.3ms)[0m

  1) test calling a non-existing word (ForthTest)
     [1m[30mforth_test.exs:163[0m
     [31mExpected exception Forth.UnknownWord but nothing was raised[0m
     [36mstacktrace:[0m
       forth_test.exs:164: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack[]
  * test numbers just get pushed onto the stack (skipped)
[]
  * test non-word characters are separators  * test non-word characters are separators (skipped)
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word[31m  * test calling a non-existing word (11.8ms)[0m

  1) test calling a non-existing word (ForthTest)
     [1m[30mforth_test.exs:163[0m
     [31mExpected exception Forth.UnknownWord but got CondClauseError (no cond clause evaluated to a true value)[0m
     [36mstacktrace:[0m
       anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:164: (test)



Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:58

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:76

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:81

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
  * test no input, no stack (skipped)
  * test numbers just get pushed onto the stack  * test numbers just get pushed onto the stack (skipped)
  * test non-word characters are separators[]
  * test non-word characters are separators (skipped)
[]
  * test basic arithmetic  * test basic arithmetic (skipped)
  * test division by zero  * test division by zero (skipped)
  * test dup  * test dup (skipped)
  * test drop  * test drop (skipped)
  * test swap  * test swap (skipped)
  * test over  * test over (skipped)
  * test defining a new word  * test defining a new word (skipped)
  * test redefining an existing word  * test redefining an existing word (skipped)
  * test redefining an existing built-in word  * test redefining an existing built-in word (skipped)
  * test defining words with odd characters  * test defining words with odd characters (skipped)
  * test defining a number  * test defining a number (skipped)
  * test calling a non-existing word[32m  * test calling a non-existing word (7.3ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m15 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:58

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:76

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:81

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[]
[]
[]
[]
[]
[]
[]
[]
[32m  * test numbers just get pushed onto the stack (9.6ms)[0m
[]
  * test non-word characters are separators[]
[]
[]
[]
[]
[]
[]
[32m  * test non-word characters are separators (0.2ms)[0m
[]
  * test basic arithmetic[]
[]
[]
[31m  * test basic arithmetic (0.2ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:33: (test)

  * test division by zero[31m  * test division by zero (1.1ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]

"start of def"
  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (3.1ms)[0m
{[], [["DUP-TWICE", "DUP", "DUP"]]}
  * test drop[]
["DUP-TWICE"]
[32m  * test drop (0.2ms)[0m
["DUP-TWICE"]
  * test swap[32m  * test swap (0.4ms)[0m
  * test over[32m  * test over (0.4ms)[0m
  * test defining a new word[]
[32m  * test defining a new word (2.1ms)[0m
"start of def"
  * test redefining an existing word[]
"start of def"
[]
["FOO", "FOO"]
["FOO", "FOO"]
[]
"start of def"
[32m  * test redefining an existing word (0.3ms)[0m
[]
  * test redefining an existing built-in word["SWAP"]
["SWAP"]
[]
"start of def"
[32m  * test redefining an existing built-in word (0.2ms)[0m
  * test defining words with odd characters["€"]
[]
"start of def"
[32m  * test defining words with odd characters (0.1ms)[0m
  * test defining a number[]
[]
[32m  * test defining a number (0.1ms)[0m
[]
  * test calling a non-existing word[32m  * test calling a non-existing word (0.1ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
** (SyntaxError) forth.exs:125: unexpected token: "end". "[" starting at line 45 is missing terminator "]"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) forth.exs:125: unexpected token: "end". "[" starting at line 45 is missing terminator "]"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:58

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:76

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:81

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[]
[]
[]
[]
[]
[]
[]
[32m  * test numbers just get pushed onto the stack (9.0ms)[0m
[]
  * test non-word characters are separators[]
[]
[]
[]
[]
[]
[]
[32m  * test non-word characters are separators (0.2ms)[0m
[]
  * test basic arithmetic[]
[]
[]
[31m  * test basic arithmetic (0.1ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:33: (test)

  * test division by zero[]
[]
[]
[31m  * test division by zero (1.1ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]

[]
  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
"start of def"
[32m  * test dup (2.5ms)[0m
{[], [["DUP-TWICE", "DUP", "DUP"]]}
  * test drop[]
[32m  * test drop (0.3ms)[0m
  * test swap[32m  * test swap (0.5ms)[0m
  * test over["DUP-TWICE"]
["DUP-TWICE"]
[]
[32m  * test over (0.5ms)[0m
  * test defining a new word[32m  * test defining a new word (1.5ms)[0m
"start of def"
  * test redefining an existing word[]
"start of def"
[]
["FOO", "FOO"]
["FOO", "FOO"]
[]
[32m  * test redefining an existing word (0.3ms)[0m
  * test redefining an existing built-in word"start of def"
[]
["SWAP"]
["SWAP"]
[]
[32m  * test redefining an existing built-in word (0.3ms)[0m
  * test defining words with odd characters"start of def"
["€"]
[32m  * test defining words with odd characters (0.1ms)[0m
[]
  * test defining a number"start of def"
[]
[32m  * test defining a number (0.1ms)[0m
[]
  * test calling a non-existing word[]
[32m  * test calling a non-existing word (0.1ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
** (SyntaxError) forth.exs:125: unexpected token: "end". "[" starting at line 45 is missing terminator "]"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) forth.exs:125: unexpected token: "end". "[" starting at line 45 is missing terminator "]"
    (elixir) lib/code.ex:321: Code.load_file/2
    forth_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:58

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:76

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:81

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[]
[]
[32m  * test no input, no stack (0.00ms)[0m
[]
  * test numbers just get pushed onto the stack[]
[]
[]
[]
[]
[32m  * test numbers just get pushed onto the stack (7.8ms)[0m
[]
  * test non-word characters are separators[]
[]
[]
[]
[]
[]
[]
[32m  * test non-word characters are separators (0.3ms)[0m
[]
  * test basic arithmetic[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[31m  * test basic arithmetic (0.3ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]

[]
  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:37: (test)

  * test division by zero[]
[]
[31m  * test division by zero (1.2ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
"start of def"
{[], [["DUP-TWICE", "DUP", "DUP"]]}
[]
["DUP-TWICE"]
["DUP-TWICE"]

[]
  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:48: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:43: (test)

"start of def"
  * test dup[]
"start of def"
[32m  * test dup (2.4ms)[0m
  * test drop[32m  * test drop (0.3ms)[0m
  * test swap[32m  * test swap (0.3ms)[0m
  * test over[32m  * test over (0.3ms)[0m
  * test defining a new word[32m  * test defining a new word (1.6ms)[0m
  * test redefining an existing word[]
["FOO", "FOO"]
["FOO", "FOO"]
[]
"start of def"
[]
["SWAP"]
["SWAP"]
[]
"start of def"
["€"]
[]
[32m  * test redefining an existing word (0.6ms)[0m
"start of def"
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.2ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.1ms)[0m
  * test defining a number[]
[]
[32m  * test defining a number (0.2ms)[0m
[]
  * test calling a non-existing word[32m  * test calling a non-existing word (0.1ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:57

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:75

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:80

Excluding tags: [:pending]


ForthTest
[]
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[]
[32m  * test numbers just get pushed onto the stack (11.6ms)[0m
  * test non-word characters are separators[]
[32m  * test non-word characters are separators (0.2ms)[0m
[]
  * test basic arithmetic[]
[31m  * test basic arithmetic (0.4ms)[0m
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:47: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:37: (test)

[]
[]
[]
[]
[]
  * test division by zero{[], [["DUP-TWICE", "DUP", "DUP"]]}
[31m  * test division by zero (2.5ms)[0m
[]
[]
[]
[]
[]
[]
[]

  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:47: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:28: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (0.2ms)[0m
  * test drop[]
[32m  * test drop (3.2ms)[0m
  * test swap[32m  * test swap (0.2ms)[0m
  * test over[32m  * test over (0.2ms)[0m
  * test defining a new word[32m  * test defining a new word (1.4ms)[0m
[]
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.1ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.08ms)[0m
  * test defining a number[32m  * test defining a number (0.1ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.1ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (9.9ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[31m  * test basic arithmetic (0.1ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:37: (test)

{[], [["DUP-TWICE", "DUP", "DUP"]]}
  * test division by zero[31m  * test division by zero (1.5ms)[0m

  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (0.2ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.2ms)[0m
  * test over[32m  * test over (3.5ms)[0m
  * test defining a new word[32m  * test defining a new word (2.0ms)[0m
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.09ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.07ms)[0m
  * test defining a number[32m  * test defining a number (0.06ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.03ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (10.6ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.5ms)[0m
  * test basic arithmetic[31m  * test basic arithmetic (0.1ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:37: (test)

  * test division by zero[31m  * test division by zero (2.4ms)[0m
{[], [["DUP-TWICE", "DUP", "DUP"]]}

  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (0.4ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.2ms)[0m
  * test over[32m  * test over (3.1ms)[0m
  * test defining a new word[32m  * test defining a new word (2.0ms)[0m
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.1ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.2ms)[0m
  * test defining a number[32m  * test defining a number (0.1ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.04ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (7.4ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[31m  * test basic arithmetic (0.1ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:37: (test)

  * test division by zero[31m  * test division by zero (1.2ms)[0m

  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.07ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[32m  * test over (1.9ms)[0m
  * test defining a new word[32m  * test defining a new word (0.1ms)[0m
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.09ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.08ms)[0m
  * test defining a number[32m  * test defining a number (0.05ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.04ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (7.5ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.3ms)[0m
  * test basic arithmetic[31m  * test basic arithmetic (0.1ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:37: (test)

  * test division by zero[31m  * test division by zero (1.1ms)[0m

  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.08ms)[0m
  * test swap[32m  * test swap (1.2ms)[0m
  * test over[32m  * test over (0.9ms)[0m
  * test defining a new word[32m  * test defining a new word (0.05ms)[0m
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.08ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.06ms)[0m
  * test defining a number[32m  * test defining a number (0.04ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.03ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (8.9ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[31m  * test basic arithmetic (0.1ms)[0m

  1) test basic arithmetic (ForthTest)
     [1m[30mforth_test.exs:31[0m
     [31m** (Forth.UnknownWord) unknown word: nil[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:37: (test)

  * test division by zero[31m  * test division by zero (1.2ms)[0m

  2) test division by zero (ForthTest)
     [1m[30mforth_test.exs:42[0m
     [31mExpected exception Forth.DivisionByZero but got Forth.UnknownWord (unknown word: nil)[0m
     [36mstacktrace:[0m
       forth.exs:46: anonymous fn/2 in Forth.eval/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       forth.exs:27: Forth.eval/2
       forth_test.exs:43: (test)

  * test dup[32m  * test dup (0.2ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[32m  * test over (3.3ms)[0m
  * test defining a new word[32m  * test defining a new word (0.1ms)[0m
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.08ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.07ms)[0m
  * test defining a number[32m  * test defining a number (0.05ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.03ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m15 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mopaque type evaluator() is underspecified and therefore meaningless
  forth.exs:2

[33mwarning: [0mvariable rest is unused
  forth.exs:56

[33mwarning: [0mvariable rest_of_stack is unused
  forth.exs:74

[33mwarning: [0mvariable stack_bottom is unused
  forth.exs:79

Excluding tags: [:pending]


ForthTest
  * test no input, no stack[32m  * test no input, no stack (0.00ms)[0m
  * test numbers just get pushed onto the stack[32m  * test numbers just get pushed onto the stack (8.0ms)[0m
  * test non-word characters are separators[32m  * test non-word characters are separators (0.1ms)[0m
  * test basic arithmetic[32m  * test basic arithmetic (0.09ms)[0m
  * test division by zero[32m  * test division by zero (0.05ms)[0m
  * test dup[32m  * test dup (0.1ms)[0m
  * test drop[32m  * test drop (0.1ms)[0m
  * test swap[32m  * test swap (0.1ms)[0m
  * test over[32m  * test over (0.1ms)[0m
  * test defining a new word[32m  * test defining a new word (0.07ms)[0m
  * test redefining an existing word[32m  * test redefining an existing word (0.1ms)[0m
  * test redefining an existing built-in word[32m  * test redefining an existing built-in word (0.3ms)[0m
  * test defining words with odd characters[32m  * test defining words with odd characters (0.08ms)[0m
  * test defining a number[32m  * test defining a number (0.05ms)[0m
  * test calling a non-existing word[32m  * test calling a non-existing word (0.03ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[32m15 tests, 0 failures[0m

Randomized with seed 0
