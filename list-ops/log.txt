[33mwarning: [0mvariable l is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:20

[33mwarning: [0mvariable l is unused
  list_ops.exs:20

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable l is unused
  list_ops.exs:25

[33mwarning: [0mvariable acc is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable a is unused
  list_ops.exs:36

[33mwarning: [0mvariable b is unused
  list_ops.exs:36

[33mwarning: [0mvariable ll is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list  * test count of normal list (skipped)
  * test count of huge list  * test count of huge list (skipped)
  * test reverse of empty list  * test reverse of empty list (skipped)
  * test reverse of normal list  * test reverse of normal list (skipped)
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m25 tests, 0 failures, 24 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:20

[33mwarning: [0mvariable l is unused
  list_ops.exs:20

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable l is unused
  list_ops.exs:25

[33mwarning: [0mvariable acc is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable a is unused
  list_ops.exs:36

[33mwarning: [0mvariable b is unused
  list_ops.exs:36

[33mwarning: [0mvariable ll is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list  * test count of huge list (skipped)
  * test reverse of empty list  * test reverse of empty list (skipped)
  * test reverse of normal list  * test reverse of normal list (skipped)
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m25 tests, 0 failures, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:20

[33mwarning: [0mvariable l is unused
  list_ops.exs:20

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable l is unused
  list_ops.exs:25

[33mwarning: [0mvariable acc is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable a is unused
  list_ops.exs:36

[33mwarning: [0mvariable b is unused
  list_ops.exs:36

[33mwarning: [0mvariable ll is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (157.5ms)[0m
  * test reverse of empty list  * test reverse of empty list (skipped)
  * test reverse of normal list  * test reverse of normal list (skipped)
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[32m25 tests, 0 failures, 22 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:20

[33mwarning: [0mvariable l is unused
  list_ops.exs:20

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable l is unused
  list_ops.exs:25

[33mwarning: [0mvariable acc is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable a is unused
  list_ops.exs:36

[33mwarning: [0mvariable b is unused
  list_ops.exs:36

[33mwarning: [0mvariable ll is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (160.4ms)[0m
  * test reverse of empty list[31m  * test reverse of empty list (2.3ms)[0m

  1) test reverse of empty list (ListOpsTest)
     [1m[30mlist_ops_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reverse([]) == []
     [36mlhs:  [0mnil
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       list_ops_test.exs:28: (test)

  * test reverse of normal list  * test reverse of normal list (skipped)
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[31m25 tests, 1 failure, 21 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable l is unused
  list_ops.exs:18

[33mwarning: [0mvariable f is unused
  list_ops.exs:23

[33mwarning: [0mvariable l is unused
  list_ops.exs:23

[33mwarning: [0mvariable f is unused
  list_ops.exs:28

[33mwarning: [0mvariable l is unused
  list_ops.exs:28

[33mwarning: [0mvariable acc is unused
  list_ops.exs:34

[33mwarning: [0mvariable f is unused
  list_ops.exs:34

[33mwarning: [0mvariable l is unused
  list_ops.exs:34

[33mwarning: [0mvariable a is unused
  list_ops.exs:39

[33mwarning: [0mvariable b is unused
  list_ops.exs:39

[33mwarning: [0mvariable ll is unused
  list_ops.exs:44

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (156.8ms)[0m
  * test reverse of empty list[31m  * test reverse of empty list (4.0ms)[0m

  1) test reverse of empty list (ListOpsTest)
     [1m[30mlist_ops_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reverse([]) == []
     [36mlhs:  [0mnil
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       list_ops_test.exs:28: (test)

  * test reverse of normal list  * test reverse of normal list (skipped)
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[31m25 tests, 1 failure, 21 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable l is unused
  list_ops.exs:19

[33mwarning: [0mvariable f is unused
  list_ops.exs:23

[33mwarning: [0mvariable l is unused
  list_ops.exs:23

[33mwarning: [0mvariable f is unused
  list_ops.exs:28

[33mwarning: [0mvariable l is unused
  list_ops.exs:28

[33mwarning: [0mvariable acc is unused
  list_ops.exs:34

[33mwarning: [0mvariable f is unused
  list_ops.exs:34

[33mwarning: [0mvariable l is unused
  list_ops.exs:34

[33mwarning: [0mvariable a is unused
  list_ops.exs:39

[33mwarning: [0mvariable b is unused
  list_ops.exs:39

[33mwarning: [0mvariable ll is unused
  list_ops.exs:44

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (166.6ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list  * test reverse of normal list (skipped)
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[32m25 tests, 0 failures, 21 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable l is unused
  list_ops.exs:19

[33mwarning: [0mvariable f is unused
  list_ops.exs:23

[33mwarning: [0mvariable l is unused
  list_ops.exs:23

[33mwarning: [0mvariable f is unused
  list_ops.exs:28

[33mwarning: [0mvariable l is unused
  list_ops.exs:28

[33mwarning: [0mvariable acc is unused
  list_ops.exs:34

[33mwarning: [0mvariable f is unused
  list_ops.exs:34

[33mwarning: [0mvariable l is unused
  list_ops.exs:34

[33mwarning: [0mvariable a is unused
  list_ops.exs:39

[33mwarning: [0mvariable b is unused
  list_ops.exs:39

[33mwarning: [0mvariable ll is unused
  list_ops.exs:44

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (157.5ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[31m  * test reverse of normal list (2.0ms)[0m

  1) test reverse of normal list (ListOpsTest)
     [1m[30mlist_ops_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reverse([1, 3, 5, 7]) == [7, 5, 3, 1]
     [36mlhs:  [0mnil
     [36mrhs:  [0m[7, 5, 3, 1]
     [36mstacktrace:[0m
       list_ops_test.exs:32: (test)

  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[31m25 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable l is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:30

[33mwarning: [0mvariable l is unused
  list_ops.exs:30

[33mwarning: [0mvariable acc is unused
  list_ops.exs:36

[33mwarning: [0mvariable f is unused
  list_ops.exs:36

[33mwarning: [0mvariable l is unused
  list_ops.exs:36

[33mwarning: [0mvariable a is unused
  list_ops.exs:41

[33mwarning: [0mvariable b is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:46

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.01ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (165.8ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[32m25 tests, 0 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:30

[33mwarning: [0mvariable l is unused
  list_ops.exs:30

[33mwarning: [0mvariable acc is unused
  list_ops.exs:36

[33mwarning: [0mvariable f is unused
  list_ops.exs:36

[33mwarning: [0mvariable l is unused
  list_ops.exs:36

[33mwarning: [0mvariable a is unused
  list_ops.exs:41

[33mwarning: [0mvariable b is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:46

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (166.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list  * test reverse of huge list (skipped)
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.3 seconds (0.1s on load, 0.1s on tests)
[32m25 tests, 0 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:30

[33mwarning: [0mvariable l is unused
  list_ops.exs:30

[33mwarning: [0mvariable acc is unused
  list_ops.exs:36

[33mwarning: [0mvariable f is unused
  list_ops.exs:36

[33mwarning: [0mvariable l is unused
  list_ops.exs:36

[33mwarning: [0mvariable a is unused
  list_ops.exs:41

[33mwarning: [0mvariable b is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:46

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (189.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (312.3ms)[0m
  * test map of empty list  * test map of empty list (skipped)
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.6 seconds (0.1s on load, 0.5s on tests)
[32m25 tests, 0 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:30

[33mwarning: [0mvariable l is unused
  list_ops.exs:30

[33mwarning: [0mvariable acc is unused
  list_ops.exs:36

[33mwarning: [0mvariable f is unused
  list_ops.exs:36

[33mwarning: [0mvariable l is unused
  list_ops.exs:36

[33mwarning: [0mvariable a is unused
  list_ops.exs:41

[33mwarning: [0mvariable b is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:46

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (164.4ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (296.1ms)[0m
  * test map of empty list[31m  * test map of empty list (3.5ms)[0m

  1) test map of empty list (ListOpsTest)
     [1m[30mlist_ops_test.exs:39[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.map/2[0m
     [36mstacktrace:[0m
       list_ops.exs:25: ListOps.map([], #Function<6.94116580/1 in ListOpsTest.test map of empty list/1>)
       list_ops_test.exs:40: (test)

  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.6 seconds (0.1s on load, 0.4s on tests)
[31m25 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:30

[33mwarning: [0mvariable l is unused
  list_ops.exs:30

[33mwarning: [0mvariable acc is unused
  list_ops.exs:36

[33mwarning: [0mvariable f is unused
  list_ops.exs:36

[33mwarning: [0mvariable l is unused
  list_ops.exs:36

[33mwarning: [0mvariable a is unused
  list_ops.exs:41

[33mwarning: [0mvariable b is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:46

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (175.1ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (320.1ms)[0m
  * test map of empty list[31m  * test map of empty list (2.4ms)[0m

  1) test map of empty list (ListOpsTest)
     [1m[30mlist_ops_test.exs:39[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.map/2[0m
     [36mstacktrace:[0m
       list_ops.exs:25: ListOps.map([], #Function<6.94116580/1 in ListOpsTest.test map of empty list/1>)
       list_ops_test.exs:40: (test)

  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.6 seconds (0.1s on load, 0.4s on tests)
[31m25 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:37

[33mwarning: [0mvariable f is unused
  list_ops.exs:37

[33mwarning: [0mvariable l is unused
  list_ops.exs:37

[33mwarning: [0mvariable a is unused
  list_ops.exs:42

[33mwarning: [0mvariable b is unused
  list_ops.exs:42

[33mwarning: [0mvariable ll is unused
  list_ops.exs:47

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (169.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (287.5ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list  * test map of normal list (skipped)
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.6 seconds (0.1s on load, 0.4s on tests)
[32m25 tests, 0 failures, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:37

[33mwarning: [0mvariable f is unused
  list_ops.exs:37

[33mwarning: [0mvariable l is unused
  list_ops.exs:37

[33mwarning: [0mvariable a is unused
  list_ops.exs:42

[33mwarning: [0mvariable b is unused
  list_ops.exs:42

[33mwarning: [0mvariable ll is unused
  list_ops.exs:47

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (176.7ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (289.6ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list  * test map of huge list (skipped)
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.6 seconds (0.1s on load, 0.4s on tests)
[32m25 tests, 0 failures, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable l is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:37

[33mwarning: [0mvariable f is unused
  list_ops.exs:37

[33mwarning: [0mvariable l is unused
  list_ops.exs:37

[33mwarning: [0mvariable a is unused
  list_ops.exs:42

[33mwarning: [0mvariable b is unused
  list_ops.exs:42

[33mwarning: [0mvariable ll is unused
  list_ops.exs:47

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (169.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (300.9ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (347.4ms)[0m
  * test filter of empty list  * test filter of empty list (skipped)
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.9 seconds (0.1s on load, 0.8s on tests)
[32m25 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

** (CompileError) list_ops.exs:34: unhandled operator ->
    (stdlib) lists.erl:1353: :lists.mapfoldl/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

** (CompileError) list_ops.exs:34: unhandled operator ->
    (stdlib) lists.erl:1353: :lists.mapfoldl/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:41

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable l is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:46

[33mwarning: [0mvariable b is unused
  list_ops.exs:46

[33mwarning: [0mvariable ll is unused
  list_ops.exs:51

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (156.8ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (272.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (361.9ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list  * test filter of normal list (skipped)
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.9 seconds (0.1s on load, 0.7s on tests)
[32m25 tests, 0 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:41

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable l is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:46

[33mwarning: [0mvariable b is unused
  list_ops.exs:46

[33mwarning: [0mvariable ll is unused
  list_ops.exs:51

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (164.0ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (283.6ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (370.4ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list  * test filter of huge list (skipped)
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 0.9 seconds (0.1s on load, 0.8s on tests)
[32m25 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:41

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable l is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:46

[33mwarning: [0mvariable b is unused
  list_ops.exs:46

[33mwarning: [0mvariable ll is unused
  list_ops.exs:51

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (188.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (315.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (363.6ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (312.7ms)[0m
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 1.3 seconds (0.1s on load, 1.1s on tests)
[32m25 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:41

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (251.3ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.01ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (432.8ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (528.2ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (409.3ms)[0m
  * test reduce of empty list  * test reduce of empty list (skipped)
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 1.8 seconds (0.2s on load, 1.6s on tests)
[32m25 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable acc is unused
  list_ops.exs:41

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (236.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (437.4ms)[0m
  * test map of empty list[32m  * test map of empty list (0.01ms)[0m
  * test map of normal list[32m  * test map of normal list (0.01ms)[0m
  * test map of huge list[32m  * test map of huge list (554.9ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (432.2ms)[0m
  * test reduce of empty list[31m  * test reduce of empty list (4.6ms)[0m

  1) test reduce of empty list (ListOpsTest)
     [1m[30mlist_ops_test.exs:65[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reduce([], 0, &(&1 + &2)) == 0
     [36mlhs:  [0m:acc
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       list_ops_test.exs:66: (test)

  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 1.8 seconds (0.2s on load, 1.6s on tests)
[31m25 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (234.6ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (434.8ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (499.5ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (418.2ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list  * test reduce of normal list (skipped)
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 1.8 seconds (0.2s on load, 1.5s on tests)
[32m25 tests, 0 failures, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (242.0ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (432.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.01ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (533.5ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.01ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (416.4ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.01ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list  * test reduce of huge list (skipped)
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 1.8 seconds (0.2s on load, 1.6s on tests)
[32m25 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (239.1ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (389.9ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (522.4ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.02ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (403.1ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (362.1ms)[0m
  * test reduce with non-commutative function  * test reduce with non-commutative function (skipped)
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.1 seconds (0.2s on load, 1.9s on tests)
[32m25 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (238.1ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (422.8ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (517.8ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (423.4ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (351.0ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists  * test append of empty lists (skipped)
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.1 seconds (0.2s on load, 1.9s on tests)
[32m25 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:47

[33mwarning: [0mvariable b is unused
  list_ops.exs:47

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (256.1ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (395.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.01ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (544.3ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (419.8ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (376.0ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[31m  * test append of empty lists (2.5ms)[0m

  1) test append of empty lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:82[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.append([], []) == []
     [36mlhs:  [0mnil
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       list_ops_test.exs:83: (test)

  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.2 seconds (0.2s on load, 1.9s on tests)
[31m25 tests, 1 failure, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (241.0ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (441.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.01ms)[0m
  * test map of normal list[32m  * test map of normal list (0.01ms)[0m
  * test map of huge list[32m  * test map of huge list (518.1ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (408.9ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.02ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.01ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (353.5ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list  * test append of empty and non-empty list (skipped)
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.2 seconds (0.2s on load, 1.9s on tests)
[32m25 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (242.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.01ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (419.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (496.3ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (417.0ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.02ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.01ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (357.5ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list  * test append of non-empty and empty list (skipped)
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.1 seconds (0.2s on load, 1.9s on tests)
[32m25 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:52

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (254.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (425.6ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (512.2ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.01ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.01ms)[0m
  * test filter of huge list[32m  * test filter of huge list (427.6ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (406.1ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.01ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.2 seconds (0.2s on load, 2.0s on tests)
[32m25 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:53

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (345.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (578.7ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (542.8ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.01ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (469.3ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (442.2ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.02ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[31m  * test append of non-empty and empty list (7.7ms)[0m

  1) test append of non-empty and empty list (ListOpsTest)
     [1m[30mlist_ops_test.exs:90[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(1)
       list_ops.exs:49: ListOps.append/2
       list_ops_test.exs:91: (test)

  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.7 seconds (0.3s on load, 2.4s on tests)
[31m25 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:53

** (CompileError) list_ops.exs:49: undefined function x/0
    (stdlib) lists.erl:1337: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:58

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (298.6ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (496.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (566.4ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.02ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.02ms)[0m
  * test filter of huge list[32m  * test filter of huge list (386.7ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (372.2ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.01ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists  * test append of non-empty lists (skipped)
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.4 seconds (0.3s on load, 2.1s on tests)
[32m25 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:58

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.01ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (244.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.01ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (431.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (531.5ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (449.0ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.01ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (325.3ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists  * test append of huge lists (skipped)
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.2 seconds (0.2s on load, 1.9s on tests)
[32m25 tests, 0 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:58

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (257.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.01ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.03ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (423.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (533.2ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (440.4ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.01ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.01ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (369.2ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.01ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.02ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.01ms)[0m
  * test append of huge lists[32m  * test append of huge lists (1076.4ms)[0m
  * test concat of empty list of lists  * test concat of empty list of lists (skipped)
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 3.3 seconds (0.2s on load, 3.1s on tests)
[32m25 tests, 0 failures, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:58

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (222.0ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (402.9ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (547.0ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (415.6ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.01ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (375.9ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.01ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (986.8ms)[0m
  * test concat of empty list of lists[31m  * test concat of empty list of lists (13.4ms)[0m

  1) test concat of empty list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:103[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([]) == []
     [36mlhs:  [0mnil
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       list_ops_test.exs:104: (test)

  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 3.1 seconds (0.2s on load, 2.9s on tests)
[31m25 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

** (CompileError) list_ops.exs:59: invalid args for &, expected an expression in the format of &Mod.fun/arity, &local/arity or a capture containing at least one argument as &1, got: append
    (stdlib) lists.erl:1353: :lists.mapfoldl/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (208.8ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (358.5ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (453.1ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (364.0ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (328.9ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (832.3ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists  * test concat of normal list of lists (skipped)
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.7 seconds (0.1s on load, 2.5s on tests)
[32m25 tests, 0 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (204.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (376.9ms)[0m
  * test map of empty list[32m  * test map of empty list (0.03ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (438.6ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (357.7ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (322.3ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (855.7ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (4.5ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[[31m4[0m, [31m5[0m, [31m6[0m, [31m3[0m, [31m1[0m, [31m2[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m, [32m4[0m, [32m5[0m, [32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.7 seconds (0.1s on load, 2.5s on tests)
[31m25 tests, 1 failure, 2 skipped[0m

Randomized with seed 0
** (SyntaxError) list_ops.exs:60: unexpected token: "end". "(" starting at line 59 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    list_ops_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) list_ops.exs:60: unexpected token: "end". "(" starting at line 59 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    list_ops_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (209.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (357.3ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (437.9ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.01ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (372.8ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (315.2ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (860.5ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[32m  * test concat of normal list of lists (0.00ms)[0m
  * test concat of huge list of small lists  * test concat of huge list of small lists (skipped)
  * test concat of small list of huge lists  * test concat of small list of huge lists (skipped)


Finished in 2.7 seconds (0.1s on load, 2.5s on tests)
[32m25 tests, 0 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (212.0ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (378.6ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (441.0ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (379.9ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.02ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (318.6ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.1ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (831.2ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[32m  * test concat of normal list of lists (0.00ms)[0m
  * test concat of huge list of small lists[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable a is unused
  list_ops.exs:42

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (293.6ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (384.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (679.3ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.02ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (515.4ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[31m  * test reduce of normal list (5.9ms)[0m

  1) test reduce of normal list (ListOpsTest)
     [1m[30mlist_ops_test.exs:69[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reduce([1, 2, 3, 4], -3, &(&1 + &2)) == 7
     [36mlhs:  [0m[31m-3[0m
     [36mrhs:  [0m[32m7[0m
     [36mstacktrace:[0m
       list_ops_test.exs:70: (test)

  * test reduce of huge list[31m  * test reduce of huge list (362.3ms)[0m

  2) test reduce of huge list (ListOpsTest)
     [1m[30mlist_ops_test.exs:73[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reduce(Enum.to_list(1..1000000), 0, &(&1 + &2)) == Enum.reduce(1..1000000, 0, &(&1 + &2))
     [36mlhs:  [0m0
     [36mrhs:  [0m[32m5[0m0[32m0000500000[0m
     [36mstacktrace:[0m
       list_ops_test.exs:74: (test)

  * test reduce with non-commutative function[31m  * test reduce with non-commutative function (0.02ms)[0m

  3) test reduce with non-commutative function (ListOpsTest)
     [1m[30mlist_ops_test.exs:78[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.reduce([1, 2, 3, 4], 10, fn x, acc -> acc - x end) == 0
     [36mlhs:  [0m[31m1[0m0
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       list_ops_test.exs:79: (test)

  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (1001.7ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (0.03ms)[0m

  4) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[]
     [36mrhs:  [0m[[32m1[0m[32m, [0m[32m2[0m[32m, [0m[32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (690.8ms)[0m

  5) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (483.8ms)[0m

  6) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 4.7 seconds (0.2s on load, 4.5s on tests)
[31m25 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable b is unused
  list_ops.exs:59

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (220.3ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (438.5ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (573.2ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (369.7ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (332.9ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (1003.1ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (4.2ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[[31m4[0m, [31m5[0m, [31m6[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (717.2ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1000000]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (407.2ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[900001, 900002, 900003, 900004, 900005, 900006, 900007, 900008, 900009, 900010, 900011, 900012, 900013, 900014, 900015, 900016, 900017, 900018, 900019, 900020, 900021,
            900022, 900023, 900024, 900025, 900026, 900027, 900028, 900029, 900030, 900031, 900032, 900033, 900034, 900035, 900036, 900037, 900038, 900039, 900040, 900041, 900042,
            900043, 900044, 900045, 900046, 900047, 900048, 900049, 900050, ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 4.3 seconds (0.1s on load, 4.1s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (300.8ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (472.5ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (505.4ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.1ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (433.3ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.01ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (408.6ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (1006.7ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (4.9ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[[31m4[0m, [31m5[0m, [31m6[0m, [31m3[0m, [31m1[0m, [31m2[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m, [32m4[0m, [32m5[0m, [32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (552.8ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990, 999989, 999988, 999987, 999986, 999985, 999984, 999983, 999982, 999981, 999980,
            999979, 999978, 999977, 999976, 999975, 999974, 999973, 999972, 999971, 999970, 999969, 999968, 999967, 999966, 999965, 999964, 999963, 999962, 999961, 999960, 999959,
            999958, 999957, 999956, 999955, 999954, 999953, 999952, 999951, ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (633.8ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[900001, 900002, 900003, 900004, 900005, 900006, 900007, 900008, 900009, 900010, 900011, 900012, 900013, 900014, 900015, 900016, 900017, 900018, 900019, 900020, 900021,
            900022, 900023, 900024, 900025, 900026, 900027, 900028, 900029, 900030, 900031, 900032, 900033, 900034, 900035, 900036, 900037, 900038, 900039, 900040, 900041, 900042,
            900043, 900044, 900045, 900046, 900047, 900048, 900049, 900050, ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 4.8 seconds (0.2s on load, 4.6s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (206.8ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (368.5ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (569.8ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (474.8ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (324.1ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (937.9ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[32m  * test concat of normal list of lists (0.00ms)[0m
  * test concat of huge list of small lists[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (210.6ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (391.6ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (589.9ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (372.8ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (301.7ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (1117.0ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (4.5ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[[31m2[0m, [31m1[0m, 3, [31m6[0m, 5, [31m4[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, 3, [32m4[0m, 5, [32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[32m  * test concat of huge list of small lists (571.0ms)[0m
  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (458.5ms)[0m

  2) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990, 99989, 99988, 99987, 99986, 99985, 99984, 99983, 99982, 99981, 99980, 99979, 99978, 99977,
            99976, 99975, 99974, 99973, 99972, 99971, 99970, 99969, 99968, 99967, 99966, 99965, 99964, 99963, 99962, 99961, 99960, 99959, 99958, 99957, 99956, 99955, 99954, 99953,
            99952, 99951, ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 4.2 seconds (0.1s on load, 4.0s on tests)
[31m25 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (258.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (416.9ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (557.6ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (487.0ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.03ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.03ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (429.8ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (927.3ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (6.9ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[[31m[1, 2][0m, [31m[3][0m, [31m[][0m, [31m[4, 5, 6][0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m, [32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (648.5ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[[1], [2], [3], [4], [5], [6], '\a', '\b', '\t', '\n', '\v', '\f', '\r', [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], '\e', [28], [29],
            [30], [31], ' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (646.4ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
             45, 46, 47, 48, 49, ...],
            [100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008, 100009, 100010, 100011, 100012, 100013, 100014, 100015, 100016, 100017, 100018, 100019, 100020, 100021,
             100022, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042,
             100043, 100044, 100045, 100046, 100047, 100048, ...],
            [200001, 200002, 200003, 200004, 200005, 200006, 200007, 200008, 200009, 200010, 200011, 200012, 200013, 200014, 200015, 200016, 200017, 200018, 200019, 200020, 200021,
             200022, 200023, 200024, 200025, 200026, 200027, 200028, 200029, 200030, 200031, 200032, 200033, 200034, 200035, 200036, 200037, 200038, 200039, 200040, 200041, 200042,
             200043, 200044, 200045, 200046, 200047, ...],
            [300001, 300002, 300003, 300004, 300005, 300006, 300007, 300008, 300009, 300010, 300011, 300012, 300013, 300014, 300015, 300016, 300017, 300018, 300019, 300020, 300021,
             300022, 300023, 300024, 300025, 300026, 300027, 300028, 300029, 300030, 300031, 300032, 300033, 300034, 300035, 300036, 300037, 300038, 300039, 300040, 300041, 300042,
             300043, 300044, 300045, 300046, ...],
            [400001, 400002, 400003, 400004, 400005, 400006, 400007, 400008, 400009, 400010, 400011, 400012, 400013, 400014, 400015, 400016, 400017, 400018, 400019, 400020, 400021,
             400022, 400023, 400024, 400025, 400026, 400027, 400028, 400029, 400030, 400031, 400032, 400033, 400034, 400035, 400036, 400037, 400038, 400039, 400040, 400041, 400042,
             400043, 400044, 400045, ...],
            [500001, 500002, 500003, 500004, 500005, 500006, 500007, 500008, 500009, 500010, 500011, 500012, 500013, 500014, 500015, 500016, 500017, 500018, 500019, 500020, 500021,
             500022, 500023, 500024, 500025, 500026, 500027, 500028, 500029, 500030, 500031, 500032, 500033, 500034, 500035, 500036, 500037, 500038, 500039, 500040, 500041, 500042,
             500043, 500044, ...],
            [600001, 600002, 600003, 600004, 600005, 600006, 600007, 600008, 600009, 600010, 600011, 600012, 600013, 600014, 600015, 600016, 600017, 600018, 600019, 600020, 600021,
             600022, 600023, 600024, 600025, 600026, 600027, 600028, 600029, 600030, 600031, 600032, 600033, 600034, 600035, 600036, 600037, 600038, 600039, 600040, 600041, 600042,
             600043, ...],
            [700001, 700002, 700003, 700004, 700005, 700006, 700007, 700008, 700009, 700010, 700011, 700012, 700013, 700014, 700015, 700016, 700017, 700018, 700019, 700020, 700021,
             700022, 700023, 700024, 700025, 700026, 700027, 700028, 700029, 700030, 700031, 700032, 700033, 700034, 700035, 700036, 700037, 700038, 700039, 700040, 700041, 700042,
             ...],
            [800001, 800002, 800003, 800004, 800005, 800006, 800007, 800008, 800009, 800010, 800011, 800012, 800013, 800014, 800015, 800016, 800017, 800018, 800019, 800020, 800021,
             800022, 800023, 800024, 800025, 800026, 800027, 800028, 800029, 800030, 800031, 800032, 800033, 800034, 800035, 800036, 800037, 800038, 800039, 800040, 800041, ...],
            [900001, 900002, 900003, 900004, 900005, 900006, 900007, 900008, 900009, 900010, 900011, 900012, 900013, 900014, 900015, 900016, 900017, 900018, 900019, 900020, 900021,
             900022, 900023, 900024, 900025, 900026, 900027, 900028, 900029, 900030, 900031, 900032, 900033, 900034, 900035, 900036, 900037, 900038, 900039, 900040, 900041, ...]]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 5.0 seconds (0.2s on load, 4.8s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

** (CompileError) list_ops.exs:61: invalid expression in match
    (elixir) expanding macro: Kernel.||/2
    list_ops.exs:61: ListOps.concat/2
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

** (CompileError) list_ops.exs:61: invalid expression in match
    (elixir) expanding macro: Kernel.||/2
    list_ops.exs:61: ListOps.concat/2
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mthis clause cannot match because a previous clause at line 58 always matches
  list_ops.exs:59

[33mwarning: [0mthis clause cannot match because a previous clause at line 58 always matches
  list_ops.exs:60

[33mwarning: [0mvariable ll is unused
  list_ops.exs:61

[33mwarning: [0mthis clause cannot match because a previous clause at line 58 always matches
  list_ops.exs:61

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (169.1ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (280.3ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (343.8ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (291.0ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (245.3ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (639.8ms)[0m
  * test concat of empty list of lists[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:60

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (169.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (290.1ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (349.5ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (280.3ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (245.7ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (627.1ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (3.6ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.concat/2[0m
     [36mstacktrace:[0m
       list_ops.exs:58: ListOps.concat([2], [1])
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (366.4ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (149.8ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.concat/2[0m
     [36mstacktrace:[0m
       list_ops.exs:58: ListOps.concat([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, ...], [1])
       list_ops_test.exs:117: (test)



Finished in 2.6 seconds (0.1s on load, 2.5s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:60

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:60

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (164.9ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (286.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (322.7ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (288.9ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (246.8ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (635.3ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (2.6ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.concat/2[0m
     [36mstacktrace:[0m
       list_ops.exs:58: ListOps.concat([2], [1])
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (382.2ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (132.3ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.concat/2[0m
     [36mstacktrace:[0m
       list_ops.exs:58: ListOps.concat([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, ...], [1])
       list_ops_test.exs:117: (test)



Finished in 2.6 seconds (0.1s on load, 2.5s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:60

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:60

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (168.1ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (277.9ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (324.4ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (282.9ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (251.3ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (632.1ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (2.5ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.concat/2[0m
     [36mstacktrace:[0m
       list_ops.exs:58: ListOps.concat([2], [1])
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (359.9ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (107.8ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31m** (FunctionClauseError) no function clause matching in ListOps.concat/2[0m
     [36mstacktrace:[0m
       list_ops.exs:58: ListOps.concat([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, ...], [1])
       list_ops_test.exs:117: (test)



Finished in 2.6 seconds (0.1s on load, 2.4s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:60

** (CompileError) list_ops.exs:63: definitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:59

[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def concat/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:60

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:60

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (150.2ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (272.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (343.2ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (262.0ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (251.8ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (639.6ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (2.3ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[1, 2]
     [36mrhs:  [0m[1, 2[32m, [0m[32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (348.3ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (258.7ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 2.7 seconds (0.1s on load, 2.6s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

[33mwarning: [0mvariable ll is unused
  list_ops.exs:61

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (152.7ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (292.0ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (348.9ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (303.6ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (255.3ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (645.2ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[31m  * test concat of normal list of lists (2.2ms)[0m

  1) test concat of normal list of lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:107[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat([[1, 2], [3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]
     [36mlhs:  [0m[1, 2]
     [36mrhs:  [0m[1, 2[32m, [0m[32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m]
     [36mstacktrace:[0m
       list_ops_test.exs:108: (test)

  * test concat of huge list of small lists[31m  * test concat of huge list of small lists (384.0ms)[0m

  2) test concat of huge list of small lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:111[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(1..1000000, &([&1]))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:112: (test)

  * test concat of small list of huge lists[31m  * test concat of small list of huge lists (249.4ms)[0m

  3) test concat of small list of huge lists (ListOpsTest)
     [1m[30mlist_ops_test.exs:116[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mL.concat(Enum.map(0..9, &(Enum.to_list(&1 * 100000 + 1..(&1 + 1) * 100000)))) == Enum.to_list(1..1000000)
     [36mlhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mrhs:  [0m[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, ...]
     [36mstacktrace:[0m
       list_ops_test.exs:117: (test)



Finished in 2.8 seconds (0.1s on load, 2.6s on tests)
[31m25 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (162.5ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (306.7ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (327.9ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (285.5ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (242.9ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (650.8ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[32m  * test concat of normal list of lists (0.00ms)[0m
  * test concat of huge list of small lists[32m  * test concat of huge list of small lists (426.3ms)[0m
  * test concat of small list of huge lists[32m  * test concat of small list of huge lists (350.2ms)[0m


Finished in 2.8 seconds (0.1s on load, 2.7s on tests)
[32m25 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:25

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (166.5ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (280.5ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.01ms)[0m
  * test map of huge list[32m  * test map of huge list (344.3ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (285.8ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (257.7ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (643.3ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[32m  * test concat of normal list of lists (0.00ms)[0m
  * test concat of huge list of small lists[32m  * test concat of huge list of small lists (429.5ms)[0m
  * test concat of small list of huge lists[32m  * test concat of small list of huge lists (342.0ms)[0m


Finished in 2.8 seconds (0.1s on load, 2.7s on tests)
[32m25 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mdefinitions with multiple clauses and default values require a function head. Instead of:

    def foo(:first_clause, b \\ :default) do ... end
    def foo(:second_clause, b) do ... end

one should write:

    def foo(a, b \\ :default)
    def foo(:first_clause, b) do ... end
    def foo(:second_clause, b) do ... end

def reverse/2 has multiple clauses and defines defaults in a clause with a body
  list_ops.exs:20

[33mwarning: [0mvariable a is unused
  list_ops.exs:15

[33mwarning: [0mvariable f is unused
  list_ops.exs:31

[33mwarning: [0mvariable f is unused
  list_ops.exs:41

Excluding tags: [:pending]


ListOpsTest
  * test count of empty list[32m  * test count of empty list (0.00ms)[0m
  * test count of normal list[32m  * test count of normal list (0.00ms)[0m
  * test count of huge list[32m  * test count of huge list (154.3ms)[0m
  * test reverse of empty list[32m  * test reverse of empty list (0.00ms)[0m
  * test reverse of normal list[32m  * test reverse of normal list (0.00ms)[0m
  * test reverse of huge list[32m  * test reverse of huge list (293.8ms)[0m
  * test map of empty list[32m  * test map of empty list (0.00ms)[0m
  * test map of normal list[32m  * test map of normal list (0.00ms)[0m
  * test map of huge list[32m  * test map of huge list (366.5ms)[0m
  * test filter of empty list[32m  * test filter of empty list (0.00ms)[0m
  * test filter of normal list[32m  * test filter of normal list (0.00ms)[0m
  * test filter of huge list[32m  * test filter of huge list (315.5ms)[0m
  * test reduce of empty list[32m  * test reduce of empty list (0.00ms)[0m
  * test reduce of normal list[32m  * test reduce of normal list (0.00ms)[0m
  * test reduce of huge list[32m  * test reduce of huge list (257.5ms)[0m
  * test reduce with non-commutative function[32m  * test reduce with non-commutative function (0.00ms)[0m
  * test append of empty lists[32m  * test append of empty lists (0.00ms)[0m
  * test append of empty and non-empty list[32m  * test append of empty and non-empty list (0.00ms)[0m
  * test append of non-empty and empty list[32m  * test append of non-empty and empty list (0.00ms)[0m
  * test append of non-empty lists[32m  * test append of non-empty lists (0.00ms)[0m
  * test append of huge lists[32m  * test append of huge lists (667.8ms)[0m
  * test concat of empty list of lists[32m  * test concat of empty list of lists (0.00ms)[0m
  * test concat of normal list of lists[32m  * test concat of normal list of lists (0.00ms)[0m
  * test concat of huge list of small lists[32m  * test concat of huge list of small lists (442.7ms)[0m
  * test concat of small list of huge lists[32m  * test concat of small list of huge lists (325.2ms)[0m


Finished in 2.9 seconds (0.1s on load, 2.8s on tests)
[32m25 tests, 0 failures[0m

Randomized with seed 0
