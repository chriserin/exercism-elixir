[33mwarning: [0mvariable bt is unused
  zipper.exs:30

[33mwarning: [0mvariable z is unused
  zipper.exs:37

[33mwarning: [0mvariable z is unused
  zipper.exs:44

[33mwarning: [0mvariable z is unused
  zipper.exs:51

[33mwarning: [0mvariable z is unused
  zipper.exs:58

[33mwarning: [0mvariable z is unused
  zipper.exs:65

[33mwarning: [0mvariable v is unused
  zipper.exs:72

[33mwarning: [0mvariable z is unused
  zipper.exs:72

[33mwarning: [0mvariable l is unused
  zipper.exs:79

[33mwarning: [0mvariable z is unused
  zipper.exs:79

[33mwarning: [0mvariable r is unused
  zipper.exs:86

[33mwarning: [0mvariable z is unused
  zipper.exs:86

Excluding tags: [:pending]


ZipperTest
  * test data is retained[31m  * test data is retained (3.1ms)[0m

  1) test data is retained (ZipperTest)
     [1m[30mzipper_test.exs:24[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> to_tree == t1
     [36mlhs:  [0mnil
     [36mrhs:  [0m%BinTree{left: %BinTree{left: nil,
             right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
            right: %BinTree{left: nil, right: nil, value: 4}, value: 1}
     [36mstacktrace:[0m
       zipper_test.exs:25: (test)

  * test left, right and value  * test left, right and value (skipped)
  * test dead end  * test dead end (skipped)
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:46

[33mwarning: [0mvariable z is unused
  zipper.exs:53

[33mwarning: [0mvariable z is unused
  zipper.exs:60

[33mwarning: [0mvariable z is unused
  zipper.exs:67

[33mwarning: [0mvariable v is unused
  zipper.exs:74

[33mwarning: [0mvariable z is unused
  zipper.exs:74

[33mwarning: [0mvariable l is unused
  zipper.exs:81

[33mwarning: [0mvariable z is unused
  zipper.exs:81

[33mwarning: [0mvariable r is unused
  zipper.exs:88

[33mwarning: [0mvariable z is unused
  zipper.exs:88

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value  * test left, right and value (skipped)
  * test dead end  * test dead end (skipped)
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.09 seconds (0.09s on load, 0.00s on tests)
[32m12 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:46

[33mwarning: [0mvariable z is unused
  zipper.exs:53

[33mwarning: [0mvariable z is unused
  zipper.exs:60

[33mwarning: [0mvariable z is unused
  zipper.exs:67

[33mwarning: [0mvariable v is unused
  zipper.exs:74

[33mwarning: [0mvariable z is unused
  zipper.exs:74

[33mwarning: [0mvariable l is unused
  zipper.exs:81

[33mwarning: [0mvariable z is unused
  zipper.exs:81

[33mwarning: [0mvariable r is unused
  zipper.exs:88

[33mwarning: [0mvariable z is unused
  zipper.exs:88

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.00ms)[0m
  * test left, right and value[31m  * test left, right and value (4.1ms)[0m

  1) test left, right and value (ZipperTest)
     [1m[30mzipper_test.exs:28[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> right |> value == 3
     [36mlhs:  [0mnil
     [36mrhs:  [0m3
     [36mstacktrace:[0m
       zipper_test.exs:29: (test)

  * test dead end  * test dead end (skipped)
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
** (CompileError) zipper.exs:33: Zipper.__struct__/1 is undefined, cannot expand struct Zipper
    zipper.exs:32: (module)

[33mwarning: [0mvariable bt is unused
  zipper.exs:34

[33mwarning: [0mvariable z is unused
  zipper.exs:50

[33mwarning: [0mvariable z is unused
  zipper.exs:57

[33mwarning: [0mvariable z is unused
  zipper.exs:64

[33mwarning: [0mvariable z is unused
  zipper.exs:71

[33mwarning: [0mvariable v is unused
  zipper.exs:78

[33mwarning: [0mvariable z is unused
  zipper.exs:78

[33mwarning: [0mvariable l is unused
  zipper.exs:85

[33mwarning: [0mvariable z is unused
  zipper.exs:85

[33mwarning: [0mvariable r is unused
  zipper.exs:92

[33mwarning: [0mvariable z is unused
  zipper.exs:92

** (CompileError) zipper.exs:35: undefined function tr/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable bt is unused
  zipper.exs:34

[33mwarning: [0mvariable z is unused
  zipper.exs:50

[33mwarning: [0mvariable z is unused
  zipper.exs:57

[33mwarning: [0mvariable z is unused
  zipper.exs:64

[33mwarning: [0mvariable z is unused
  zipper.exs:71

[33mwarning: [0mvariable v is unused
  zipper.exs:78

[33mwarning: [0mvariable z is unused
  zipper.exs:78

[33mwarning: [0mvariable l is unused
  zipper.exs:85

[33mwarning: [0mvariable z is unused
  zipper.exs:85

[33mwarning: [0mvariable r is unused
  zipper.exs:92

[33mwarning: [0mvariable z is unused
  zipper.exs:92

** (CompileError) zipper.exs:35: undefined function tr/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable z is unused
  zipper.exs:50

[33mwarning: [0mvariable z is unused
  zipper.exs:57

[33mwarning: [0mvariable z is unused
  zipper.exs:64

[33mwarning: [0mvariable z is unused
  zipper.exs:71

[33mwarning: [0mvariable v is unused
  zipper.exs:78

[33mwarning: [0mvariable z is unused
  zipper.exs:78

[33mwarning: [0mvariable l is unused
  zipper.exs:85

[33mwarning: [0mvariable z is unused
  zipper.exs:85

[33mwarning: [0mvariable r is unused
  zipper.exs:92

[33mwarning: [0mvariable z is unused
  zipper.exs:92

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[31m  * test left, right and value (9.9ms)[0m

  1) test left, right and value (ZipperTest)
     [1m[30mzipper_test.exs:28[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> right |> value == 3
     [36mlhs:  [0mnil
     [36mrhs:  [0m3
     [36mstacktrace:[0m
       zipper_test.exs:29: (test)

  * test dead end  * test dead end (skipped)
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:74

[33mwarning: [0mvariable v is unused
  zipper.exs:81

[33mwarning: [0mvariable z is unused
  zipper.exs:81

[33mwarning: [0mvariable l is unused
  zipper.exs:88

[33mwarning: [0mvariable z is unused
  zipper.exs:88

[33mwarning: [0mvariable r is unused
  zipper.exs:95

[33mwarning: [0mvariable z is unused
  zipper.exs:95

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.01ms)[0m
  * test dead end  * test dead end (skipped)
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:74

[33mwarning: [0mvariable v is unused
  zipper.exs:81

[33mwarning: [0mvariable z is unused
  zipper.exs:81

[33mwarning: [0mvariable l is unused
  zipper.exs:88

[33mwarning: [0mvariable z is unused
  zipper.exs:88

[33mwarning: [0mvariable r is unused
  zipper.exs:95

[33mwarning: [0mvariable z is unused
  zipper.exs:95

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.00ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[31m  * test dead end (3.0ms)[0m

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [], tree: nil}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:74

[33mwarning: [0mvariable v is unused
  zipper.exs:81

[33mwarning: [0mvariable z is unused
  zipper.exs:81

[33mwarning: [0mvariable l is unused
  zipper.exs:88

[33mwarning: [0mvariable z is unused
  zipper.exs:88

[33mwarning: [0mvariable r is unused
  zipper.exs:95

[33mwarning: [0mvariable z is unused
  zipper.exs:95

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.00ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[31m  * test dead end (2.9ms)[0m

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [], tree: nil}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.09 seconds (0.09s on load, 0.00s on tests)
[31m12 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:77

[33mwarning: [0mvariable v is unused
  zipper.exs:84

[33mwarning: [0mvariable z is unused
  zipper.exs:84

[33mwarning: [0mvariable l is unused
  zipper.exs:91

[33mwarning: [0mvariable z is unused
  zipper.exs:91

[33mwarning: [0mvariable r is unused
  zipper.exs:98

[33mwarning: [0mvariable z is unused
  zipper.exs:98

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[31m  * test dead end (3.1ms)[0m

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [], tree: nil}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.09 seconds (0.09s on load, 0.00s on tests)
[31m12 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
** (TokenMissingError) zipper.exs:103: missing terminator: end (for "do" starting at line 25)
    (elixir) lib/code.ex:321: Code.load_file/2
    zipper_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable z is unused
  zipper.exs:80

[33mwarning: [0mvariable v is unused
  zipper.exs:87

[33mwarning: [0mvariable z is unused
  zipper.exs:87

[33mwarning: [0mvariable l is unused
  zipper.exs:94

[33mwarning: [0mvariable z is unused
  zipper.exs:94

[33mwarning: [0mvariable r is unused
  zipper.exs:101

[33mwarning: [0mvariable z is unused
  zipper.exs:101

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[31m  * test dead end (3.0ms)[0m

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [], tree: nil}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:80

[33mwarning: [0mvariable v is unused
  zipper.exs:87

[33mwarning: [0mvariable z is unused
  zipper.exs:87

[33mwarning: [0mvariable l is unused
  zipper.exs:94

[33mwarning: [0mvariable z is unused
  zipper.exs:94

[33mwarning: [0mvariable r is unused
  zipper.exs:101

[33mwarning: [0mvariable z is unused
  zipper.exs:101

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:80

[33mwarning: [0mvariable v is unused
  zipper.exs:87

[33mwarning: [0mvariable z is unused
  zipper.exs:87

[33mwarning: [0mvariable l is unused
  zipper.exs:94

[33mwarning: [0mvariable z is unused
  zipper.exs:94

[33mwarning: [0mvariable r is unused
  zipper.exs:101

[33mwarning: [0mvariable z is unused
  zipper.exs:101

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[31m  * test tree from deep focus (2.6ms)[0m

  1) test tree from deep focus (ZipperTest)
     [1m[30mzipper_test.exs:36[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> right |> to_tree == t1
     [36mlhs:  [0m%BinTree{left: [31mnil[0m, right: [31mnil[0m, value: [31m3[0m}
     [36mrhs:  [0m%BinTree{left: [32m%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}[0m, right: [32m%BinTree{left: nil, right: nil, value: 4}[0m, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:37: (test)

  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:83

[33mwarning: [0mvariable v is unused
  zipper.exs:90

[33mwarning: [0mvariable z is unused
  zipper.exs:90

[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:83

[33mwarning: [0mvariable v is unused
  zipper.exs:90

[33mwarning: [0mvariable z is unused
  zipper.exs:90

[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.06ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable z is unused
  zipper.exs:83

[33mwarning: [0mvariable v is unused
  zipper.exs:90

[33mwarning: [0mvariable z is unused
  zipper.exs:90

[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (11.1ms)[0m

  1) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (UndefinedFunctionError) function nil.tree/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.tree()
       Zipper.right/1
       zipper_test.exs:45: (test)

  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable v is unused
  zipper.exs:91

[33mwarning: [0mvariable z is unused
  zipper.exs:91

[33mwarning: [0mvariable l is unused
  zipper.exs:98

[33mwarning: [0mvariable z is unused
  zipper.exs:98

[33mwarning: [0mvariable r is unused
  zipper.exs:105

[33mwarning: [0mvariable z is unused
  zipper.exs:105

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[31m  * test traversing up from top (2.8ms)[0m

  1) test traversing up from top (ZipperTest)
     [1m[30mzipper_test.exs:40[0m
     [31m** (FunctionClauseError) no function clause matching in Zipper.up/1[0m
     [36mstacktrace:[0m
       zipper.exs:83: Zipper.up(%Zipper{trail: [], tree: %BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1}})
       zipper_test.exs:41: (test)

  * test left, right, and up[32m  * test left, right, and up (0.01ms)[0m
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable v is unused
  zipper.exs:92

[33mwarning: [0mvariable z is unused
  zipper.exs:92

[33mwarning: [0mvariable l is unused
  zipper.exs:99

[33mwarning: [0mvariable z is unused
  zipper.exs:99

[33mwarning: [0mvariable r is unused
  zipper.exs:106

[33mwarning: [0mvariable z is unused
  zipper.exs:106

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable v is unused
  zipper.exs:92

[33mwarning: [0mvariable z is unused
  zipper.exs:92

[33mwarning: [0mvariable l is unused
  zipper.exs:99

[33mwarning: [0mvariable z is unused
  zipper.exs:99

[33mwarning: [0mvariable r is unused
  zipper.exs:106

[33mwarning: [0mvariable z is unused
  zipper.exs:106

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (7.8ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31m** (UndefinedFunctionError) function nil.trail/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.trail()
       Zipper.to_tree/1
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable v is unused
  zipper.exs:92

[33mwarning: [0mvariable z is unused
  zipper.exs:92

[33mwarning: [0mvariable l is unused
  zipper.exs:99

[33mwarning: [0mvariable z is unused
  zipper.exs:99

[33mwarning: [0mvariable r is unused
  zipper.exs:106

[33mwarning: [0mvariable z is unused
  zipper.exs:106

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (6.6ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31m** (UndefinedFunctionError) function nil.trail/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.trail()
       Zipper.to_tree/1
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (2.9ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31m** (UndefinedFunctionError) function Map.set/3 is undefined or private. Did you mean one of:
     
           * get/2
           * get/3
     [0m
     [36mstacktrace:[0m
       (elixir) Map.set(%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, :value, 5)
       zipper.exs:93: Zipper.set_value/2
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.00ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (2.7ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.04ms)[0m
  * test left, right and value[32m  * test left, right and value (0.01ms)[0m
  * test dead end%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}
[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.01ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (14.2ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}
[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (21.1ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
%BinTree{left: %BinTree{left: nil,
  right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
 right: %BinTree{left: nil, right: nil, value: 4}, value: 1}
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}
[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (49.3ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}}
     [36mstacktrace:[0m
       zipper_test.exs:50: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.2 seconds (0.1s on load, 0.05s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}
[32m  * test dead end (0.02ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (19.3ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:100

[33mwarning: [0mvariable z is unused
  zipper.exs:100

[33mwarning: [0mvariable r is unused
  zipper.exs:107

[33mwarning: [0mvariable z is unused
  zipper.exs:107

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (17.5ms)[0m

  1) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, value: 1, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:101

[33mwarning: [0mvariable z is unused
  zipper.exs:101

[33mwarning: [0mvariable r is unused
  zipper.exs:108

[33mwarning: [0mvariable z is unused
  zipper.exs:108

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[31m  * test tree from deep focus (5.6ms)[0m
%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}

  1) test tree from deep focus (ZipperTest)
     [1m[30mzipper_test.exs:36[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> right |> to_tree == t1
     [36mlhs:  [0m%BinTree{left: [31mnil[0m, right: [31mnil[0m, value: [31m3[0m}
     [36mrhs:  [0m%BinTree{left: [32m%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}[0m, right: [32m%BinTree{left: nil, right: nil, value: 4}[0m, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:37: (test)

  * test traversing up from top[32m  * test traversing up from top (0.01ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (29.8ms)[0m

  2) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{left: [31mnil[0m, right: %BinTree{left: nil, right: nil, value: [31m3[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{left: [32m%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}[0m, right: %BinTree{left: nil, right: nil, value: [32m4[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.03s on tests)
[31m12 tests, 2 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:101

[33mwarning: [0mvariable z is unused
  zipper.exs:101

[33mwarning: [0mvariable r is unused
  zipper.exs:108

[33mwarning: [0mvariable z is unused
  zipper.exs:108

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.02ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}
[31m  * test tree from deep focus (4.9ms)[0m

  1) test tree from deep focus (ZipperTest)
     [1m[30mzipper_test.exs:36[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> right |> to_tree == t1
     [36mlhs:  [0m%BinTree{left: [31mnil[0m, right: [31mnil[0m, value: [31m3[0m}
     [36mrhs:  [0m%BinTree{left: [32m%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}[0m, right: [32m%BinTree{left: nil, right: nil, value: 4}[0m, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:37: (test)

  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[32m  * test left, right, and up (0.00ms)[0m
  * test set_value[31m  * test set_value (10.5ms)[0m

  2) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{left: [31mnil[0m, right: %BinTree{left: nil, right: nil, value: [31m3[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{left: [32m%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 5}[0m, right: %BinTree{left: nil, right: nil, value: [32m4[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 2 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:94

[33mwarning: [0mvariable z is unused
  zipper.exs:94

[33mwarning: [0mvariable r is unused
  zipper.exs:101

[33mwarning: [0mvariable z is unused
  zipper.exs:101

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[31m  * test left, right and value (3.4ms)[0m
%BinTree{left: %BinTree{left: nil,
  right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
 right: %BinTree{left: nil, right: nil, value: 4}, value: 5}

  1) test left, right and value (ZipperTest)
     [1m[30mzipper_test.exs:28[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> right |> value == 3
     [36mlhs:  [0m[31m1[0m
     [36mrhs:  [0m[32m3[0m
     [36mstacktrace:[0m
       zipper_test.exs:29: (test)

  * test dead end[31m  * test dead end (0.02ms)[0m

  2) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [:left, :left],
            tree: %BinTree{left: %BinTree{left: nil,
              right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
             right: %BinTree{left: nil, right: nil, value: 4}, value: 1}}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (7.9ms)[0m

  3) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (UndefinedFunctionError) function :right.value/0 is undefined (module :right is not available)[0m
     [36mstacktrace:[0m
       :right.value()
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (30.4ms)[0m

  4) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.04s on tests)
[31m12 tests, 4 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[31m  * test left, right and value (7.9ms)[0m
%BinTree{left: %BinTree{left: nil,
  right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
 right: %BinTree{left: nil, right: nil, value: 4}, value: 5}

  1) test left, right and value (ZipperTest)
     [1m[30mzipper_test.exs:28[0m
     [31m** (UndefinedFunctionError) function BinTree.fetch/2 is undefined (BinTree does not implement the Access behaviour)[0m
     [36mstacktrace:[0m
       BinTree.fetch(%BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1}, :left)
       (elixir) lib/access.ex:148: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       zipper.exs:53: Zipper.value/1
       zipper_test.exs:29: (test)

  * test dead end[31m  * test dead end (1.8ms)[0m

  2) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [:left, :left],
            tree: %BinTree{left: %BinTree{left: nil,
              right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
             right: %BinTree{left: nil, right: nil, value: 4}, value: 1}}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus[32m  * test tree from deep focus (0.01ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.01ms)[0m
  * test left, right, and up[31m  * test left, right, and up (0.03ms)[0m

  3) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (FunctionClauseError) no function clause matching in Access.fetch/2[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:147: Access.fetch(:right, :left)
       (elixir) lib/access.ex:179: Access.get/3
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       zipper.exs:53: Zipper.value/1
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (58.9ms)[0m

  4) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.07s on tests)
[31m12 tests, 4 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[31m  * test dead end (2.5ms)[0m
%BinTree{left: %BinTree{left: nil,
  right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
 right: %BinTree{left: nil, right: nil, value: 4}, value: 5}

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [:left, :left],
            tree: %BinTree{left: %BinTree{left: nil,
              right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
             right: %BinTree{left: nil, right: nil, value: 4}, value: 1}}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus[32m  * test tree from deep focus (0.01ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (1.1ms)[0m

  2) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (BadMapError) expected a map, got: :right[0m
     [36mstacktrace:[0m
       (stdlib) :maps.find(:left, :right)
       (elixir) lib/map.ex:145: Map.get/3
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       zipper.exs:53: Zipper.value/1
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (36.8ms)[0m

  3) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.04s on tests)
[31m12 tests, 3 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[31m  * test left, right and value (3.8ms)[0m
%BinTree{left: %BinTree{left: nil,
  right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
 right: %BinTree{left: nil, right: nil, value: 4}, value: 5}

  1) test left, right and value (ZipperTest)
     [1m[30mzipper_test.exs:28[0m
     [31m** (BadMapError) expected a map, got: :left[0m
     [36mstacktrace:[0m
       (stdlib) :maps.find(%BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1}, :left)
       (elixir) lib/map.ex:145: Map.get/3
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       zipper.exs:53: Zipper.value/1
       zipper_test.exs:29: (test)

  * test dead end[31m  * test dead end (0.9ms)[0m

  2) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [:left, :left],
            tree: %BinTree{left: %BinTree{left: nil,
              right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
             right: %BinTree{left: nil, right: nil, value: 4}, value: 1}}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (0.02ms)[0m

  3) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (BadMapError) expected a map, got: :left[0m
     [36mstacktrace:[0m
       (stdlib) :maps.find(:right, :left)
       (elixir) lib/map.ex:145: Map.get/3
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       zipper.exs:53: Zipper.value/1
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (31.5ms)[0m

  4) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.03s on tests)
[31m12 tests, 4 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.00ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end  * test dead end (skipped)
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:97

[33mwarning: [0mvariable z is unused
  zipper.exs:97

[33mwarning: [0mvariable r is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.01ms)[0m
  * test dead end[31m  * test dead end (3.8ms)[0m

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [:left, :left],
            tree: %BinTree{left: %BinTree{left: nil,
              right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
             right: %BinTree{left: nil, right: nil, value: 4}, value: 1}}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[31m  * test dead end (3.1ms)[0m

  1) test dead end (ZipperTest)
     [1m[30mzipper_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> left == nil
     [36mlhs:  [0m%Zipper{trail: [:left, :left],
            tree: %BinTree{left: %BinTree{left: nil,
              right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
             right: %BinTree{left: nil, right: nil, value: 4}, value: 1}}
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       zipper_test.exs:33: (test)

  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus  * test tree from deep focus (skipped)
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.01ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top  * test traversing up from top (skipped)
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.01ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.00ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up  * test left, right, and up (skipped)
  * test set_value  * test set_value (skipped)
  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.01ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus%BinTree{left: %BinTree{left: nil,
  right: %BinTree{left: nil, right: nil, value: 3}, value: 2},
 right: %BinTree{left: nil, right: nil, value: 4}, value: 5}
[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (2.7ms)[0m

  1) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(%BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1})
       zipper.exs:89: Zipper.up/1
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (15.9ms)[0m

  2) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mt1 |> from_tree |> left |> set_value(5) |> to_tree == t2
     [36mlhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [31m2[0m}, value: [31m5[0m}
     [36mrhs:  [0m%BinTree{right: %BinTree{left: nil, right: nil, value: 4}, left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: [32m5[0m}, value: [32m1[0m}
     [36mstacktrace:[0m
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 2 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.01ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.01ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (3.9ms)[0m

  1) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(%BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1})
       zipper.exs:89: Zipper.up/1
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (1.6ms)[0m

  2) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31m** (UndefinedFunctionError) function BinTree.get_and_update/3 is undefined (BinTree does not implement the Access behaviour)[0m
     [36mstacktrace:[0m
       BinTree.get_and_update(%BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1}, :left, #Function<6.58803781/1 in Kernel.get_and_update_in/3>)
       (elixir) lib/access.ex:202: Access.get_and_update/3
       (elixir) lib/kernel.ex:1739: Kernel.put_in/3
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 2 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable l is unused
  zipper.exs:104

[33mwarning: [0mvariable z is unused
  zipper.exs:104

[33mwarning: [0mvariable r is unused
  zipper.exs:111

[33mwarning: [0mvariable z is unused
  zipper.exs:111

Excluding tags: [:pending]


ZipperTest
  * test data is retained[32m  * test data is retained (0.01ms)[0m
  * test left, right and value[32m  * test left, right and value (0.00ms)[0m
  * test dead end[32m  * test dead end (0.00ms)[0m
  * test tree from deep focus[32m  * test tree from deep focus (0.00ms)[0m
  * test traversing up from top[32m  * test traversing up from top (0.00ms)[0m
  * test left, right, and up[31m  * test left, right, and up (2.9ms)[0m

  1) test left, right, and up (ZipperTest)
     [1m[30mzipper_test.exs:44[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tl(%BinTree{left: %BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, right: %BinTree{left: nil, right: nil, value: 4}, value: 1})
       zipper.exs:89: Zipper.up/1
       zipper_test.exs:45: (test)

  * test set_value[31m  * test set_value (0.1ms)[0m

  2) test set_value (ZipperTest)
     [1m[30mzipper_test.exs:48[0m
     [31m** (FunctionClauseError) no function clause matching in Kernel.get_and_update_in/3[0m
     [36mstacktrace:[0m
       (elixir) lib/kernel.ex:1816: Kernel.get_and_update_in(%BinTree{left: nil, right: %BinTree{left: nil, right: nil, value: 3}, value: 2}, :value, #Function<10.58803781/1 in Kernel.put_in/3>)
       (elixir) lib/map.ex:561: Map.get_and_update/3
       (elixir) lib/kernel.ex:1739: Kernel.put_in/3
       zipper_test.exs:49: (test)

  * test set_value after traversing up  * test set_value after traversing up (skipped)
  * test set_left with leaf  * test set_left with leaf (skipped)
  * test set_right with nil  * test set_right with nil (skipped)
  * test set_right with subtree  * test set_right with subtree (skipped)
  * test set_value on deep focus  * test set_value on deep focus (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 2 failures, 5 skipped[0m

Randomized with seed 0
