** (CompileError) rail_fence_cipher.exs:13: defp prepare_rails/5 already defined as def
    rail_fence_cipher.exs:13: (module)
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable next_rails_index is unused
  rail_fence_cipher.exs:23

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:32

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:32

** (CompileError) rail_fence_cipher.exs:13: a binary field without size is only allowed at the end of a binary pattern
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

** (SyntaxError) rail_fence_cipher.exs:13: syntax error before: '<'
    (elixir) lib/code.ex:321: Code.load_file/2
    rail_fence_cipher_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (CompileError) rail_fence_cipher.exs:13: cannot invoke local ::/2 inside match, called as: char :: <<:erlang.-(binary, 1)::binary(), str::binary()>>
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    rail_fence_cipher.exs:13: (module)

[33mwarning: [0mvariable next_rails_index is unused
  rail_fence_cipher.exs:23

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:32

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:32

** (CompileError) rail_fence_cipher.exs:25: undefined function new_rails_index/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:32

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:32

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test encode with ending at the first rail[31m  * test encode with ending at the first rail (3.5ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 443485
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[]
[31m  * test encode with ending at the first rail (2.3ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test decode with one rail  * test decode with one rail (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 575570
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending in the middle[]
  * test encode with ending in the middle (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with ending at the first rail[31m  * test encode with ending at the first rail (3.6ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode empty string  * test encode empty string (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test decode empty string  * test decode empty string (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 548534
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[]
[31m  * test encode with ending at the first rail (2.7ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:34

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:34

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railchar is X
char is O
char is X
char is O
char is X
char is O
char is X
char is O
char is X
char is O
char is X
char is O
char is X
char is O
char is X
char is O
char is X
char is O
[]
[31m  * test encode with ending at the first rail (2.6ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railchar is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
char is X
[]
char is O
[]
[]
[31m  * test encode with ending at the first rail (5.3ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railchar is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
char is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
char is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
[]
[31m  * test encode with ending at the first rail (5.3ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railchar is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
char is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
char is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
[]
[31m  * test encode with ending at the first rail (6.2ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
** (CompileError) rail_fence_cipher.exs:16: invalid args for &, block expressions are not allowed, got: (
  IO.puts("HERE")
  [char | &1 || [1]]
)
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (stdlib) lists.erl:1355: :lists.mapfoldl/3

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railchar is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
char is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
char is X rails_index is 0
[]
char is O rails_index is 1
[]
char is X rails_index is 2
[]
char is O rails_index is 1
[]
char is X rails_index is 0
[]
char is O rails_index is -1
[]
[]
[31m  * test encode with ending at the first rail (3.2ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m""
     [36mrhs:  [0m"XXXXXXXXXOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railchar is X rails_index is 0
HERE
[["X"], []]
char is O rails_index is 1
HERE
[["X"], ["O"]]
char is X rails_index is 2
[["X"], ["O"]]
char is O rails_index is 1
HERE
[["X"], ["O", "O"]]
char is X rails_index is 0
HERE
[["X", "X"], ["O", "O"]]
char is O rails_index is -1
HERE
[["X", "X"], ["O", "O", "O"]]
char is X rails_index is 0
HERE
[["X", "X", "X"], ["O", "O", "O"]]
char is O rails_index is 1
HERE
[["X", "X", "X"], ["O", "O", "O", "O"]]
char is X rails_index is 2
[["X", "X", "X"], ["O", "O", "O", "O"]]
char is O rails_index is 1
HERE
[["X", "X", "X"], ["O", "O", "O", "O", "O"]]
char is X rails_index is 0
HERE
[["X", "X", "X", "X"], ["O", "O", "O", "O", "O"]]
char is O rails_index is -1
HERE
[["X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O"]]
char is X rails_index is 0
HERE
[["X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O"]]
char is O rails_index is 1
HERE
[["X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O"]]
char is X rails_index is 2
[["X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O"]]
char is O rails_index is 1
HERE
[["X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O"]]
char is X rails_index is 0
HERE
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O"]]
char is O rails_index is -1
HERE
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (19.7ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (4.7ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:34

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:34

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail0
1
2
1
0
-1
0
1
2
1
0
-1
0
1
2
1
0
-1
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (4.7ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:34

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:34

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail0
1
2
1
0
-1
0
1
2
1
0
-1
0
1
2
1
0
-1
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (5.3ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail0
1
1
-1
2
-1
1
-1
0
1
-1
1
0
1
1
-1
2
-1
1
-1
0
1
-1
1
0
1
1
-1
2
-1
1
-1
0
1
-1
1
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (11.5ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railrails_index is 0
rails_index is 1
rails_index is 1
rails_index is -1
rails_index is 2
rails_index is -1
rails_index is 1
rails_index is -1
rails_index is 0
rails_index is 1
rails_index is -1
rails_index is 1
rails_index is 0
rails_index is 1
rails_index is 1
rails_index is -1
rails_index is 2
rails_index is -1
rails_index is 1
rails_index is -1
rails_index is 0
rails_index is 1
rails_index is -1
rails_index is 1
rails_index is 0
rails_index is 1
rails_index is 1
rails_index is -1
rails_index is 2
rails_index is -1
rails_index is 1
rails_index is -1
rails_index is 0
rails_index is 1
rails_index is -1
rails_index is 1
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (5.5ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railrails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 2
next_direction is -1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is -1
next_direction is 1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 2
next_direction is -1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is -1
next_direction is 1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 2
next_direction is -1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is -1
next_direction is 1
[["X", "X", "X", "X", "X", "X"], ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[31m  * test encode with ending at the first rail (6.1ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode("XOXOXOXOXOXOXOXOXO", 2) == "XXXXXXXXXOOOOOOOOO"
     [36mlhs:  [0m"XXXXXXOOOOOOOOO"
     [36mrhs:  [0m"XXXXXX[32mXXX[0mOOOOOOOOO"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:35

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:35

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first railrails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
rails_index is 0
next_direction is 1
rails_index is 1
next_direction is -1
[["X", "X", "X", "X", "X", "X", "X", "X", "X"],
 ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[32m  * test encode with ending at the first rail (3.3ms)[0m
  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[["X", "X", "X", "X", "X", "X", "X", "X", "X"],
 ["O", "O", "O", "O", "O", "O", "O", "O", "O"]]
[32m  * test encode with ending at the first rail (3.1ms)[0m
  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:32

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:32

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle  * test encode with ending in the middle (skipped)
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:32

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:32

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[31m  * test encode with ending in the middle (6.6ms)[0m

  1) test encode with ending in the middle (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:16[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.encode(msg, 3) == "WECRLTEERDSOEEFEAOCAIVDEN"
     [36mlhs:  [0m"E[31mTLR[0mCE[31mWC[0mO[31mA[0mEFE[31mE[0mO[31mS[0mD[31mR[0mEN[31mEDVIA[0m"
     [36mrhs:  [0m"[32mW[0mEC[32mRLT[0mE[32mERDS[0mOE[32mE[0mFE[32mA[0mO[32mCAIV[0mDEN"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:18: (test)

  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

** (CompileError) rail_fence_cipher.exs:9: undefined function reverse/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

** (CompileError) rail_fence_cipher.exs:10: undefined function rails/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string  * test encode empty string (skipped)
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.7ms)[0m
  * test encode empty string[32m  * test encode empty string (0.03ms)[0m
  * test encode a more diverse text  * test encode a more diverse text (skipped)
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.0ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.02ms)[0m
  * test encode empty string[32m  * test encode empty string (0.01ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.02ms)[0m
  * test encode with one rail  * test encode with one rail (skipped)
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.04ms)[0m
  * test encode empty string[32m  * test encode empty string (0.9ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.4ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.02ms)[0m
  * test encode letters of less than rails  * test encode letters of less than rails (skipped)
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.7ms)[0m
  * test encode empty string[32m  * test encode empty string (0.04ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.06ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher  * test decode full zigzag cipher (skipped)
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m12 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.1ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.1ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.02ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (2.0ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0mnil
     [36mrhs:  [0m"THEDEVILISINTHEDETAIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:33

[33mwarning: [0mvariable str is unused
  rail_fence_cipher.exs:33

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.0ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.04ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.09ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.02ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (6.9ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0mnil
     [36mrhs:  [0m"THEDEVILISINTHEDETAIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.04ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.06ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.02ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (3.0ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("TEITELHDVLSNHDTIEIIEA")
       rail_fence_cipher.exs:34: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.1ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.08ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.07ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (6.0ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function Enum.chunk/1 is undefined or private. Did you mean one of:
     
           * chunk/2
           * chunk/3
           * chunk/4
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.chunk(7.0)
       rail_fence_cipher.exs:34: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (2.1ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (1.0ms)[0m
  * test encode empty string[32m  * test encode empty string (0.08ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.09ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.4ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (5.0ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (FunctionClauseError) no function clause matching in Enum.chunk/4[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:367: Enum.chunk("TEITELHDVLSNHDTIEIIEA", 7.0, 7.0, nil)
       rail_fence_cipher.exs:34: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.09s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.05ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.08ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (4.5ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (FunctionClauseError) no function clause matching in Enum.chunk/4[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:367: Enum.chunk(["T", "E", "I", "T", "E", "L", "H", "D", "V", "L", "S", "N", "H", "D", "T", "I", "E", "I", "I", "E", "A"], 7.0, 7.0, nil)
       rail_fence_cipher.exs:35: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.0ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (1.1ms)[0m
  * test encode empty string[32m  * test encode empty string (0.03ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.06ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.06ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (9.4ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function Enum.zip/1 is undefined or private. Did you mean one of:
     
           * zip/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.zip([["T", "E", "I", "T", "E", "L", "H"], ["D", "V", "L", "S", "N", "H", "D"], ["T", "I", "E", "I", "I", "E", "A"]])
       rail_fence_cipher.exs:36: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.09 seconds (0.08s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (3.4ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.07ms)[0m
  * test encode empty string[32m  * test encode empty string (0.02ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (1.5ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (12.8ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {"T", "D", "T"}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       (elixir) lib/enum.ex:1154: Enum.join/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.09 seconds (0.08s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.2ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (1.2ms)[0m
  * test encode empty string[32m  * test encode empty string (0.05ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.07ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (8.5ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"TD[31mT[0mEVI[31mI[0mL[31mET[0mSI[31mE[0mN[31mIL[0mHE[31mH[0mDA"
     [36mrhs:  [0m"T[32mHE[0mDEVIL[32mI[0mSIN[32mT[0mHED[32mET[0mA[32mIL[0m"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.09 seconds (0.08s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.8ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.05ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (4.7ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"T[31mT[0mH[31mLH[0mE[31mE[0mD[31mSD[0mIL[31mV[0mNT[31mT[0mH[31mLHI[0mED[31mSD[0mE[31mLVN[0mTI[31mH[0mL[31mHII[0m"
     [36mrhs:  [0m"THED[32mEV[0mIL[32mISI[0mNTHEDET[32mA[0mIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (2.3ms)[0m
  * test encode empty string[32m  * test encode empty string (0.06ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.04ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (5.5ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"T[31mT[0mH[31mLHI[0mE[31mE[0mD[31mSD[0mE[31mIL[0mV[31mNT[0mI[31mTH[0mL[31mH[0mIIED[31mSD[0mE[31mELVN[0mT[31mI[0mA"
     [36mrhs:  [0m"THEDEVILI[32mS[0mI[32mNTH[0mEDETA[32mIL[0m"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.09 seconds (0.08s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.9ms)[0m
  * test encode empty string[32m  * test encode empty string (0.04ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.08ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.04ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (4.3ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"TH[31mH[0mED[31mDI[0mV[31mTT[0mLI[31mE[0mS[31mEL[0mNI"
     [36mrhs:  [0m"THED[32mE[0mV[32mI[0mLIS[32mI[0mN[32mTHEDETA[0mI[32mL[0m"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.09 seconds (0.09s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (0.8ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.7ms)[0m
  * test encode empty string[32m  * test encode empty string (0.03ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.08ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.3ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (4.1ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"TLSI[31mEH[0mNE[31mI[0mD[31mHI[0mT[31mVD[0mI[31mE[0mL[31mTE[0m"
     [36mrhs:  [0m"T[32mHEDEVI[0mL[32mI[0mSIN[32mTH[0mED[32mE[0mT[32mA[0mIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.1ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.8ms)[0m
  * test encode empty string[32m  * test encode empty string (0.03ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.06ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.02ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (4.2ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"TLSIA"
     [36mrhs:  [0m"THEDEVILISINTHEDETAIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (1.4ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (1.3ms)[0m
  * test encode empty string[32m  * test encode empty string (0.05ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.08ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.03ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (5.6ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"TD[31mT[0mEVI[31mI[0mL[31mET[0mSI[31mE[0mN[31mIL[0mHE[31mH[0mDA"
     [36mrhs:  [0m"T[32mHE[0mDEVIL[32mI[0mSIN[32mT[0mHED[32mET[0mA[32mIL[0m"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable s is unused
  rail_fence_cipher.exs:13

[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:21

[33mwarning: [0mvariable constant is unused
  rail_fence_cipher.exs:41

** (CompileError) rail_fence_cipher.exs:14: undefined function char/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:21

[33mwarning: [0mvariable constant is unused
  rail_fence_cipher.exs:41

[33mwarning: [0mthe result of the expression is ignored (suppress the warning by assigning the expression to the _ variable)
  rail_fence_cipher.exs:41

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[31m  * test encode with ending at the first rail (4.9ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle[31m  * test encode with ending in the middle (0.7ms)[0m

  2) test encode with ending in the middle (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:16[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:18: (test)

  * test encode empty string[32m  * test encode empty string (0.8ms)[0m
  * test encode a more diverse text[31m  * test encode a more diverse text (0.06ms)[0m

  3) test encode a more diverse text (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:25[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:28: (test)

  * test encode with one rail[31m  * test encode with one rail (0.05ms)[0m

  4) test encode with one rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:31[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:33: (test)

  * test encode letters of less than rails[31m  * test encode letters of less than rails (0.04ms)[0m

  5) test encode letters of less than rails (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:36[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:38: (test)

  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (1.0ms)[0m

  6) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function Enum.graphemes/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) Enum.graphemes([{"T", 0}, {"E", 1}, {"I", 2}, {"T", 3}, {"E", 4}, {"L", 5}, {"H", 6}, {"D", 7}, {"V", 8}, {"L", 9}, {"S", 10}, {"N", 11}, {"H", 12}, {"D", 13}, {"T", 14}, {"I", 15}, {"E", 16}, {"I", 17}, {"I", 18}, {"E", 19}, {"A", 20}])
       rail_fence_cipher.exs:44: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.08 seconds (0.08s on load, 0.00s on tests)
[31m12 tests, 6 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:21

[33mwarning: [0mvariable constant is unused
  rail_fence_cipher.exs:41

[33mwarning: [0mthe result of the expression is ignored (suppress the warning by assigning the expression to the _ variable)
  rail_fence_cipher.exs:41

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[31m  * test encode with ending at the first rail (8.9ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle[31m  * test encode with ending in the middle (1.4ms)[0m

  2) test encode with ending in the middle (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:16[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:18: (test)

  * test encode empty string[32m  * test encode empty string (4.8ms)[0m
  * test encode a more diverse text[31m  * test encode a more diverse text (0.1ms)[0m

  3) test encode a more diverse text (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:25[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:28: (test)

  * test encode with one rail[31m  * test encode with one rail (0.05ms)[0m

  4) test encode with one rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:31[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:33: (test)

  * test encode letters of less than rails[31m  * test encode letters of less than rails (0.05ms)[0m

  5) test encode letters of less than rails (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:36[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:38: (test)

  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (2.4ms)[0m

  6) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function Enum.graphemes/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) Enum.graphemes([{"T", 0}, {"E", 1}, {"I", 2}, {"T", 3}, {"E", 4}, {"L", 5}, {"H", 6}, {"D", 7}, {"V", 8}, {"L", 9}, {"S", 10}, {"N", 11}, {"H", 12}, {"D", 13}, {"T", 14}, {"I", 15}, {"E", 16}, {"I", 17}, {"I", 18}, {"E", 19}, {"A", 20}])
       rail_fence_cipher.exs:44: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 6 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:21

[33mwarning: [0mvariable constant is unused
  rail_fence_cipher.exs:41

[33mwarning: [0mthe result of the expression is ignored (suppress the warning by assigning the expression to the _ variable)
  rail_fence_cipher.exs:41

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[31m  * test encode with ending at the first rail (4.6ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle[31m  * test encode with ending in the middle (0.8ms)[0m

  2) test encode with ending in the middle (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:16[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:18: (test)

  * test encode empty string[32m  * test encode empty string (0.9ms)[0m
  * test encode a more diverse text[31m  * test encode a more diverse text (1.0ms)[0m

  3) test encode a more diverse text (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:25[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:28: (test)

  * test encode with one rail[31m  * test encode with one rail (0.03ms)[0m

  4) test encode with one rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:31[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:33: (test)

  * test encode letters of less than rails[31m  * test encode letters of less than rails (0.02ms)[0m

  5) test encode letters of less than rails (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:36[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:38: (test)

  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (0.02ms)[0m

  6) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function Enum.graphemes/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) Enum.graphemes([{"T", 0}, {"E", 1}, {"I", 2}, {"T", 3}, {"E", 4}, {"L", 5}, {"H", 6}, {"D", 7}, {"V", 8}, {"L", 9}, {"S", 10}, {"N", 11}, {"H", 12}, {"D", 13}, {"T", 14}, {"I", 15}, {"E", 16}, {"I", 17}, {"I", 18}, {"E", 19}, {"A", 20}])
       rail_fence_cipher.exs:44: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m12 tests, 6 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:21

[33mwarning: [0mvariable constant is unused
  rail_fence_cipher.exs:41

[33mwarning: [0mthe result of the expression is ignored (suppress the warning by assigning the expression to the _ variable)
  rail_fence_cipher.exs:41

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[31m  * test encode with ending at the first rail (3.8ms)[0m

  1) test encode with ending at the first rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:12[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:13: (test)

  * test encode with ending in the middle[31m  * test encode with ending in the middle (0.8ms)[0m

  2) test encode with ending in the middle (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:16[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:18: (test)

  * test encode empty string[32m  * test encode empty string (1.6ms)[0m
  * test encode a more diverse text[31m  * test encode a more diverse text (0.08ms)[0m

  3) test encode a more diverse text (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:25[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:28: (test)

  * test encode with one rail[31m  * test encode with one rail (0.05ms)[0m

  4) test encode with one rail (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:31[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:33: (test)

  * test encode letters of less than rails[31m  * test encode letters of less than rails (1.5ms)[0m

  5) test encode letters of less than rails (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:36[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 0)
       rail_fence_cipher.exs:14: anonymous fn/3 in RailFenceCipher.encode/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:13: RailFenceCipher.encode/2
       rail_fence_cipher_test.exs:38: (test)

  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (1.6ms)[0m

  6) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m<<84, 69, 73, 84, 69, 76, 72, 68, 86, 76, 83, 78, 72, 68, 84, 73, 69,
             73, 73, 69, 65, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
             15, 16, 17, 18, 19, 20>>
     [36mrhs:  [0m"THEDEVILISINTHEDETAIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.09s on load, 0.01s on tests)
[31m12 tests, 6 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:21

[33mwarning: [0mvariable constant is unused
  rail_fence_cipher.exs:41

[33mwarning: [0mthe result of the expression is ignored (suppress the warning by assigning the expression to the _ variable)
  rail_fence_cipher.exs:41

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (2.8ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.7ms)[0m
  * test encode empty string[32m  * test encode empty string (0.02ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.09ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.04ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (2.3ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m<<84, 69, 73, 84, 69, 76, 72, 68, 86, 76, 83, 78, 72, 68, 84, 73, 69,
             73, 73, 69, 65, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
             15, 16, 17, 18, 19, 20>>
     [36mrhs:  [0m"THEDEVILISINTHEDETAIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.09 seconds (0.09s on load, 0.00s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
** (SyntaxError) rail_fence_cipher.exs:42: unexpected token: ")". "fn" starting at line 42 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    rail_fence_cipher_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (CompileError) rail_fence_cipher.exs:53: cannot invoke local acc/1 inside match, called as: acc(:erlang./(/, []))
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (stdlib) lists.erl:1355: :lists.mapfoldl/3

[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

[33mwarning: [0mvariable rails is unused
  rail_fence_cipher.exs:39

** (CompileError) rail_fence_cipher.exs:40: undefined function rails_num/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (4.7ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (1.3ms)[0m
  * test encode empty string[32m  * test encode empty string (0.06ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.04ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (4.1ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (FunctionClauseError) no function clause matching in List.do_update_at/3[0m
     [36mstacktrace:[0m
       (elixir) lib/list.ex:685: List.do_update_at(0, 0, #Function<4.18623479/1 in RailFenceCipher.decode/2>)
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:42: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (8.7ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.2ms)[0m
  * test encode empty string[32m  * test encode empty string (0.04ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.3ms)[0m
  * test encode with one rail0
[32m  * test encode with one rail (0.1ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (13.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (16.3ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (FunctionClauseError) no function clause matching in List.do_update_at/3[0m
     [36mstacktrace:[0m
       (elixir) lib/list.ex:685: List.do_update_at(0, 0, #Function<4.52472658/1 in RailFenceCipher.decode/2>)
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:42: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.4 seconds (0.3s on load, 0.04s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (9.7ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (11.1ms)[0m
  * test encode empty string[32m  * test encode empty string (0.8ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.9ms)[0m
  * test encode with one rail0
[32m  * test encode with one rail (0.1ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (1.0ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (52.9ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (FunctionClauseError) no function clause matching in List.do_update_at/3[0m
     [36mstacktrace:[0m
       (elixir) lib/list.ex:685: List.do_update_at(0, 0, #Function<4.52472658/1 in RailFenceCipher.decode/2>)
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       rail_fence_cipher.exs:42: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.4 seconds (0.3s on load, 0.08s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (16.3ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (7.1ms)[0m
  * test encode empty string[32m  * test encode empty string (0.1ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.6ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.1ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.8ms)[0m
  * test decode full zigzag cipher[0, 0, 0]
[1, 0, 0]
[1, 1, 0]
[1, 1, 1]
[1, 2, 1]
[2, 2, 1]
[2, 3, 1]
[2, 3, 2]
[2, 4, 2]
[3, 4, 2]
[3, 5, 2]
[3, 5, 3]
[3, 6, 3]
[4, 6, 3]
[4, 7, 3]
[4, 7, 4]
[4, 8, 4]
[5, 8, 4]
[5, 9, 4]
[5, 9, 5]
[5, 10, 5]
[31m  * test decode full zigzag cipher (34.3ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function List.split/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.split('TEITELHDVLSNHDTIEIIEA', 6)
       (elixir) lib/enum.ex:1247: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
       rail_fence_cipher.exs:47: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.3 seconds (0.3s on load, 0.06s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (8.8ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.2ms)[0m
  * test encode empty string[32m  * test encode empty string (6.5ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.06ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (16.2ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function List.split/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.split('TEITELHDVLSNHDTIEIIEA', 6)
       (elixir) lib/enum.ex:1247: Enum."-map_reduce/3-lists^mapfoldl/2-0-"/3
       rail_fence_cipher.exs:46: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.3 seconds (0.3s on load, 0.03s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (7.2ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.1ms)[0m
  * test encode empty string[32m  * test encode empty string (3.5ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.8ms)[0m
  * test encode with one rail[32m  * test encode with one rail (1.0ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.5ms)[0m
  * test decode full zigzag cipher['TEITEL', 'HDVLSNHDTI', 'EIIEA']
[31m  * test decode full zigzag cipher (20.5ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(['TEITEL', 'HDVLSNHDTI', 'EIIEA'], 0)
       rail_fence_cipher.exs:58: RailFenceCipher.put_it_back_together/3
       rail_fence_cipher.exs:52: RailFenceCipher.decode/2
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.4 seconds (0.3s on load, 0.03s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (9.4ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (3.4ms)[0m
  * test encode empty string[32m  * test encode empty string (0.06ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.06ms)[0m
['TEITEL', 'HDVLSNHDTI', 'EIIEA']
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
  * test decode full zigzag cipher[31m  * test decode full zigzag cipher (40.5ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"767365846968697284787383737673866968697284"
     [36mrhs:  [0m"THEDEVILISINTHEDETAIL"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.3 seconds (0.3s on load, 0.05s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (13.2ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (6.2ms)[0m
  * test encode empty string[32m  * test encode empty string (0.3ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.4ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.09ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.4ms)[0m
  * test decode full zigzag cipher['TEITEL', 'HDVLSNHDTI', 'EIIEA']
[31m  * test decode full zigzag cipher (59.7ms)[0m

  1) test decode full zigzag cipher (RailFenceCipherTest)
     [1m[30mrail_fence_cipher_test.exs:41[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mRailFenceCipher.decode(cipher, 3) == "THEDEVILISINTHEDETAIL"
     [36mlhs:  [0m"[31mLIA[0mTEDE[31mHTN[0mI[31mSI[0mLI[31mV[0mEDE[31mH[0mT"
     [36mrhs:  [0m"T[32mH[0mEDE[32mV[0mILI[32mSINTH[0mEDET[32mAIL[0m"
     [36mstacktrace:[0m
       rail_fence_cipher_test.exs:43: (test)

  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.4 seconds (0.3s on load, 0.08s on tests)
[31m12 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (19.1ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (10.3ms)[0m
  * test encode empty string[32m  * test encode empty string (0.1ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.06ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.2ms)[0m
['TEITEL', 'HDVLSNHDTI', 'EIIEA']
  * test decode full zigzag cipher[32m  * test decode full zigzag cipher (34.8ms)[0m
  * test decode with ending in the middle  * test decode with ending in the middle (skipped)
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.4 seconds (0.3s on load, 0.07s on tests)
[32m12 tests, 0 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (9.8ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (2.6ms)[0m
  * test encode empty string[32m  * test encode empty string (0.06ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.1ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.09ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.9ms)[0m
  * test decode full zigzag cipher[32m  * test decode full zigzag cipher (7.4ms)[0m
  * test decode with ending in the middle[32m  * test decode with ending in the middle (0.1ms)[0m
  * test decode empty string  * test decode empty string (skipped)
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.3 seconds (0.3s on load, 0.02s on tests)
[32m12 tests, 0 failures, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (11.2ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (5.6ms)[0m
  * test encode empty string[32m  * test encode empty string (0.09ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (1.4ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.2ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.1ms)[0m
  * test decode full zigzag cipher[32m  * test decode full zigzag cipher (16.2ms)[0m
  * test decode with ending in the middle[32m  * test decode with ending in the middle (0.1ms)[0m
  * test decode empty string[32m  * test decode empty string (0.1ms)[0m
  * test decode with one rail  * test decode with one rail (skipped)
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.4 seconds (0.3s on load, 0.04s on tests)
[32m12 tests, 0 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (9.7ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (5.0ms)[0m
  * test encode empty string[32m  * test encode empty string (0.3ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (2.2ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.3ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (4.6ms)[0m
  * test decode full zigzag cipher[32m  * test decode full zigzag cipher (16.0ms)[0m
  * test decode with ending in the middle[32m  * test decode with ending in the middle (0.2ms)[0m
  * test decode empty string[32m  * test decode empty string (0.07ms)[0m
  * test decode with one rail[32m  * test decode with one rail (0.06ms)[0m
  * test decode letters of less than rails  * test decode letters of less than rails (skipped)
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.5 seconds (0.4s on load, 0.04s on tests)
[32m12 tests, 0 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (22.2ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (38.4ms)[0m
  * test encode empty string[32m  * test encode empty string (1.1ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (1.2ms)[0m
  * test encode with one rail[32m  * test encode with one rail (1.3ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (5.0ms)[0m
  * test decode full zigzag cipher[32m  * test decode full zigzag cipher (29.3ms)[0m
  * test decode with ending in the middle[32m  * test decode with ending in the middle (0.07ms)[0m
  * test decode empty string[32m  * test decode empty string (0.02ms)[0m
  * test decode with one rail[32m  * test decode with one rail (0.03ms)[0m
  * test decode letters of less than rails[32m  * test decode letters of less than rails (0.1ms)[0m
  * test decode a more diverse text  * test decode a more diverse text (skipped)


Finished in 0.5 seconds (0.4s on load, 0.1s on tests)
[32m12 tests, 0 failures, 1 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable char is unused
  rail_fence_cipher.exs:20

Excluding tags: [:pending]


RailFenceCipherTest
  * test encode with ending at the first rail[32m  * test encode with ending at the first rail (14.9ms)[0m
  * test encode with ending in the middle[32m  * test encode with ending in the middle (0.5ms)[0m
  * test encode empty string[32m  * test encode empty string (0.1ms)[0m
  * test encode a more diverse text[32m  * test encode a more diverse text (0.3ms)[0m
  * test encode with one rail[32m  * test encode with one rail (0.1ms)[0m
  * test encode letters of less than rails[32m  * test encode letters of less than rails (0.3ms)[0m
  * test decode full zigzag cipher[32m  * test decode full zigzag cipher (70.5ms)[0m
  * test decode with ending in the middle[32m  * test decode with ending in the middle (10.1ms)[0m
  * test decode empty string[32m  * test decode empty string (0.05ms)[0m
  * test decode with one rail[32m  * test decode with one rail (0.04ms)[0m
  * test decode letters of less than rails[32m  * test decode letters of less than rails (0.08ms)[0m
  * test decode a more diverse text[32m  * test decode a more diverse text (0.2ms)[0m


Finished in 0.6 seconds (0.4s on load, 0.1s on tests)
[32m12 tests, 0 failures[0m

Randomized with seed 0
