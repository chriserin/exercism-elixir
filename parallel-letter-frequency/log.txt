[33mwarning: [0mvariable workers is unused
  frequency.exs:10

** (CompileError) frequency.exs:19: undefined function char/0
    (stdlib) lists.erl:1337: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable workers is unused
  frequency.exs:10

** (CompileError) frequency.exs:28: undefined function char/0
    (stdlib) lists.erl:1337: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[31m  * test no texts mean no letters (4.3ms)[0m

  1) test no texts mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:58[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       frequency.exs:19: Frequency.reduce_list/1
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:59: (test)

  * test one letter  * test one letter (skipped)
  * test case insensitivity  * test case insensitivity (skipped)
  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.09 seconds (0.09s on load, 0.00s on tests)
[31m9 tests, 1 failure, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (0.8ms)[0m
  * test one letter  * test one letter (skipped)
  * test case insensitivity  * test case insensitivity (skipped)
  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[32m9 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (0.9ms)[0m
  * test one letter[31m  * test one letter (4.1ms)[0m

  1) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["a"]) == %{"a" => 1}
     [36mlhs:  [0m%{}
     [36mrhs:  [0m%{[32m"a" => 1[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity  * test case insensitivity (skipped)
  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.08 seconds (0.08s on load, 0.00s on tests)
[31m9 tests, 1 failure, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (0.9ms)[0m
  * test one letter[31m  * test one letter (2.9ms)[0m

  1) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["a"]) == %{"a" => 1}
     [36mlhs:  [0m%{[31m"97" => 1[0m}
     [36mrhs:  [0m%{[32m, [0m[32m"a" => 1[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity  * test case insensitivity (skipped)
  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m9 tests, 1 failure, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (0.8ms)[0m
  * test one letter[32m  * test one letter (2.0ms)[0m
  * test case insensitivity  * test case insensitivity (skipped)
  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[32m9 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (0.8ms)[0m
  * test one letter[32m  * test one letter (0.6ms)[0m
  * test case insensitivity[31m  * test case insensitivity (1.9ms)[0m

  1) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["aA"]) == %{"a" => 2}
     [36mlhs:  [0m%{"a" => [31m1[0m[31m, [0m[31m"65" => 1[0m[31m, [0m[31m"A" => 1[0m}
     [36mrhs:  [0m%{"a" => [32m2[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m9 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.9ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[31m  * test case insensitivity (2.2ms)[0m

  1) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["aA"]) == %{"a" => 2}
     [36mlhs:  [0m%{"a" => [31m1[0m}
     [36mrhs:  [0m%{"a" => [32m2[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.09 seconds (0.08s on load, 0.01s on tests)
[31m9 tests, 1 failure, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.1ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.01ms)[0m
  * test many empty texts still mean no letters  * test many empty texts still mean no letters (skipped)
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.08 seconds (0.07s on load, 0.01s on tests)
[32m9 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.1ms)[0m
  * test one letter[32m  * test one letter (0.8ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.03ms)[0m
  * test many empty texts still mean no letters[31m  * test many empty texts still mean no letters (13.1ms)[0m

  1) test many empty texts still mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:69[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(List.duplicate("  ", 10000)) == %{}
     [36mlhs:  [0m%{[31m" " => 20000[0m}
     [36mrhs:  [0m%{}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:70: (test)

  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.09 seconds (0.07s on load, 0.02s on tests)
[31m9 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.1ms)[0m
  * test one letter[32m  * test one letter (0.6ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.03ms)[0m
  * test many empty texts still mean no letters[31m  * test many empty texts still mean no letters (11.2ms)[0m

  1) test many empty texts still mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:69[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(List.duplicate("  ", 10000)) == %{}
     [36mlhs:  [0m%{[31m" " => 20000[0m}
     [36mrhs:  [0m%{}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:70: (test)

  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.09 seconds (0.07s on load, 0.02s on tests)
[31m9 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
** (SyntaxError) frequency.exs:14: unexpected token: "~" (column 23, codepoint U+007E)
    (elixir) lib/code.ex:321: Code.load_file/2
    parallel_letter_frequency_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (10.0ms)[0m
  * test one letter[32m  * test one letter (0.8ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.05ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (36.9ms)[0m
  * test many times the same text gives a predictable result  * test many times the same text gives a predictable result (skipped)
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.1 seconds (0.09s on load, 0.04s on tests)
[32m9 tests, 0 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.5ms)[0m
  * test one letter[32m  * test one letter (0.6ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.02ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (31.8ms)[0m
  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (7.2ms)[0m

  1) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(List.duplicate("abc", 1000)) == %{"a" => 1000, "b" => 1000, "c" => 1000}
     [36mlhs:  [0m%{"a" => 1000, "b" => 1000, "c" => 1000[31m, [0m[31m"97" => 1000[0m[31m, [0m[31m"98" => 1000[0m}
     [36mrhs:  [0m%{"a" => 1000, "b" => 1000, "c" => 1000}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:74: (test)

  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.1 seconds (0.07s on load, 0.04s on tests)
[31m9 tests, 1 failure, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (7.9ms)[0m
  * test one letter[32m  * test one letter (0.03ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.6ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (29.6ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.0ms)[0m
  * test punctuation doesn't count  * test punctuation doesn't count (skipped)
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.1 seconds (0.07s on load, 0.04s on tests)
[32m9 tests, 0 failures, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (7.7ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.04ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (29.1ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (1.8ms)[0m
  * test punctuation doesn't count[31m  * test punctuation doesn't count (2.5ms)[0m

  1) test punctuation doesn't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:78[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq([@ode_an_die_freude])[","] == nil
     [36mlhs:  [0m4
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:79: (test)

  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.1 seconds (0.08s on load, 0.04s on tests)
[31m9 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.1ms)[0m
  * test one letter[32m  * test one letter (1.9ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.06ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (397.1ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.0ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.2ms)[0m
  * test numbers don't count  * test numbers don't count (skipped)
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.4 seconds (0.08s on load, 0.4s on tests)
[32m9 tests, 0 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.2ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.04ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (389.3ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (1.9ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.3ms)[0m
  * test numbers don't count[31m  * test numbers don't count (2.3ms)[0m

  1) test numbers don't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:82[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["Testing, 1, 2, 3"])["1"] == nil
     [36mlhs:  [0m1
     [36mrhs:  [0mnil
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:83: (test)

  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.4 seconds (0.08s on load, 0.4s on tests)
[31m9 tests, 1 failure, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.2ms)[0m
  * test one letter[32m  * test one letter (0.8ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.04ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (390.7ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.1ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.3ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.09ms)[0m
  * test all three anthems, together, 1 worker  * test all three anthems, together, 1 worker (skipped)
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.4 seconds (0.08s on load, 0.4s on tests)
[32m9 tests, 0 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (7.8ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.05ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (390.6ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (1.9ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.2ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.05ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (1.0ms)[0m
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.4 seconds (0.07s on load, 0.4s on tests)
[32m9 tests, 0 failures, 1 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.0ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.06ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (392.9ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.0ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.3ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.07ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (1.0ms)[0m
  * test all three anthems, together, 4 workers  * test all three anthems, together, 4 workers (skipped)


Finished in 0.4 seconds (0.07s on load, 0.4s on tests)
[32m9 tests, 0 failures, 1 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

[33mwarning: [0mvariable c is unused
  frequency.exs:30

[33mwarning: [0mvariable count is unused
  frequency.exs:30

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.6ms)[0m
  * test one letter[32m  * test one letter (0.9ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.05ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (392.4ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.2ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.3ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.06ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (1.1ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (1.0ms)[0m


Finished in 0.4 seconds (0.08s on load, 0.4s on tests)
[32m9 tests, 0 failures[0m

Randomized with seed 0
** (SyntaxError) frequency.exs:18: unexpected token: "end". "(" starting at line 18 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    parallel_letter_frequency_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.6ms)[0m
  * test one letter[32m  * test one letter (0.7ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.06ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (395.7ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (1.2ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.2ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.07ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (0.7ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (0.7ms)[0m


Finished in 0.4 seconds (0.08s on load, 0.4s on tests)
[32m9 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable workers is unused
  frequency.exs:10

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (0.00ms)[0m
  * test one letter[32m  * test one letter (9.2ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.04ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (68.1ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (7.7ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.2ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.08ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (0.8ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (0.8ms)[0m


Finished in 0.1 seconds (0.08s on load, 0.08s on tests)
[32m9 tests, 0 failures[0m

Randomized with seed 0
** (SyntaxError) frequency.exs:24: unexpected token: ")". "fn" starting at line 24 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    parallel_letter_frequency_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (CompileError) frequency.exs:14: nested captures via & are not allowed: &count_letters_in_text/1
    (stdlib) lists.erl:1353: :lists.mapfoldl/3
    (elixir) src/elixir_fn.erl:150: :elixir_fn.do_escape/4
    (elixir) src/elixir_fn.erl:114: :elixir_fn.do_capture/4
    (elixir) expanding macro: Kernel.|>/2
    frequency.exs:16: Frequency.frequency/2

** (CompileError) frequency.exs:14: nested captures via & are not allowed: &(count_letters_in_text(&1))
    (stdlib) lists.erl:1353: :lists.mapfoldl/3
    (elixir) src/elixir_fn.erl:150: :elixir_fn.do_escape/4
    (elixir) src/elixir_fn.erl:114: :elixir_fn.do_capture/4
    (elixir) expanding macro: Kernel.|>/2
    frequency.exs:16: Frequency.frequency/2

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (14.1ms)[0m
  * test one letter[31m  * test one letter (3.9ms)[0m

  1) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity[31m  * test case insensitivity (0.06ms)[0m

  2) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters[31m  * test many empty texts still mean no letters (18.3ms)[0m

  3) test many empty texts still mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:69[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:70: (test)

  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (2.4ms)[0m

  4) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:74: (test)

  * test punctuation doesn't count[31m  * test punctuation doesn't count (0.1ms)[0m

  5) test punctuation doesn't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:78[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:79: (test)

  * test numbers don't count[31m  * test numbers don't count (0.06ms)[0m

  6) test numbers don't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:82[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:83: (test)

  * test all three anthems, together, 1 worker[31m  * test all three anthems, together, 1 worker (0.2ms)[0m

  7) test all three anthems, together, 1 worker (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:86[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:87: (test)

  * test all three anthems, together, 4 workers[31m  * test all three anthems, together, 4 workers (0.1ms)[0m

  8) test all three anthems, together, 4 workers (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:93[0m
     [31m** (UndefinedFunctionError) function List.at/1 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at(0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:94: (test)



Finished in 0.1 seconds (0.09s on load, 0.04s on tests)
[31m9 tests, 8 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.7ms)[0m
  * test one letter[31m  * test one letter (3.3ms)[0m

  1) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity[31m  * test case insensitivity (0.05ms)[0m

  2) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters[31m  * test many empty texts still mean no letters (8.5ms)[0m

  3) test many empty texts still mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:69[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:70: (test)

  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (0.7ms)[0m

  4) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:74: (test)

  * test punctuation doesn't count[31m  * test punctuation doesn't count (0.1ms)[0m

  5) test punctuation doesn't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:78[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:79: (test)

  * test numbers don't count[31m  * test numbers don't count (0.03ms)[0m

  6) test numbers don't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:82[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:83: (test)

  * test all three anthems, together, 1 worker[31m  * test all three anthems, together, 1 worker (0.1ms)[0m

  7) test all three anthems, together, 1 worker (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:86[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[]], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:87: (test)

  * test all three anthems, together, 4 workers[31m  * test all three anthems, together, 4 workers (0.1ms)[0m

  8) test all three anthems, together, 4 workers (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:93[0m
     [31m** (UndefinedFunctionError) function List.at/2 is undefined or private[0m
     [36mstacktrace:[0m
       (elixir) List.at([[], [], [], []], 0)
       frequency.exs:31: anonymous fn/3 in Frequency.list_round_robbin/2
       (elixir) lib/enum.ex:1622: Enum."-reduce/3-lists^foldl/2-0-"/3
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:94: (test)



Finished in 0.09 seconds (0.07s on load, 0.02s on tests)
[31m9 tests, 8 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (8.6ms)[0m
  * test one letter[32m  * test one letter (0.8ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.1ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (73.2ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (1.9ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.5ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.2ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (0.9ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (1.0ms)[0m


Finished in 0.1 seconds (0.07s on load, 0.08s on tests)
[32m9 tests, 0 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.5ms)[0m
  * test one letter[32m  * test one letter (1.0ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.1ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (82.2ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.0ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.5ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.1ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (1.0ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (0.8ms)[0m


Finished in 0.1 seconds (0.08s on load, 0.09s on tests)
[32m9 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable lists is unused
  frequency.exs:26

** (CompileError) frequency.exs:30: undefined function positions/0
    (stdlib) lists.erl:1337: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[31m  * test no texts mean no letters (2.5ms)[0m

  1) test no texts mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:57[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:58: (test)

  * test one letter[31m  * test one letter (0.01ms)[0m

  2) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("a")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity[31m  * test case insensitivity (0.00ms)[0m

  3) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("aA")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters[31m  * test many empty texts still mean no letters (1.8ms)[0m

  4) test many empty texts still mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:69[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:70: (test)

  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (0.1ms)[0m

  5) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:74: (test)

  * test punctuation doesn't count[31m  * test punctuation doesn't count (0.01ms)[0m

  6) test punctuation doesn't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:78[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel weilt.\n")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:79: (test)

  * test numbers don't count[31m  * test numbers don't count (0.00ms)[0m

  7) test numbers don't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:82[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("Testing, 1, 2, 3")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:83: (test)

  * test all three anthems, together, 1 worker[31m  * test all three anthems, together, 1 worker (0.00ms)[0m

  8) test all three anthems, together, 1 worker (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:86[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel weilt.\nWilhelmus van Nassouwe\nben ik, van Duitsen bloed,\nden vaderland getrouwe\nblijf ik tot in den dood.\nEen Prinse van Oranje\nben ik, vrij, onverveerd,\nden Koning van Hispanje\nheb ik altijd geëerd.\nO say can you see by the dawn's early light,\nWhat so proudly we hailed at the twilight's last gleaming,\nWhose broad stripes and bright stars through the perilous fight,\nO'er the ramparts we watched, were so gallantly streaming?\nAnd the rockets' red glare, the bombs bursting in air,\nGave proof through the night that our flag was still there;\nO say does that star-spangled banner yet wave,\nO'er the land of the free and the home of the brave?\n")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:87: (test)

  * test all three anthems, together, 4 workers[31m  * test all three anthems, together, 4 workers (0.00ms)[0m

  9) test all three anthems, together, 4 workers (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:93[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.length("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel weilt.\nWilhelmus van Nassouwe\nben ik, van Duitsen bloed,\nden vaderland getrouwe\nblijf ik tot in den dood.\nEen Prinse van Oranje\nben ik, vrij, onverveerd,\nden Koning van Hispanje\nheb ik altijd geëerd.\nO say can you see by the dawn's early light,\nWhat so proudly we hailed at the twilight's last gleaming,\nWhose broad stripes and bright stars through the perilous fight,\nO'er the ramparts we watched, were so gallantly streaming?\nAnd the rockets' red glare, the bombs bursting in air,\nGave proof through the night that our flag was still there;\nO say does that star-spangled banner yet wave,\nO'er the land of the free and the home of the brave?\n")
       frequency.exs:24: Frequency.list_round_robbin/2
       frequency.exs:13: Frequency.frequency/2
       parallel_letter_frequency_test.exs:54: FrequencyTest.freq/2
       parallel_letter_frequency_test.exs:94: (test)



Finished in 0.07 seconds (0.07s on load, 0.00s on tests)
[31m9 tests, 9 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[31m  * test no texts mean no letters (0.00ms)[0m
[31m
20:27:37.901 [error] Task #PID<0.68.0> started from #PID<0.67.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m
  1) test no texts mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:57[0m
     [31m** (EXIT from #PID<0.67.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test one letter[31m  * test one letter (0.00ms)[0m
[31m
20:27:37.905 [error] Task #PID<0.69.0> started from #PID<0.67.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m
  2) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31m** (EXIT from #PID<0.72.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("a")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test case insensitivity[31m
20:27:37.906 [error] Task #PID<0.70.0> started from #PID<0.67.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m  * test case insensitivity (0.00ms)[0m
[31m
20:27:37.908 [error] Task #PID<0.71.0> started from #PID<0.67.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m
  3) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31m** (EXIT from #PID<0.77.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("a")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test many empty texts still mean no letters[31m  * test many empty texts still mean no letters (0.00ms)[0m
[31m
20:27:37.909 [error] Task #PID<0.73.0> started from #PID<0.72.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.909 [error] Task #PID<0.75.0> started from #PID<0.72.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.910 [error] Task #PID<0.74.0> started from #PID<0.72.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.913 [error] Task #PID<0.76.0> started from #PID<0.72.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m
  4) test many empty texts still mean no letters (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:69[0m
     [31m** (EXIT from #PID<0.82.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (0.00ms)[0m
[31m
20:27:37.914 [error] Task #PID<0.79.0> started from #PID<0.77.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.915 [error] Task #PID<0.78.0> started from #PID<0.77.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m
  5) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31m** (EXIT from #PID<0.87.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test punctuation doesn't count[31m  * test punctuation doesn't count (0.00ms)[0m
[31m
20:27:37.916 [error] Task #PID<0.80.0> started from #PID<0.77.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m
  6) test punctuation doesn't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:78[0m
     [31m** (EXIT from #PID<0.92.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("Freude schöner Götterfunken\nTochter aus Elysium,\nWir be")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

[31m
20:27:37.917 [error] Task #PID<0.81.0> started from #PID<0.77.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("a")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m  * test numbers don't count[31m  * test numbers don't count (0.00ms)[0m

  7) test numbers don't count (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:82[0m
     [31m** (EXIT from #PID<0.97.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("Testi")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test all three anthems, together, 1 worker[31m  * test all three anthems, together, 1 worker (0.00ms)[0m

  8) test all three anthems, together, 1 worker (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:86[0m
     [31m** (EXIT from #PID<0.102.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel we")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m

  * test all three anthems, together, 4 workers[31m  * test all three anthems, together, 4 workers (0.00ms)[0m

  9) test all three anthems, together, 4 workers (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:93[0m
     [31m** (EXIT from #PID<0.104.0>) an exception was raised:
         ** (FunctionClauseError) no function clause matching in List.to_string/1
             (elixir) lib/list.ex:619: List.to_string("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel we")
             frequency.exs:36: Frequency.count_letters_in_text/1
             (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
             (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
             (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3[0m



Finished in 0.09 seconds (0.06s on load, 0.03s on tests)
[31m9 tests, 9 failures[0m

Randomized with seed 0
[31m
20:27:37.920 [error] Task #PID<0.83.0> started from #PID<0.82.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.922 [error] Task #PID<0.84.0> started from #PID<0.82.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.924 [error] Task #PID<0.85.0> started from #PID<0.82.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.927 [error] Task #PID<0.86.0> started from #PID<0.82.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.927 [error] Task #PID<0.88.0> started from #PID<0.87.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.928 [error] Task #PID<0.89.0> started from #PID<0.87.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.929 [error] Task #PID<0.90.0> started from #PID<0.87.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabca")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.929 [error] Task #PID<0.91.0> started from #PID<0.87.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.930 [error] Task #PID<0.93.0> started from #PID<0.92.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("Freude schöner Götterfunken\nTochter aus Elysium,\nWir be")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.930 [error] Task #PID<0.94.0> started from #PID<0.92.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("etreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.930 [error] Task #PID<0.95.0> started from #PID<0.92.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("e Zauber binden wieder\nWas die Mode streng geteilt;\nAll")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.931 [error] Task #PID<0.96.0> started from #PID<0.92.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("le Menschen werden Brüder,\nWo dein sanfter Flügel weilt")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.931 [error] Task #PID<0.98.0> started from #PID<0.97.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("Testi")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.931 [error] Task #PID<0.99.0> started from #PID<0.97.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("ing, ")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.932 [error] Task #PID<0.100.0> started from #PID<0.97.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string(" 1, 2")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.932 [error] Task #PID<0.101.0> started from #PID<0.97.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("2, 3")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.932 [error] Task #PID<0.103.0> started from #PID<0.102.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel we")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.933 [error] Task #PID<0.105.0> started from #PID<0.104.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("Freude schöner Götterfunken\nTochter aus Elysium,\nWir betreten feuertrunken,\nHimmlische, dein Heiligtum!\nDeine Zauber binden wieder\nWas die Mode streng geteilt;\nAlle Menschen werden Brüder,\nWo dein sanfter Flügel we")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.933 [error] Task #PID<0.106.0> started from #PID<0.104.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("eilt.\nWilhelmus van Nassouwe\nben ik, van Duitsen bloed,\nden vaderland getrouwe\nblijf ik tot in den dood.\nEen Prinse van Oranje\nben ik, vrij, onverveerd,\nden Koning van Hispanje\nheb ik altijd geëerd.\nO say can you s")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.933 [error] Task #PID<0.107.0> started from #PID<0.104.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("see by the dawn's early light,\nWhat so proudly we hailed at the twilight's last gleaming,\nWhose broad stripes and bright stars through the perilous fight,\nO'er the ramparts we watched, were so gallantly streaming?\n")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0m[31m
20:27:37.934 [error] Task #PID<0.108.0> started from #PID<0.104.0> terminating
** (FunctionClauseError) no function clause matching in List.to_string/1
    (elixir) lib/list.ex:619: List.to_string("\nAnd the rockets' red glare, the bombs bursting in air,\nGave proof through the night that our flag was still there;\nO say does that star-spangled banner yet wave,\nO'er the land of the free and the home of the brave")
    frequency.exs:36: Frequency.count_letters_in_text/1
    (elixir) lib/task/supervised.ex:94: Task.Supervised.do_apply/2
    (elixir) lib/task/supervised.ex:45: Task.Supervised.reply/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Function: #Function<7.22386667/0 in Frequency.frequency/2>
    Args: []
[0mExcluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (13.1ms)[0m
  * test one letter[31m  * test one letter (3.8ms)[0m

  1) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["a"]) == %{"a" => 1}
     [36mlhs:  [0m%{"a" => [31m4[0m}
     [36mrhs:  [0m%{"a" => [32m1[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity[31m  * test case insensitivity (0.1ms)[0m

  2) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["aA"]) == %{"a" => 2}
     [36mlhs:  [0m%{"a" => [31m4[0m}
     [36mrhs:  [0m%{"a" => [32m2[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (72.3ms)[0m
  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (2.2ms)[0m

  3) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(List.duplicate("abc", 1000)) == %{"a" => 1000, "b" => 1000, "c" => 1000}
     [36mlhs:  [0m%{"b" => 1000, "c" => 1000, "a" => 100[31m3[0m}
     [36mrhs:  [0m%{"b" => 1000, "c" => 1000, "a" => 100[32m0[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:74: (test)

  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.7ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.1ms)[0m
  * test all three anthems, together, 1 worker[31m  * test all three anthems, together, 1 worker (0.3ms)[0m

  4) test all three anthems, together, 1 worker (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:86[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreqs["a"] == 49
     [36mlhs:  [0m[31m5[0m
     [36mrhs:  [0m[32m49[0m
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:88: (test)

  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (1.1ms)[0m


Finished in 0.1 seconds (0.06s on load, 0.09s on tests)
[31m9 tests, 4 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (13.4ms)[0m
  * test one letter[31m  * test one letter (4.5ms)[0m

  1) test one letter (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:61[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["a"]) == %{"a" => 1}
     [36mlhs:  [0m%{"a" => [31m4[0m}
     [36mrhs:  [0m%{"a" => [32m1[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:62: (test)

  * test case insensitivity[31m  * test case insensitivity (0.1ms)[0m

  2) test case insensitivity (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:65[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(["aA"]) == %{"a" => 2}
     [36mlhs:  [0m%{"a" => [31m4[0m}
     [36mrhs:  [0m%{"a" => [32m2[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:66: (test)

  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (82.6ms)[0m
  * test many times the same text gives a predictable result[31m  * test many times the same text gives a predictable result (2.9ms)[0m

  3) test many times the same text gives a predictable result (FrequencyTest)
     [1m[30mparallel_letter_frequency_test.exs:73[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mfreq(List.duplicate("abc", 1000)) == %{"a" => 1000, "b" => 1000, "c" => 1000}
     [36mlhs:  [0m%{"b" => 1000, "c" => 1000, "a" => 100[31m3[0m}
     [36mrhs:  [0m%{"b" => 1000, "c" => 1000, "a" => 100[32m0[0m}
     [36mstacktrace:[0m
       parallel_letter_frequency_test.exs:74: (test)

  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.8ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.3ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (1.2ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (1.2ms)[0m


Finished in 0.1 seconds (0.06s on load, 0.1s on tests)
[31m9 tests, 3 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FrequencyTest
  * test no texts mean no letters[32m  * test no texts mean no letters (9.2ms)[0m
  * test one letter[32m  * test one letter (1.0ms)[0m
  * test case insensitivity[32m  * test case insensitivity (0.1ms)[0m
  * test many empty texts still mean no letters[32m  * test many empty texts still mean no letters (71.2ms)[0m
  * test many times the same text gives a predictable result[32m  * test many times the same text gives a predictable result (2.1ms)[0m
  * test punctuation doesn't count[32m  * test punctuation doesn't count (0.6ms)[0m
  * test numbers don't count[32m  * test numbers don't count (0.1ms)[0m
  * test all three anthems, together, 1 worker[32m  * test all three anthems, together, 1 worker (1.0ms)[0m
  * test all three anthems, together, 4 workers[32m  * test all three anthems, together, 4 workers (0.8ms)[0m


Finished in 0.1 seconds (0.07s on load, 0.08s on tests)
[32m9 tests, 0 failures[0m

Randomized with seed 0
