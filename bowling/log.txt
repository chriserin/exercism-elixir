[33mwarning: [0mvariable game is unused
  bowling.exs:20

[33mwarning: [0mvariable game is unused
  bowling.exs:36

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (3.9ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0mnil
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:20

[33mwarning: [0mvariable game is unused
  bowling.exs:36

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0mnil
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:16

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (3.0ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enum.map/1 is undefined or private. Did you mean one of:
     
           * map/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.map(#Function<0.42797863/1 in Bowling.score/1>)
       bowling.exs:17: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:16

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enum.map/1 is undefined or private. Did you mean one of:
     
           * map/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.map(#Function<0.42797863/1 in Bowling.score/1>)
       bowling.exs:17: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.4ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:18: anonymous fn({}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (3.1ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:18: anonymous fn({}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (3.0ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:18: anonymous fn({}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.0ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:18: anonymous fn({}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.5ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:18: anonymous fn({}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (5.4ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:18: anonymous fn({}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.6ms)[0m
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (10.9ms)[0m
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[32m24 tests, 0 failures, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.5ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures, 22 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 22 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.8ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 21 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.9ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.4ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (6.8ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (1.2ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:41: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) bowling.exs:41: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) bowling.exs:42: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) bowling.exs:42: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable game is unused
  bowling.exs:6

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (6.8ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (1.2ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.09ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: -1[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:26: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (8.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (1.4ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (ArgumentError) the Access calls for keywords expect the key to be an atom, got: 0[0m
     [36mstacktrace:[0m
       (elixir) lib/access.ex:166: Access.fetch/2
       (elixir) lib/access.ex:179: Access.get/3
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (4.7ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.04ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (5.7ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.03ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:27: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (6.0ms)[0m
[{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}]

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (4.3ms)[0m
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {6, 4}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0},
 {6, 4}]

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (2.1ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (6.3ms)[0m
[{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}]

[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {6, 4}]
  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (1.3ms)[0m
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0},
 {6, 4}]

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (4.5ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:28: Bowling.previous_result/2
       bowling.exs:20: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:20: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (13.3ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enun.reverse/1 is undefined (module Enun is not available)[0m
     [36mstacktrace:[0m
       Enun.reverse([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}])
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (4.8ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (UndefinedFunctionError) function Enun.reverse/1 is undefined (module Enun is not available)[0m
     [36mstacktrace:[0m
       Enun.reverse([{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}])
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (2.8ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (UndefinedFunctionError) function Enun.reverse/1 is undefined (module Enun is not available)[0m
     [36mstacktrace:[0m
       Enun.reverse([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}])
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.3ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (UndefinedFunctionError) function Enun.reverse/1 is undefined (module Enun is not available)[0m
     [36mstacktrace:[0m
       Enun.reverse([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}])
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.1s on load, 0.02s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:26

** (CompileError) bowling.exs:18: undefined function reverse/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (4.3ms)[0m
[{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}]

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (3.1ms)[0m
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {6, 4}]

[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0},
 {6, 4}]
  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (2.9ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.6ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (11.1ms)[0m
[{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {6, 4}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0},
 {6, 4}]

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (1.8ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (1.3ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.4ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:21: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:21: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (5.4ms)[0m
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:30: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}]
[31m  * test can score a game with no strikes or spares (5.3ms)[0m
[{6, 4}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:30: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {6, 4}]
[31m  * test spare followed by all 0s is worth 10 points (0.8ms)[0m
[{6, 4}, {3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0},
 {6, 4}]

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:30: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.9ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:30: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[31m  * test can score all 0s (6.7ms)[0m
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{6, 4}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{6, 4}, {3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (2.9ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (3.9ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: {}[0m
     [36mstacktrace:[0m
       bowling.exs:29: Bowling.previous_result/2
       bowling.exs:22: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:16

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (5.4ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enum.reject/1 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject(#Function<0.106039870/1 in Bowling.score/1>)
       bowling.exs:17: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.03ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (UndefinedFunctionError) function Enum.reject/1 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject(#Function<0.106039870/1 in Bowling.score/1>)
       bowling.exs:17: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (1.4ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (UndefinedFunctionError) function Enum.reject/1 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject(#Function<0.106039870/1 in Bowling.score/1>)
       bowling.exs:17: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (UndefinedFunctionError) function Enum.reject/1 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject(#Function<0.106039870/1 in Bowling.score/1>)
       bowling.exs:17: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[32m  * test can score all 0s (2.4ms)[0m
  * test can score a game with no strikes or spares[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[32m  * test can score a game with no strikes or spares (1.2ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4}, {3, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[31m  * test points scored in the roll after the spare are counted twice (4.8ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.9ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.5ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.6ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.5ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.6ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.6ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.8ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.5ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test can score all 0s (2.2ms)[0m
  * test can score a game with no strikes or spares[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (1.2ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4, :nothing}, {3, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the roll after the spare are counted twice (2.5ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (3.9ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.02ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}], [{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.8ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (4.0ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.7ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}], [{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (4.0ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.7ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}], [{}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (UndefinedFunctionError) function Enum.reject/3 is undefined or private. Did you mean one of:
     
           * reject/2
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.reject([{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}], [{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}], #Function<0.35051782/1 in Bowling.score/1>)
       bowling.exs:18: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test can score all 0s (2.1ms)[0m
  * test can score a game with no strikes or spares[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (1.3ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.5ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.9ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.6ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.1ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:23: anonymous fn({{7}, 10}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:23: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable game is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.5ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (4.1ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (FunctionClauseError) no function clause matching in anonymous fn/1 in Bowling.score/1[0m
     [36mstacktrace:[0m
       bowling.exs:23: anonymous fn({{7}, 10}) in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:23: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable game is unused
  bowling.exs:31

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (4.4ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.02ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.03ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.02ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:93: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 5 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable game is unused
  bowling.exs:31

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test can score all 0s (19.5ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.05ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.02ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:33: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:93: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 5 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable game is unused
  bowling.exs:31

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
0
1
2
3
4
5
6
7
8
9
[31m  * test can score all 0s (16.8ms)[0m
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:34: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.2ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:34: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (2.4ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:34: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice7
8
9
0
1
2
3
4
5
6
7
8
9
[31m  * test points scored in the roll after the spare are counted twice (22.1ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:34: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.2ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:34: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:93: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.04s on tests)
[31m24 tests, 5 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable game is unused
  bowling.exs:31

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.3ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

** (CompileError) bowling.exs:25: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.6ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.5ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.0ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:34: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score all 0s (4.7ms)[0m
previous game 2
  * test can score a game with no strikes or sparesprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
previous game 2
  * test spare followed by all 0s is worth 10 pointsprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
previous game 2
  * test points scored in the roll after the spare are counted twiceprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
previous game 2
  * test consecutive spares each get a one roll bonusprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 1
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
previous game 2
  * test a spare in the last frame gets a one roll bonus that is counted onceprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 10
previous game 1
[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.3ms)[0m
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (1.4ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score all 0s (3.1ms)[0m
previous game 2
  * test can score a game with no strikes or sparesprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
previous game 2
  * test spare followed by all 0s is worth 10 pointsprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
previous game 2
  * test points scored in the roll after the spare are counted twiceprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
previous game 2
  * test consecutive spares each get a one roll bonusprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 1
previous game 2
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
previous game 3
  * test a spare in the last frame gets a one roll bonus that is counted onceprevious game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 10
previous game 1
previous game 2
[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.5ms)[0m
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score all 0s (4.4ms)[0m
previous game 2
  * test can score a game with no strikes or sparesprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score a game with no strikes or spares (0.4ms)[0m
previous game 2
  * test spare followed by all 0s is worth 10 pointsprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
previous game 2
  * test points scored in the roll after the spare are counted twiceprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test points scored in the roll after the spare are counted twice (0.5ms)[0m
previous game 2
previous game 3
  * test consecutive spares each get a one roll bonusprevious game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 1
previous game 2
[32m  * test consecutive spares each get a one roll bonus (0.7ms)[0m
previous game 3
  * test a spare in the last frame gets a one roll bonus that is counted onceprevious game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 10
previous game 1
previous game 2
[31m  * test a spare in the last frame gets a one roll bonus that is counted once (6.6ms)[0m
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.7ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

[33mwarning: [0mvariable game is unused
  bowling.exs:32

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score all 0s (4.5ms)[0m
previous game 2
  * test can score a game with no strikes or sparesprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
previous game 2
  * test spare followed by all 0s is worth 10 pointsprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
previous game 2
  * test points scored in the roll after the spare are counted twiceprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
previous game 2
  * test consecutive spares each get a one roll bonusprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 1
previous game 2
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
previous game 3
  * test a spare in the last frame gets a one roll bonus that is counted onceprevious game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 10
previous game 1
previous game 2
[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.6ms)[0m
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
** (CompileError) bowling.exs:32: missing do keyword in defp
    bowling.exs:32: (module)
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
[31m  * test can score all 0s (8.2ms)[0m
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or sparesprevious game 0
previous game 1
previous game 2
[31m  * test can score a game with no strikes or spares (4.9ms)[0m
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 10
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.6ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.5ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.6ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:93: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.4ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:126: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 7 failures, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 0
previous game 1
[31m  * test can score all 0s (5.4ms)[0m
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or sparesprevious game 0
previous game 1
previous game 2
[31m  * test can score a game with no strikes or spares (0.3ms)[0m
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 10
previous game 1
previous game 2

previous game 3
  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:45: (test)

previous game 4
  * test spare followed by all 0s is worth 10 pointsprevious game 5
previous game 6
previous game 7
[31m  * test spare followed by all 0s is worth 10 points (2.0ms)[0m
previous game 8
previous game 9

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:61: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (1.3ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:93: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.4ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (MatchError) no match of right hand side value: nil[0m
     [36mstacktrace:[0m
       bowling.exs:35: Bowling.previous_result/2
       bowling.exs:23: anonymous fn/2 in Bowling.score/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:22: Bowling.score/1
       bowling_test.exs:126: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 7 failures, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
previous game 0
previous game 1
previous game 2
previous game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score all 0s (2.7ms)[0m
previous game 2
  * test can score a game with no strikes or sparesprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
previous game 2
  * test spare followed by all 0s is worth 10 pointsprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
previous game 2
  * test points scored in the roll after the spare are counted twiceprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 0
previous game 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
previous game 2
  * test consecutive spares each get a one roll bonusprevious game 3
previous game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 1
previous game 2
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
previous game 3
  * test a spare in the last frame gets a one roll bonus that is counted onceprevious game 4
previous game 5
previous game 6
previous game 7
previous game 8
previous game 9
previous game 1
previous game 2
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
previous game 3
  * test a strike earns ten points in frame with a single rollprevious game 4
previous game 5
previous game 6
previous game 7
previous game 8
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.8ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mthis clause cannot match because a previous clause at line 24 always matches
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.8ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (3.0ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m2[31m1[0m
     [36mrhs:  [0m2[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (3.0ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.02ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (4.3ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m2[31m1[0m
     [36mrhs:  [0m2[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:24

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
HERE
HERE
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.7ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m2[31m1[0m
     [36mrhs:  [0m2[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (3.6ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m2[31m1[0m
     [36mrhs:  [0m2[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mvariable r1 is unused
  bowling.exs:36

[33mwarning: [0mvariable r2 is unused
  bowling.exs:36

** (CompileError) bowling.exs:36: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mvariable r1 is unused
  bowling.exs:36

[33mwarning: [0mvariable r2 is unused
  bowling.exs:36

** (CompileError) bowling.exs:36: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mvariable r1 is unused
  bowling.exs:36

[33mwarning: [0mvariable r2 is unused
  bowling.exs:36

** (CompileError) bowling.exs:36: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mvariable r1 is unused
  bowling.exs:36

[33mwarning: [0mvariable r2 is unused
  bowling.exs:36

** (CompileError) bowling.exs:36: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

[33mwarning: [0mvariable r1 is unused
  bowling.exs:36

[33mwarning: [0mvariable r2 is unused
  bowling.exs:36

** (CompileError) bowling.exs:37: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

** (SyntaxError) bowling.exs:39: unexpected keyword "do:". In case you wanted to write a "do" expression, you must either separate the keyword argument with comma or use do-blocks. For example, the following construct:

    if some_condition? do
      :this
    else
      :that
    end

is syntax sugar for the Elixir construct:

    if(some_condition?, do: :this, else: :that)

where "some_condition?" is the first argument and the second argument is a keyword list.

Syntax error before: 'do:'
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

** (CompileError) bowling.exs:40: undefined function nothing/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.8ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.02ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.9ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.6ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.5ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.02ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (5.2ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.2ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.8ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test can score all 0s (1.9ms)[0m
  * test can score a game with no strikes or spares[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (1.7ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
  * test a strike earns ten points in frame with a single roll[{10, 0, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[{10, 5, :nothing}, {3, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (5.6ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

** (CompileError) bowling.exs:11: undefined function roll/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test can score all 0s (2.9ms)[0m
  * test can score a game with no strikes or spares[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (1.4ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.7ms)[0m

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test can score all 0s (2.1ms)[0m
  * test can score a game with no strikes or spares[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (1.0ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.4ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.2ms)[0m

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_size(0)
       bowling.exs:9: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_size(5)
       bowling.exs:9: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
3
[31m  * test can score all 0s (5.9ms)[0m
6
6
5
0
10
10

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:27: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (3.0ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (2.3ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:48[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.5ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (3.0ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.4ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.3ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (3.2ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (Protocol.UndefinedError) protocol String.Chars not implemented for {}[0m
     [36mstacktrace:[0m
       (elixir) lib/string/chars.ex:3: String.Chars.impl_for!/1
       (elixir) lib/string/chars.ex:17: String.Chars.to_string/1
       (elixir) lib/io.ex:500: IO.puts/2
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.1s on load, 0.02s on tests)
[31m24 tests, 8 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[32m  * test can score all 0s (4.9ms)[0m
[]
  * test can score a game with no strikes or spares6
{3}
[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
6
{}
[32m  * test can score a game with no strikes or spares (3.8ms)[0m
[]
  * test spare followed by all 0s is worth 10 points4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
{}
[32m  * test spare followed by all 0s is worth 10 points (2.7ms)[0m
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (2.8ms)[0m
[]
  * test consecutive spares each get a one roll bonus5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (3.0ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (4.4ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
0
[{10}]
10
{}
[31m  * test a strike earns ten points in frame with a single roll (4.8ms)[0m
[]
5
{10}
[]
3
5
[{10}]

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_size(0)
       bowling.exs:12: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (1.7ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_size(5)
       bowling.exs:12: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[32m  * test can score all 0s (4.6ms)[0m
[]
  * test can score a game with no strikes or spares6
{3}
[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
6
{}
[32m  * test can score a game with no strikes or spares (4.0ms)[0m
[]
  * test spare followed by all 0s is worth 10 points4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
{}
[32m  * test spare followed by all 0s is worth 10 points (2.8ms)[0m
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (2.7ms)[0m
[]
  * test consecutive spares each get a one roll bonus5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (2.6ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (3.0ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
{0}
[{{10}}]
0
{}
[{0, 0}, {{10}}]
0
{0}
[{0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
[{{10}, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
10
{}
[31m  * test a strike earns ten points in frame with a single roll (6.0ms)[0m
[]
5
{10}
[]
3
{5}
[{{10}}]
0
{}
[{5, 3}, {{10}}]
0
{0}
[{5, 3}, {{10}}]
0
{}

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:126: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[{0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
[{{10}, 0, :nothing}, {5, 3, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (11.6ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.03s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[32m  * test can score all 0s (4.9ms)[0m
[]
  * test can score a game with no strikes or spares6
{3}
[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
6
{}
[32m  * test can score a game with no strikes or spares (3.8ms)[0m
[]
  * test spare followed by all 0s is worth 10 points4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
{}
[32m  * test spare followed by all 0s is worth 10 points (2.5ms)[0m
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (2.7ms)[0m
[]
  * test consecutive spares each get a one roll bonus5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (2.8ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (2.9ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
{0}
[{{10}}]
0
{}
[{0, 0}, {{10}}]
0
{0}
[{0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
[{{10}, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
10
{}
[31m  * test a strike earns ten points in frame with a single roll (5.8ms)[0m
[]
5
{10}
[]
3
{5}
[{{10}}]
0
{}
[{5, 3}, {{10}}]
0
{0}

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:126: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[{5, 3}, {{10}}]
0
{}
[{0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
[{{10}, 0, :nothing}, {5, 3, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (8.5ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.03s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[32m  * test can score all 0s (4.8ms)[0m
[]
  * test can score a game with no strikes or spares6
{3}
[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
6
{}
[32m  * test can score a game with no strikes or spares (3.8ms)[0m
[]
  * test spare followed by all 0s is worth 10 points4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
{}
[32m  * test spare followed by all 0s is worth 10 points (2.7ms)[0m
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (2.8ms)[0m
[]
  * test consecutive spares each get a one roll bonus5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (2.7ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (2.9ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
{0}
[{{10}}]
0
{}
[{0, 0}, {{10}}]
0
{0}
[{0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
[{{10}, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
10
{}
[31m  * test a strike earns ten points in frame with a single roll (6.4ms)[0m
[]
5
{10}
[]
3
{5}
[{{10}}]
0
{}
[{5, 3}, {{10}}]
0
{0}
[{5, 3}, {{10}}]
0
{}
[{0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:126: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
[{{10}, 0, :nothing}, {5, 3, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (8.7ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.1s on load, 0.03s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[32m  * test can score all 0s (5.9ms)[0m
[]
  * test can score a game with no strikes or spares6
{3}
[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
6
{}
[32m  * test can score a game with no strikes or spares (6.9ms)[0m
[]
  * test spare followed by all 0s is worth 10 points4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
{}
[32m  * test spare followed by all 0s is worth 10 points (3.9ms)[0m
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (4.7ms)[0m
[]
  * test consecutive spares each get a one roll bonus5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (4.8ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (4.5ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
{0}
[{{10}}]
0
{}
[{0, 0}, {{10}}]
0
{0}
[{0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
[{{10}, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
10
{}
[31m  * test a strike earns ten points in frame with a single roll (11.5ms)[0m
[]
5
{10}
[]
3
{5}
[{{10}}]
0
{}

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:126: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[{5, 3}, {{10}}]
0
{0}
[{5, 3}, {{10}}]
0
{}
[{0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
[{{10}, 0, :nothing}, {5, 3, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (12.8ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.1s on load, 0.05s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[]
6
[32m  * test can score all 0s (4.8ms)[0m
{3}
  * test can score a game with no strikes or spares[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (3.9ms)[0m
6
  * test spare followed by all 0s is worth 10 points{}
[]
4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
[32m  * test spare followed by all 0s is worth 10 points (2.6ms)[0m
{}
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (3.1ms)[0m
  * test consecutive spares each get a one roll bonus[]
5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (2.9ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (3.2ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
{0}
[{{10}}]
0
{}
[{0, 0}, {{10}}]
0
{0}
[{0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {{10}}]
[{{10}, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
10
{}
[31m  * test a strike earns ten points in frame with a single roll (6.1ms)[0m
[]
5
{10}
[]
3
{5}
[{{10}}]
0
{}
[{5, 3}, {{10}}]
0
{0}
[{5, 3}, {{10}}]
0
{}
[{0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:113[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:126: (test)

{0}
  * test points scored in the two rolls after a strike are counted twice as a bonus[{0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {{10}}]
[{{10}, 0, :nothing}, {5, 3, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (9.1ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:53: Bowling.score_frame/1
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:34: Bowling.score/1
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.03s on tests)
[31m24 tests, 2 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
{}
[]
0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
3
{}
[32m  * test can score all 0s (4.7ms)[0m
[]
  * test can score a game with no strikes or spares6
{3}
[]
3
{}
[{3, 6}]
6
{3}
[{3, 6}]
3
{}
[{3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
3
{}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
6
{3}
[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
6
{}
[32m  * test can score a game with no strikes or spares (4.1ms)[0m
[]
  * test spare followed by all 0s is worth 10 points4
{6}
[]
0
{}
[{6, 4}]
0
{0}
[{6, 4}]
0
{}
[{0, 0}, {6, 4}]
0
{0}
[{0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
6
{}
[32m  * test spare followed by all 0s is worth 10 points (2.4ms)[0m
[]
  * test points scored in the roll after the spare are counted twice4
{6}
[]
3
{}
[{6, 4}]
0
{3}
[{6, 4}]
0
{}
[{3, 0}, {6, 4}]
0
{0}
[{3, 0}, {6, 4}]
0
{}
[{0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
5
{}
[32m  * test points scored in the roll after the spare are counted twice (3.0ms)[0m
[]
  * test consecutive spares each get a one roll bonus5
{5}
[]
3
{}
[{5, 5}]
7
{3}
[{5, 5}]
4
{}
[{3, 7}, {5, 5}]
0
{4}
[{3, 7}, {5, 5}]
0
{}
[{4, 0}, {3, 7}, {5, 5}]
0
{0}
[{4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
0
{}
[32m  * test consecutive spares each get a one roll bonus (3.2ms)[0m
[]
  * test a spare in the last frame gets a one roll bonus that is counted once0
{0}
[]
0
{}
[{0, 0}]
0
{0}
[{0, 0}]
0
{}
[{0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
3
{7}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
7
{}
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
10
{}
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (3.5ms)[0m
[]
  * test a strike earns ten points in frame with a single roll0
{10}
[]
0
{0}
[{10}]
0
{}
[{0, 0}, {10}]
0
{0}
[{0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
[{10, 0, :nothing}, {0, 0, :strike}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
10
{}
[32m  * test a strike earns ten points in frame with a single roll (2.6ms)[0m
[]
  * test points scored in the two rolls after a strike are counted twice as a bonus5
{10}
[]
3
{5}
[{10}]
0
{}
[{5, 3}, {10}]
0
{0}
[{5, 3}, {10}]
0
{}
[{0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {5, 3}, {10}]
0
{}
[{0, 0}, {0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {0, 0}, {5, 3}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
0
{0}
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
[{10, 0, :nothing}, {5, 3, :strike}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.8ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test can score all 0s (2.3ms)[0m
  * test can score a game with no strikes or spares[{3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing}, {3, 6, :nothing},
 {3, 6, :nothing}, {3, 6, :nothing}]
[32m  * test can score a game with no strikes or spares (1.2ms)[0m
  * test spare followed by all 0s is worth 10 points[{6, 4, :nothing}, {0, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twice[{6, 4, :nothing}, {3, 0, :spare}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus[{5, 5, :nothing}, {3, 7, :spare}, {4, 0, :spare}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[{0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {7, 3, :nothing}, {7, 0, :nothing}]
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
  * test a strike earns ten points in frame with a single roll[{10, 0, :nothing}, {0, 0, :strike}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[{10, 0, :nothing}, {5, 3, :strike}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing}, {0, 0, :nothing},
 {0, 0, :nothing}, {0, 0, :nothing}]
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (6.2ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.02ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.02ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[32m  * test can score all 0s (2.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.02ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:6

[33mwarning: [0mvariable i is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.03ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.03ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.02ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.02ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (4.2ms)[0m

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m81[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
** (CompileError) bowling.exs:8: unhandled operator ->
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (stdlib) lists.erl:1355: :lists.mapfoldl/3

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable spare_bonues is unused
  bowling.exs:20

** (CompileError) bowling.exs:23: undefined function apply_bonuses/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable spare_bonues is unused
  bowling.exs:20

** (CompileError) bowling.exs:25: undefined function spare_bonus/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.2ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (1.4ms)[0m

  3) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game([0], 0, 24, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m

  4) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:20: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:20: Bowling.reduce_game/4
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.01ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:20: Bowling.reduce_game/4
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 6 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.0ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (1.2ms)[0m

  3) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game([0], 0, 24, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m

  4) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:25: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:25: Bowling.reduce_game/4
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.01ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:25: Bowling.reduce_game/4
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 6 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
0
  * test can score all 0s0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
[32m  * test can score all 0s (1.1ms)[0m
0
  * test can score a game with no strikes or spares0
0
0
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
0
  * test spare followed by all 0s is worth 10 points0
0
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
1
  * test points scored in the roll after the spare are counted twice0
1
[31m  * test points scored in the roll after the spare are counted twice (2.4ms)[0m
0
0
0
0
0
0
0
0
0
0
0

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (1.0ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.6ms)[0m

  3) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game([0], 0, 24, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.9ms)[0m

  4) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:26: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (1.5ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:26: Bowling.reduce_game/4
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (3.2ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:26: Bowling.reduce_game/4
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 6 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
[32m  * test can score all 0s (1.1ms)[0m
0
  * test can score a game with no strikes or spares0
0
0
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
0
  * test spare followed by all 0s is worth 10 points0
0
1
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice0
1
0
[31m  * test points scored in the roll after the spare are counted twice (2.7ms)[0m
0
0
0
0
0
0
0
0
0
0

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (1.0ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (1.3ms)[0m

  3) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game([0], 0, 24, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (1.2ms)[0m

  4) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:26: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (1.0ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:26: Bowling.reduce_game/4
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (1.3ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:26: Bowling.reduce_game/4
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 6 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
  * test can score all 0s (skipped)
0
  * test can score a game with no strikes or spares0
  * test can score a game with no strikes or spares (skipped)
0
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice0
0
0
0
0
0
[31m  * test points scored in the roll after the spare are counted twice (3.5ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:66[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:79: (test)

  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s0
  * test can score all 0s (skipped)
1
  * test can score a game with no strikes or spares0
  * test can score a game with no strikes or spares (skipped)
0
  * test spare followed by all 0s is worth 10 points0
  * test spare followed by all 0s is worth 10 points (skipped)
0
  * test points scored in the roll after the spare are counted twice0
0
0
0
[32m  * test points scored in the roll after the spare are counted twice (1.1ms)[0m
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 22 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.02ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 21 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 20 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.9ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game('\a', 1, 10, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.02ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.0ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game('\a', 1, 10, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

[33mwarning: [0mvariable frames is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.02ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.3ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m[31m24[0m
     [36mrhs:  [0m[32m17[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.8ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:18: Bowling.reduce_game('\a', 1, 10, 11)
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.02ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.6ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m[31m24[0m
     [36mrhs:  [0m[32m17[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.02ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.02ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.02ms)[0m
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 18 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.6ms)[0m

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:24: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

[33mwarning: [0mvariable frames is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.4ms)[0m

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:24: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:27: unexpected token: "end". "(" starting at line 24 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:18

[33mwarning: [0mvariable frames is unused
  bowling.exs:18

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:30

[33mwarning: [0mvariable frames is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
[32m  * test can score all 0s (2.0ms)[0m
  * test can score a game with no strikes or spares"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 6 r2 4"
[32m  * test can score a game with no strikes or spares (0.5ms)[0m
  * test spare followed by all 0s is worth 10 points"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 6 r2 4"
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twice"r1 3 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 5 r2 5"
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus"r1 3 r2 7"
"r1 4 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 7 r2 3"
"r1 reset r2 0"
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.6ms)[0m

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArithmeticError) bad argument in arithmetic expression[0m
     [36mstacktrace:[0m
       bowling.exs:25: Bowling.reduce_game/4
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:26

[33mwarning: [0mvariable frames is unused
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 3 r2 6"
[32m  * test can score all 0s (2.0ms)[0m
  * test can score a game with no strikes or spares"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 3 r2 6"
"r1 6 r2 4"
[32m  * test can score a game with no strikes or spares (0.3ms)[0m
  * test spare followed by all 0s is worth 10 points"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 6 r2 4"
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twice"r1 3 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 5 r2 5"
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus"r1 3 r2 7"
"r1 4 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 7 r2 3"
"r1 0 r2 0"
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
  * test a strike earns ten points in frame with a single roll"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
"r1 0 r2 0"
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus  * test points scored in the two rolls after a strike are counted twice as a bonus (skipped)
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 17 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.03ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.00ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m
  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (2.7ms)[0m

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m66[0m
     [36mrhs:  [0m[32m81[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m
  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (2.2ms)[0m

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.apply_bonuses/3
       bowling.exs:21: Bowling.reduce_game/4
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m
  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (2.9ms)[0m

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m7[0m1
     [36mrhs:  [0m[32m8[0m1
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m
  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (2.6ms)[0m

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m9[0m1
     [36mrhs:  [0m[32m8[0m1
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.00ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable frames is unused
  bowling.exs:25

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.01ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.01ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (3.6ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:26

[33mwarning: [0mthis clause cannot match because a previous clause at line 15 always matches
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.00ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (2.4ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:26

[33mwarning: [0mthis clause cannot match because a previous clause at line 15 always matches
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.01ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.00ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (3.9ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
** (CompileError) bowling.exs:26: undefined function score/0
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3

** (CompileError) bowling.exs:26: undefined function score/0
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:25

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:26

[33mwarning: [0mthis clause cannot match because a previous clause at line 15 always matches
  bowling.exs:26

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.01ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.00ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (1.9ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:26

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:27

[33mwarning: [0mthis clause cannot match because a previous clause at line 15 always matches
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sstrike in frame 1
[32m  * test can score all 0s (0.01ms)[0m
  * test can score a game with no strikes or sparesstrike in frame 1
[32m  * test can score a game with no strikes or spares (0.01ms)[0m
  * test spare followed by all 0s is worth 10 pointsstrike in frame 1
strike in frame 2
strike in frame 3
[32m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m
  * test points scored in the roll after the spare are counted twicestrike in frame 10
[32m  * test points scored in the roll after the spare are counted twice (0.00ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.00ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.01ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.7ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.08ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (7.2ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:28

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

[33mwarning: [0mthis clause cannot match because a previous clause at line 15 always matches
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score all 0s (1.0ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
r1 3 r2 0
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
strike in frame 1
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 7 r2 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (2.4ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (0.9ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
strike in frame 1
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
HERE
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.0ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 10 r2 0
strike in frame 1
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 0 r2 0
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score all 0s (1.1ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
r1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
strike in frame 1
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.2ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
strike in frame 1
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 1
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 10 r2 10
  * test a spare in the last frame gets a one roll bonus that is counted oncestrike in frame 2
r1 10 r2 5
strike in frame 3
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
r1 0 r2 0
  * test consecutive strikes each get the two roll bonusr1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.2ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
strike in frame 1
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
strike in frame 1
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
r1 0 r2 0
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
r1 0 r2 0
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 11 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.1ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
strike in frame 1
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
strike in frame 1
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 10
strike in frame 3
r1 10 r2 10
strike in frame 4
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (2.4ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.apply_bonuses/2
       bowling.exs:22: Bowling.reduce_game/4
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.2ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
strike in frame 1
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
[32m  * test a strike earns ten points in frame with a single roll (0.4ms)[0m
r1 0 r2 0
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
strike in frame 1
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.4ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 10
strike in frame 3
r1 10 r2 10
strike in frame 4
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (2.6ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.apply_bonuses/2
       bowling.exs:22: Bowling.reduce_game/4
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.0ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 6 r2 4
  * test points scored in the roll after the spare are counted twicer1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 0 r2 0
  * test consecutive spares each get a one roll bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
strike in frame 1
r1 0 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonusr1 0 r2 0
r1 0 r2 0
[31m  * test consecutive strikes each get the two roll bonus (2.8ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m66[0m
     [36mrhs:  [0m[32m81[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.5ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (7.8ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
r1 0 r2 0
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.3ms)[0m
r1 0 r2 0
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
strike in frame 1
  * test all strikes is a perfect gamer1 10 r2 10
strike in frame 2
r1 10 r2 10
strike in frame 3
r1 10 r2 10
strike in frame 4
r1 10 r2 10
strike in frame 5
r1 10 r2 10
strike in frame 6
r1 10 r2 10
strike in frame 7
r1 10 r2 10
strike in frame 8
r1 10 r2 10
strike in frame 9
r1 10 r2 10
strike in frame 10
[31m  * test all strikes is a perfect game (0.3ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m21[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
[32m  * test can score all 0s (1.1ms)[0m
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
strike in frame 1
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
strike in frame 1
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[31m  * test consecutive strikes each get the two roll bonus (2.4ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0

r1 0 r2 0
  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m66[0m
     [36mrhs:  [0m[32m81[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (6.5ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (1.3ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
r1 0 r2 0
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
r1 0 r2 0
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
strike in frame 1
  * test all strikes is a perfect gamer1 10 r2 10
strike in frame 2
r1 10 r2 10
strike in frame 3
r1 10 r2 10
strike in frame 4
r1 10 r2 10
strike in frame 5
r1 10 r2 10
strike in frame 6
r1 10 r2 10
strike in frame 7
r1 10 r2 10
strike in frame 8
r1 10 r2 10
strike in frame 9
r1 10 r2 10
strike in frame 10
[31m  * test all strikes is a perfect game (0.3ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m21[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score all 0s (1.2ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 10 r2 0
  * test a strike earns ten points in frame with a single rollstrike in frame 1
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (3.2ms)[0m
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 5
strike in frame 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10

r1 0 r2 0
  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m31[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

r1 0 r2 0
  * test consecutive strikes each get the two roll bonusr1 0 r2 0
r1 0 r2 0
[31m  * test consecutive strikes each get the two roll bonus (2.0ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0

  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.apply_bonuses/2
       bowling.exs:22: Bowling.reduce_game/4
       bowling_test.exs:157: (test)

r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (12.3ms)[0m
r1 10 r2 10
  * test rolling a spare with the two roll bonus does not get a bonus rollstrike in frame 10
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (2.6ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
[32m  * test strikes with the two roll bonus do not get bonus rolls (3.0ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
strike in frame 1
r1 10 r2 10
strike in frame 2
r1 10 r2 10
strike in frame 3
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

  3) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.apply_bonuses/2
       bowling.exs:22: Bowling.reduce_game/4
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m24 tests, 3 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.1ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 6 r2 4
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
r1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
strike in frame 1
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
strike in frame 1
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 10 r2 10
strike in frame 1
  * test consecutive spares each get a one roll bonusr1 10 r2 10
strike in frame 2
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 10 r2 5
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.7ms)[0m
strike in frame 3
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m31[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

r1 0 r2 0
  * test consecutive strikes each get the two roll bonusr1 0 r2 0
r1 0 r2 0
[31m  * test consecutive strikes each get the two roll bonus (7.3ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
strike in frame 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
strike in frame 10
r1 0 r2 0
r1 0 r2 0

r1 0 r2 0
  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m9[0m1
     [36mrhs:  [0m[32m8[0m1
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (1.1ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.4ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 7 r2 3
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.4ms)[0m
strike in frame 1
  * test all strikes is a perfect gamer1 10 r2 10
strike in frame 2
r1 10 r2 10
strike in frame 3
r1 10 r2 10
strike in frame 4
r1 10 r2 10
strike in frame 5
r1 10 r2 10
strike in frame 6
r1 10 r2 10
strike in frame 7
r1 10 r2 10
strike in frame 8
r1 10 r2 10
strike in frame 9
r1 10 r2 10
strike in frame 10
[32m  * test all strikes is a perfect game (0.3ms)[0m
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.4ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test all strikes is a perfect game (4.2ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m29[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

** (CompileError) bowling.exs:14: undefined function r2/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.5ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
r1 10 r2 10
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (4.0ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m4[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.4ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.1ms)[0m
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.1ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.3ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 5
  * test consecutive strikes each get the two roll bonusr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.3ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
r1 0 r2 0
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (2.5ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m29[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (3.9ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.6ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (1.9ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (1.4ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.6ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.4ms)[0m
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.5ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.6ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.4ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.7ms)[0m
r1 10 r2 10
r1 10 r2 10
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test all strikes is a perfect game (3.8ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m29[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score all 0s (1.0ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
r1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 0 r2 0
r1 0 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 7 r2 3
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
r1 10 r2 0
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (3.3ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0

r1 0 r2 0
  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m4[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 7 r2 3
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (32.8ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[32m  * test all strikes is a perfect game (0.3ms)[0m
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.04s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.5ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.4ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (1.4ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (2.4ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (1.0ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (1.0ms)[0m
r1 10 r2 5
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (1.3ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.5ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.5ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (1.1ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (1.4ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (7.8ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m4[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (1.2ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (8.4ms)[0m
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.03s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (5.0ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.4ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
r1 0 r2 0
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test all strikes is a perfect game (3.0ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m8[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:26: unexpected token: "end". "(" starting at line 22 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (2.9ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
r1 5 r2 3
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 0 r2 0
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.4ms)[0m
r1 10 r2 10
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m31[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

r1 0 r2 0
  * test consecutive strikes each get the two roll bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[31m  * test consecutive strikes each get the two roll bonus (0.4ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3

  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m9[0m1
     [36mrhs:  [0m[32m8[0m1
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted oncer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (7.6ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (1.5ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.5ms)[0m

  3) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m4[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (1.3ms)[0m

  4) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m4[0m00
     [36mrhs:  [0m[32m3[0m00
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.02s on tests)
[31m24 tests, 4 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (5.2ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (1.7ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.9ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
  * test consecutive spares each get a one roll bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.4ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.7ms)[0m
r1 10 r2 10
r1 10 r2 10
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m31[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (10.3ms)[0m

  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m9[0m1
     [36mrhs:  [0m[32m8[0m1
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.3ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.3ms)[0m

  3) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m9[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 3 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.2ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (2.6ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

r1 10 r2 10
  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (10.6ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
[31m  * test all strikes is a perfect game (6.3ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m28[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.1ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.3ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (4.1ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m8[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 1 failure, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score all 0s (1.1ms)[0m
r1 0 r2 0
  * test can score a game with no strikes or sparesr1 0 r2 0
r1 0 r2 0
[32m  * test can score a game with no strikes or spares (0.3ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
r1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
r1 0 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 10 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[31m  * test consecutive strikes each get the two roll bonus (4.0ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0

  1) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m66[0m
     [36mrhs:  [0m[32m81[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
  * test strikes with the two roll bonus do not get bonus rollsr1 10 r2 10
r1 10 r2 10
[32m  * test strikes with the two roll bonus do not get bonus rolls (19.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (1.2ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test all strikes is a perfect game (1.0ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m21[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.2s on load, 0.03s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.6ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (3.5ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (1.1ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (20.8ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m29[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.03s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable score is unused
  bowling.exs:15

[33mwarning: [0mvariable x is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:17

[33mwarning: [0mvariable frames is unused
  bowling.exs:17

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.4ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score a game with no strikes or spares (0.3ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twicer1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
r1 0 r2 0
  * test consecutive spares each get a one roll bonusr1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
[32m  * test a strike earns ten points in frame with a single roll (0.5ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 10 r2 10
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m
r1 0 r2 0
  * test consecutive strikes each get the two roll bonusr1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test strikes with the two roll bonus do not get bonus rolls (6.5ms)[0m
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (1.0ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.5ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable score is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:17

[33mwarning: [0mvariable frames is unused
  bowling.exs:17

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.4ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
r1 0 r2 0
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.5ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test strikes with the two roll bonus do not get bonus rolls (3.7ms)[0m

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.2ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable score is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:17

[33mwarning: [0mvariable frames is unused
  bowling.exs:17

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test can score all 0s (3.1ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
[32m  * test can score a game with no strikes or spares (0.6ms)[0m
r1 6 r2 4
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (1.0ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (1.2ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.6ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.4ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.5ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.4ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.6ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (2.9ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (24.8ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (8.2ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

r1 10 r2 10
  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (25.2ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test all strikes is a perfect game (1.8ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.5 seconds (0.4s on load, 0.07s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable score is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:17

[33mwarning: [0mvariable frames is unused
  bowling.exs:17

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:30

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.4ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (3.3ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

r1 10 r2 10
  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (24.2ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
[31m  * test all strikes is a perfect game (1.8ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.2s on load, 0.03s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
r1 3 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
r1 3 r2 7
r1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 10 r2 10
r1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test can score all 0s (1.6ms)[0m
  * test can score a game with no strikes or sparesr1 0 r2 0
r1 0 r2 0
[32m  * test can score a game with no strikes or spares (0.1ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
r1 0 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonusr1 0 r2 0
r1 7 r2 3
[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 10 r2 10
r1 10 r2 10
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single rollr1 10 r2 10
r1 10 r2 10
[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
r1 10 r2 10
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 10 r2 10
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 10
r1 10 r2 10
[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (2.7ms)[0m

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.3ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.5ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.6ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.5ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.4ms)[0m
r1 0 r2 0
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (4.2ms)[0m
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (3.6ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (2.7ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable score is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 3 r2 6
[32m  * test can score all 0s (1.0ms)[0m
r1 3 r2 6
  * test can score a game with no strikes or sparesr1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 3 r2 6
r1 6 r2 4
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 6 r2 4
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
r1 3 r2 0
  * test points scored in the roll after the spare are counted twicer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 5 r2 5
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
r1 3 r2 7
  * test consecutive spares each get a one roll bonusr1 4 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 0
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.4ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 5
[32m  * test a strike earns ten points in frame with a single roll (0.4ms)[0m
r1 5 r2 3
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.6ms)[0m
r1 10 r2 10
  * test consecutive strikes each get the two roll bonusr1 10 r2 5
r1 5 r2 3
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
[32m  * test consecutive strikes each get the two roll bonus (0.5ms)[0m
r1 0 r2 0
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.5ms)[0m
r1 0 r2 0
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 7
r1 0 r2 0
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.9ms)[0m
r1 0 r2 0
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 10 r2 10
r1 0 r2 0
[31m  * test strikes with the two roll bonus do not get bonus rolls (10.8ms)[0m
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 0 r2 0
r1 7 r2 3
r1 10 r2 10
r1 10 r2 10
r1 10 r2 10

r1 10 r2 10
  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m2[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 10 r2 10
r1 10 r2 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (31.4ms)[0m
r1 10 r2 10
  * test all strikes is a perfect gamer1 10 r2 10
r1 10 r2 10
r1 10 r2 10
[31m  * test all strikes is a perfect game (18.1ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.4 seconds (0.3s on load, 0.06s on tests)
[31m24 tests, 2 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test can score all 0s (1.2ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 1
r1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
[32m  * test can score a game with no strikes or spares (0.3ms)[0m
r1 0 r2 0 frame 2
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
r1 3 r2 0 frame 2
r1 0 r2 0 frame 3
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twicer1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 5 frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 10 frame 1
r1 10 r2 10 frame 2
r1 10 r2 5 frame 3
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonusr1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test all strikes is a perfect game (0.3ms)[0m
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 3 r2 6 frame 1
r1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
r1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
r1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 5 frame 1
r1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test can score all 0s (1.4ms)[0m
r1 10 r2 10 frame 1
  * test can score a game with no strikes or sparesr1 10 r2 10 frame 2
r1 10 r2 5 frame 3
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonusr1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive strikes each get the two roll bonus (2.0ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (1.3ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (3.5ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
[32m  * test strikes with the two roll bonus do not get bonus rolls (1.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.6ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test all strikes is a perfect game (0.5ms)[0m
  * test rolls can not score negative points[31m  * test rolls can not score negative points (8.4ms)[0m

  1) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.roll(game, -1) == {:error, "Pins must have a value from 0 to 10"}
     [36mlhs:  [0m[-1]
     [36mrhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mstacktrace:[0m
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable bonuses is unused
  bowling.exs:13

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable frames is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:27

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 3 r2 6 frame 1
[32m  * test can score all 0s (1.1ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twicer1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 5 frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.4ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 10 frame 1
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonusr1 10 r2 10 frame 2
r1 10 r2 5 frame 3
r1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
r1 0 r2 0 frame 4
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
r1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.9ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.1ms)[0m
  * test rolls can not score negative points[31m  * test rolls can not score negative points (12.9ms)[0m

  1) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m24 tests, 1 failure, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:7

[33mwarning: [0mvariable roll is unused
  bowling.exs:7

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 3 r2 6 frame 1
[32m  * test can score all 0s (1.9ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
[32m  * test can score a game with no strikes or spares (0.4ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
  * test points scored in the roll after the spare are counted twicer1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive spares each get a one roll bonus (0.4ms)[0m
r1 0 r2 0 frame 2
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
r1 10 r2 0 frame 1
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test a strike earns ten points in frame with a single roll (0.5ms)[0m
r1 10 r2 5 frame 1
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 10 frame 1
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.4ms)[0m
r1 10 r2 10 frame 2
r1 10 r2 5 frame 3
  * test consecutive strikes each get the two roll bonusr1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive strikes each get the two roll bonus (0.5ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.4ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.4ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.4ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.9ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test all strikes is a perfect game (0.9ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[32m24 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:7

[33mwarning: [0mvariable roll is unused
  bowling.exs:7

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 3 r2 6 frame 1
[32m  * test can score all 0s (4.9ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
[32m  * test can score a game with no strikes or spares (1.3ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
[32m  * test spare followed by all 0s is worth 10 points (1.4ms)[0m
  * test points scored in the roll after the spare are counted twicer1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.6ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 5 frame 1
r1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 10 frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 10 r2 10 frame 2
r1 10 r2 5 frame 3
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonusr1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
r1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.2ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[32m24 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:7

[33mwarning: [0mvariable roll is unused
  bowling.exs:7

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:28

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 3 r2 6 frame 1
[32m  * test can score all 0s (1.1ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twicer1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.4ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 5 frame 1
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 10 r2 10 frame 1
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonusr1 10 r2 10 frame 2
r1 10 r2 5 frame 3
r1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
r1 0 r2 0 frame 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test all strikes is a perfect game (0.2ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[31m  * test two rolls in a frame can not score more than 10 points (13.0ms)[0m

  1) test two rolls in a frame can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:257[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.roll(game, 6) == {:error, "Pin count exceeds pins on the lane"}
     [36mlhs:  [0m[6, 5]
     [36mrhs:  [0m{:error, "Pin count exceeds pins on the lane"}
     [36mstacktrace:[0m
       bowling_test.exs:260: (test)

  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 1 failure, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable game is unused
  bowling.exs:7

[33mwarning: [0mvariable roll is unused
  bowling.exs:7

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:14

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:15

[33mwarning: [0mvariable frames is unused
  bowling.exs:15

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:16

[33mwarning: [0mvariable frames is unused
  bowling.exs:16

[33mwarning: [0mvariable rolls is unused
  bowling.exs:16

[33mwarning: [0mvariable score is unused
  bowling.exs:16

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:29

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 3 r2 6 frame 1
[32m  * test can score all 0s (1.1ms)[0m
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 6 r2 4 frame 1
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twicer1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 5 r2 5 frame 1
[32m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m
  * test consecutive spares each get a one roll bonusr1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
r1 0 r2 0 frame 1
[32m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted oncer1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.5ms)[0m
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "two rolls in a frame can not score more than 10 points"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

r1 0 r2 0 frame 8
  * test consecutive strikes each get the two roll bonusr1 0 r2 0 frame 9
[31m  * test consecutive strikes each get the two roll bonus (0.02ms)[0m
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3

r1 0 r2 0 frame 4
  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "two rolls in a frame can not score more than 10 points"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 5
r1 0 r2 0 frame 6
[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10

  3) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "two rolls in a frame can not score more than 10 points"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.6ms)[0m

  4) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "two rolls in a frame can not score more than 10 points"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (23.9ms)[0m

  5) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "two rolls in a frame can not score more than 10 points"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.5ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.03ms)[0m

  6) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "two rolls in a frame can not score more than 10 points"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[31m  * test two rolls in a frame can not score more than 10 points (0.02ms)[0m

  7) test two rolls in a frame can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:257[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.roll(game, 6) == {:error, "Pin count exceeds pins on the lane"}
     [36mlhs:  [0m[6, 5]
     [36mrhs:  [0m{:error, "Pin count exceeds pins on the lane"}
     [36mstacktrace:[0m
       bowling_test.exs:260: (test)

  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.03s on tests)
[31m24 tests, 7 failures, 7 skipped[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:70: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) bowling.exs:92: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:35

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:33

[33mwarning: [0mvariable r1 is unused
  bowling.exs:12

[33mwarning: [0mvariable r2 is unused
  bowling.exs:12

[33mwarning: [0mvariable frames is unused
  bowling.exs:19

[33mwarning: [0mvariable game is unused
  bowling.exs:35

[33mwarning: [0mvariable roll is unused
  bowling.exs:35

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:42

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable frames is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:56

** (CompileError) bowling.exs:8: undefined function reduce_game_to_frame/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:35

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:33

[33mwarning: [0mvariable r1 is unused
  bowling.exs:12

[33mwarning: [0mvariable r2 is unused
  bowling.exs:12

[33mwarning: [0mvariable frames is unused
  bowling.exs:19

[33mwarning: [0mvariable game is unused
  bowling.exs:35

[33mwarning: [0mvariable roll is unused
  bowling.exs:35

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:42

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable frames is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:56

** (CompileError) bowling.exs:8: undefined function reduce_game_to_frames/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:35

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:33

[33mwarning: [0mvariable r1 is unused
  bowling.exs:12

[33mwarning: [0mvariable r2 is unused
  bowling.exs:12

[33mwarning: [0mvariable game is unused
  bowling.exs:35

[33mwarning: [0mvariable roll is unused
  bowling.exs:35

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:42

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable frames is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:56

** (CompileError) bowling.exs:8: undefined function reduce_game_to_frames/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:35

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:33

[33mwarning: [0mvariable r1 is unused
  bowling.exs:12

[33mwarning: [0mvariable r2 is unused
  bowling.exs:12

[33mwarning: [0mvariable game is unused
  bowling.exs:35

[33mwarning: [0mvariable roll is unused
  bowling.exs:35

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:42

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable frames is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:56

** (CompileError) bowling.exs:12: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:35

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:33

[33mwarning: [0mvariable r1 is unused
  bowling.exs:12

[33mwarning: [0mvariable r2 is unused
  bowling.exs:12

[33mwarning: [0mvariable game is unused
  bowling.exs:35

[33mwarning: [0mvariable roll is unused
  bowling.exs:35

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:42

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable frames is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:56

** (CompileError) bowling.exs:12: undefined function r1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:35

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:33

[33mwarning: [0mvariable game is unused
  bowling.exs:35

[33mwarning: [0mvariable roll is unused
  bowling.exs:35

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:42

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable frames is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:56

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.7ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:27: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.02ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:43: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.01ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:59: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.01ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:75: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.01ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:91: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.00ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:108: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.00ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:124: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.00ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:140: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.00ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:156: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.00ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:173: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.00ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:190: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.00ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:208: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.00ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:225: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.00ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling_test.exs:243: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[31m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m

 15) test two rolls in a frame can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:257[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.hd([])
       bowling.exs:22: anonymous fn/2 in Bowling.reduce_game_to_frames/1
       (elixir) lib/enum.ex:1623: Enum."-reduce/3-lists^foldl/2-0-"/3
       bowling.exs:8: Bowling.roll/2
       bowling_test.exs:259: (test)

  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 15 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:44

[33mwarning: [0mvariable frames is unused
  bowling.exs:44

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:57

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sr1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test can score all 0s (1.1ms)[0m
r1 3 r2 6 frame 1
  * test can score a game with no strikes or sparesr1 3 r2 6 frame 2
r1 3 r2 6 frame 3
r1 3 r2 6 frame 4
r1 3 r2 6 frame 5
r1 3 r2 6 frame 6
r1 3 r2 6 frame 7
r1 3 r2 6 frame 8
r1 3 r2 6 frame 9
r1 3 r2 6 frame 10
r1 6 r2 4 frame 1
r1 0 r2 0 frame 2
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
r1 0 r2 0 frame 3
  * test spare followed by all 0s is worth 10 pointsr1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
  * test points scored in the roll after the spare are counted twicer1 6 r2 4 frame 1
r1 3 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonusr1 5 r2 5 frame 1
r1 3 r2 7 frame 2
r1 4 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
r1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 0 frame 1
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
  * test a strike earns ten points in frame with a single rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test a strike earns ten points in frame with a single roll (0.5ms)[0m
r1 10 r2 5 frame 1
  * test points scored in the two rolls after a strike are counted twice as a bonusr1 5 r2 3 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonusr1 10 r2 10 frame 1
r1 10 r2 10 frame 2
r1 10 r2 5 frame 3
r1 5 r2 3 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 0 r2 0 frame 10
[32m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted oncer1 0 r2 0 frame 1
r1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
r1 0 r2 0 frame 1
  * test rolling a spare with the two roll bonus does not get a bonus rollr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 7 frame 10
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.3ms)[0m
r1 0 r2 0 frame 1
  * test strikes with the two roll bonus do not get bonus rollsr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 10 r2 10 frame 10
r1 0 r2 0 frame 1
[32m  * test strikes with the two roll bonus do not get bonus rolls (0.4ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonusr1 0 r2 0 frame 2
r1 0 r2 0 frame 3
r1 0 r2 0 frame 4
r1 0 r2 0 frame 5
r1 0 r2 0 frame 6
r1 0 r2 0 frame 7
r1 0 r2 0 frame 8
r1 0 r2 0 frame 9
r1 7 r2 3 frame 10
r1 10 r2 10 frame 1
[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect gamer1 10 r2 10 frame 2
r1 10 r2 10 frame 3
r1 10 r2 10 frame 4
r1 10 r2 10 frame 5
r1 10 r2 10 frame 6
r1 10 r2 10 frame 7
r1 10 r2 10 frame 8
r1 10 r2 10 frame 9
r1 10 r2 10 frame 10
[32m  * test all strikes is a perfect game (0.2ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:44

[33mwarning: [0mvariable frames is unused
  bowling.exs:44

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:55

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.02ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.02ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.02ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.02ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.02ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.02ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.01ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:44

[33mwarning: [0mvariable frames is unused
  bowling.exs:44

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:55

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures, 6 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:43

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:44

[33mwarning: [0mvariable frames is unused
  bowling.exs:44

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:55

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.5ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.07ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (3.3ms)[0m

  1) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:41: unexpected token: ")". "{" starting at line 41 is missing terminator "}"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:47

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable frames is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:59

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.02ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.01ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (2.2ms)[0m

  1) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, [31m""[0m}
     [36mrhs:  [0m{:error, [32m"Score cannot be taken until the end of the game"[0m}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:47

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable frames is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:59

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.04ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:47

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable frames is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:59

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.03ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.02ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.02ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:47

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable frames is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:59

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.5ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.3ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.04ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.03ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mScore ca[0mn[31mnot[0m [31mbe t[0ma[31mk[0me[31mn[0m [31mun[0mt[31mil[0m [31mthe e[0mn[31md[0m [31mo[0mf[31m the g[0mame"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m t[32moo[0m [32mma[0mn[32my[0m f[32mr[0mame[32ms[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 14 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.04ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.07ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mScore ca[0mn[31mnot[0m [31mbe t[0ma[31mk[0me[31mn[0m [31mun[0mt[31mil[0m [31mthe e[0mn[31md[0m [31mo[0mf[31m the g[0mame"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m t[32moo[0m [32mma[0mn[32my[0m f[32mr[0mame[32ms[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 14 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.6ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.07ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.08ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.08ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid Game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.09ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "Invalid [31mG[0mame: too many frames"}
     [36mrhs:  [0m{:error, "Invalid [32mg[0mame: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 14 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.07ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.02ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.02ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.01ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.07ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 13 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.08ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.04ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 14 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.5ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.07ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.06ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 14 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.08ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.06ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 14 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.06ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.06ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 14 failures, 2 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.07ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.06ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.04ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 13 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.1ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.04ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 13 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.1ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.04ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.03ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.03ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.06ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 13 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s  * test can score all 0s (skipped)
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (13.7ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:135[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:148: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m

  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:151[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:164: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.4ms)[0m

  3) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:167[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:181: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m

  4) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:184[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:198: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.7ms)[0m

  5) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:201[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:216: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m

  6) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:219[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:233: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.2ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.02ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.02ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.04ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.1ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.01ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.01ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.2ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.6 seconds (0.6s on load, 0.02s on tests)
[31m24 tests, 6 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s  * test can score all 0s (skipped)
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (11.6ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:136[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:149: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m

  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:152[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:165: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m

  3) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:168[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:182: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (1.7ms)[0m

  4) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:185[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:199: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (1.3ms)[0m

  5) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:202[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:217: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

  6) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:220[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:234: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.09ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.01ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.1ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.01ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.1ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.7 seconds (0.7s on load, 0.02s on tests)
[31m24 tests, 6 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (9.4ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:16[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.1ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:33[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:46: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:50[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:63: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.2ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:80: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:84[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:97: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:101[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:115: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:119[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:132: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:136[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:149: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:152[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:165: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:168[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:182: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:185[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:199: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:202[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:217: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:220[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:234: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.04ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:316[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:329: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:333[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:347: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:351[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:364: (test)



Finished in 0.7 seconds (0.7s on load, 0.01s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (2.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:16[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 0
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m0
     [36mstacktrace:[0m
       bowling_test.exs:29: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.07ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:33[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m90
     [36mstacktrace:[0m
       bowling_test.exs:46: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:50[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:63: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m16
     [36mstacktrace:[0m
       bowling_test.exs:80: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.05ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:84[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m31
     [36mstacktrace:[0m
       bowling_test.exs:97: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:101[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:115: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:119[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:132: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:136[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:149: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:153[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:166: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:170[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:184: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:188[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:202: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:206[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:221: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:225[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:239: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:329[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:342: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:346[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:360: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.03ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:364[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:377: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s  * test can score all 0s (skipped)
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.2ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:136[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:149: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:50

[33mwarning: [0mvariable frames is unused
  bowling.exs:50

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:61

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s  * test can score all 0s (skipped)
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice[{0, 0}, {0}, {0, 0}, {0}, {0, 0}, {0}, {0, 0}, {0}, {0, 0}, {0}, {0, 0}, {0},
 {0, 0}, {0}, {0, 0}, {0}, {5, 3}, {5}, {10}]
  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (4.4ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:136[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:149: (test)

  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:50

[33mwarning: [0mvariable frames is unused
  bowling.exs:50

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:61

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s  * test can score all 0s (skipped)
  * test can score a game with no strikes or spares  * test can score a game with no strikes or spares (skipped)
  * test spare followed by all 0s is worth 10 points  * test spare followed by all 0s is worth 10 points (skipped)
  * test points scored in the roll after the spare are counted twice  * test points scored in the roll after the spare are counted twice (skipped)
  * test consecutive spares each get a one roll bonus  * test consecutive spares each get a one roll bonus (skipped)
  * test a spare in the last frame gets a one roll bonus that is counted once  * test a spare in the last frame gets a one roll bonus that is counted once (skipped)
  * test a strike earns ten points in frame with a single roll[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]
  * test a strike earns ten points in frame with a single roll (skipped)
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.0ms)[0m
  * test consecutive strikes each get the two roll bonus  * test consecutive strikes each get the two roll bonus (skipped)
  * test a strike in the last frame gets a two roll bonus that is counted once  * test a strike in the last frame gets a two roll bonus that is counted once (skipped)
  * test rolling a spare with the two roll bonus does not get a bonus roll  * test rolling a spare with the two roll bonus does not get a bonus roll (skipped)
  * test strikes with the two roll bonus do not get bonus rolls  * test strikes with the two roll bonus do not get bonus rolls (skipped)
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (skipped)
  * test all strikes is a perfect game  * test all strikes is a perfect game (skipped)
  * test rolls can not score negative points  * test rolls can not score negative points (skipped)
  * test a roll can not score more than 10 points  * test a roll can not score more than 10 points (skipped)
  * test two rolls in a frame can not score more than 10 points  * test two rolls in a frame can not score more than 10 points (skipped)
  * test two bonus rolls after a strike in the last frame can not score more than 10 points  * test two bonus rolls after a strike in the last frame can not score more than 10 points (skipped)
  * test an unstarted game can not be scored  * test an unstarted game can not be scored (skipped)
  * test score cannot be taken until the end of the game  * test score cannot be taken until the end of the game (skipped)
  * test a game with more than ten frames can not be scored  * test a game with more than ten frames can not be scored (skipped)
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (skipped)
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (skipped)


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:50

[33mwarning: [0mvariable frames is unused
  bowling.exs:50

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:61

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[32m  * test can score all 0s (1.7ms)[0m
  * test can score a game with no strikes or spares[{3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}]
[32m  * test can score a game with no strikes or spares (1.0ms)[0m
  * test spare followed by all 0s is worth 10 points[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {6, 4}]
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twice[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {3, 0}, {6, 4}]
[32m  * test points scored in the roll after the spare are counted twice (0.3ms)[0m
  * test consecutive spares each get a one roll bonus[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0}, {3, 7}, {5, 5}]
[32m  * test consecutive spares each get a one roll bonus (0.3ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[{7}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.5ms)[0m
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {10}]
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}]

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (4.4ms)[0m
  * test consecutive strikes each get the two roll bonus[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10}, {10}, {10}]
[32m  * test consecutive strikes each get the two roll bonus (3.3ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[{7, 1}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m
[{7, 3}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]
[{10}, {10}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:161[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:175: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
[{10}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:178[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:192: (test)

  * test strikes with the two roll bonus do not get bonus rolls[{10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}]
[31m  * test strikes with the two roll bonus do not get bonus rolls (0.3ms)[0m
[]
[{0}]

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:195[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:210: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.5ms)[0m
[{0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:213[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:227: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.2ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.02ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.04ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.5ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[{10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (1.7ms)[0m
[{10}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}]

  6) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:308[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.reduce_game('\n', 0, 0, 10)
       bowling_test.exs:321: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.2ms)[0m
[{7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}]

  7) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:324[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:338: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.4ms)[0m

  8) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:341[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:354: (test)



Finished in 0.1 seconds (0.1s on load, 0.02s on tests)
[31m24 tests, 8 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.5ms)[0m

  1) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:308[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.reduce_game('\n', 0, 0, 10)
       bowling_test.exs:321: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (1.1ms)[0m

  2) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:324[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:338: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:341[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:354: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.04ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.02ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.3ms)[0m

  1) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:308[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.reduce_game('\n', 0, 0, 10)
       bowling_test.exs:321: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (1.0ms)[0m

  2) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:324[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:338: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:341[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:354: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.09ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.02ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.02ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.02ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.02ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.01ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.02ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.1ms)[0m

  1) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.reduce_game/4[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.reduce_game('\n', 0, 0, 10)
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.8ms)[0m

  2) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.2ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:64

[33mwarning: [0mthis clause cannot match because a previous clause at line 60 always matches
  bowling.exs:64

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.8ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m

  2) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.06ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.04ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.3ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:62: syntax error before: ','
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.3ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.08ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.09ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.1ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (3.0ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.04ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.3ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.7ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.03ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.6ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.5ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.04ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.0ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.09ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.01ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.8ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.06ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.7ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.2ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.02ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.5ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:60

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.04ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.6ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (2.3ms)[0m

  1) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  2) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:61

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (2.4ms)[0m

  1) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:61

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (2.2ms)[0m

  1) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 1 failure[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:62

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.04ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m24 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mclauses for the same def should be grouped together, def roll/2 was previously defined (bowling.exs:6)
  bowling.exs:36

[33mwarning: [0mbodyless clause provided for nonexistent defp flatten/0
  bowling.exs:34

[33mwarning: [0mvariable game is unused
  bowling.exs:36

[33mwarning: [0mvariable roll is unused
  bowling.exs:36

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:48

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:49

[33mwarning: [0mvariable frames is unused
  bowling.exs:49

[33mwarning: [0mvariable bonuses is unused
  bowling.exs:62

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.05ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.05ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.09ms)[0m


Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[32m24 tests, 0 failures[0m

Randomized with seed 0
** (CompileError) bowling.exs:39: invalid args for &, expected an expression in the format of &Mod.fun/arity, &local/arity or a capture containing at least one argument as &1, got: :frame_score
    (elixir) expanding macro: Kernel.|>/2
    bowling.exs:40: Bowling.score/1
    (elixir) lib/code.ex:321: Code.load_file/2

** (CompileError) bowling.exs:39: invalid args for &, expected an expression in the format of &Mod.fun/arity, &local/arity or a capture containing at least one argument as &1, got: :frame_score
    (elixir) expanding macro: Kernel.|>/2
    bowling.exs:40: Bowling.score/1
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable m2 is unused
  bowling.exs:56

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (4.9ms)[0m

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.09ms)[0m

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.08ms)[0m

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m8[31m8[0m
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m7[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.09ms)[0m

  9) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m2[31m7[0m
     [36mrhs:  [0m2[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.07ms)[0m

 10) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m4[0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (6.5ms)[0m

 11) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 12) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 13) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 14) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

 15) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 16) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 17) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

 18) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 18 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:63

** (CompileError) bowling.exs:59: undefined function m2/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:63

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (2.2ms)[0m

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.04ms)[0m

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.09ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m8[31m8[0m
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m7[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m

  9) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m2[31m7[0m
     [36mrhs:  [0m2[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

 10) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m4[0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.9ms)[0m

 11) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 12) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.01ms)[0m

 13) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.01ms)[0m

 14) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 15) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

 16) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

 17) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.06ms)[0m

 18) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 18 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0sm1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
[32m  * test can score all 0s (1.5ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (2.8ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 2 m2 1
m1 1 m2 1
m1 2 m2 1
m1 1 m2 1

m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

m1 1 m2 1
  * test spare followed by all 0s is worth 10 pointsm1 1 m2 1
m1 1 m2 1
[32m  * test spare followed by all 0s is worth 10 points (0.3ms)[0m
m1 1 m2 1
  * test points scored in the roll after the spare are counted twicem1 1 m2 1
m1 1 m2 1
[31m  * test points scored in the roll after the spare are counted twice (7.1ms)[0m
m1 1 m2 1
m1 1 m2 1

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.5ms)[0m
m1 1 m2 1

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.5ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 3 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 3 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single rollm1 1 m2 1
[32m  * test a strike earns ten points in frame with a single roll (2.0ms)[0m
m1 4 m2 2
  * test points scored in the two rolls after a strike are counted twice as a bonusm1 2 m2 1
m1 1 m2 1
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (1.1ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 3 m2 2
m1 3 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.4ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 3 m2 2
m1 2 m2 1

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m8[31m8[0m
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

m1 1 m2 1
  * test a strike in the last frame gets a two roll bonus that is counted oncem1 1 m2 1
m1 1 m2 1
[31m  * test a strike in the last frame gets a two roll bonus that is counted once (1.1ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 4 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
  * test rolling a spare with the two roll bonus does not get a bonus rollm1 1 m2 1
m1 1 m2 1
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (1.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rollsm1 2 m2 1
[31m  * test strikes with the two roll bonus do not get bonus rolls (0.7ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m7[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.8ms)[0m

  9) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m2[31m7[0m
     [36mrhs:  [0m2[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.06ms)[0m

 10) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m4[0m30
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (3.3ms)[0m

 11) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.03ms)[0m

 12) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.03ms)[0m

 13) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 14) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.7ms)[0m

 15) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.8ms)[0m

 16) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.5ms)[0m

 17) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.9ms)[0m

 18) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.1s on load, 0.03s on tests)
[31m24 tests, 18 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0sm1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
[32m  * test can score all 0s (1.3ms)[0m
  * test can score a game with no strikes or sparesm1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
[31m  * test can score a game with no strikes or spares (2.7ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

m1 1 m2 1
  * test spare followed by all 0s is worth 10 pointsm1 1 m2 1
[32m  * test spare followed by all 0s is worth 10 points (0.4ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (8.7ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 2 m2 1
m1 1 m2 1
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 2 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 2 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 3 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 2 m2 2
m1 3 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.2ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 2 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 3 m2 2
m1 2 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted oncem1 2 m2 1
m1 1 m2 1
[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.2ms)[0m
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1
m1 1 m2 1

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m5[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.06ms)[0m

  9) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m2[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.6ms)[0m

 10) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 11) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 12) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 13) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.2ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.2ms)[0m

 15) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.4ms)[0m

 16) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.3ms)[0m

 17) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 17 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:66

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (3.1ms)[0m

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.07ms)[0m

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.05ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m5[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

  9) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m2[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (2.2ms)[0m

 10) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 11) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 12) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 13) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 15) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

 16) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

 17) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 17 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:66

Including tags: [:thisone]
Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (4.0ms)[0m

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:32[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:45: (test)

  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.08ms)[0m

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:64[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:77: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.08ms)[0m

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:80[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:93: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:96[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:110: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.09ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:129[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:142: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:145[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:158: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.08ms)[0m

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:161[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:175: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:195[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m5[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:210: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

  9) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:230[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m2[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:245: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.3ms)[0m

 10) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:248[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:250: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 11) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:253[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:255: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 12) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:280[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:282: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 13) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:285[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:288: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.09ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:291[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:305: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

 15) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:308[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:321: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 16) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:324[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:338: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.06ms)[0m

 17) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:341[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:354: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 17 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:66

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.2ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (3.5ms)[0m

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.05ms)[0m

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.08ms)[0m

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.04ms)[0m

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m5[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.02ms)[0m

  9) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m2[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.5ms)[0m

 10) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 11) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 12) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 13) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 15) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 16) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

 17) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 17 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:56

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[0, 0, 0, 0, 0, 0, 0, 0, 0]
'\t\t\t\t\t\t\t\t\t'
[32m  * test can score all 0s (4.9ms)[0m
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (7.6ms)[0m
[0, 0, 0, 0, 0, 0, 0, 0, 10]
[0, 0, 0, 0, 0, 0, 0, 3, 10]
[0, 0, 0, 0, 0, 0, 4, 10, 15]

  1) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 90
     [36mlhs:  [0m[31m81[0m
     [36mrhs:  [0m[32m90[0m
     [36mstacktrace:[0m
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.8ms)[0m
[10, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (14.0ms)[0m
[0, 0, 0, 0, 0, 0, 0, 0, 10]
[0, 0, 0, 0, 0, 0, 0, 8, 10]

  2) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.5ms)[0m
[0, 0, 0, 0, 0, 8, 10, 20, 30]

  3) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.0ms)[0m
[10, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[20, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  4) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m7[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m
[20, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  5) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m
[20, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]

  6) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (1.1ms)[0m
[]
[]

  7) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m1[31m0[0m
     [36mrhs:  [0m1[32m8[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (3.0ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[0, 0, 0, 0, 0, 0, 0, 0, 0]
[31m  * test strikes with the two roll bonus do not get bonus rolls (1.2ms)[0m
[20, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0]

  8) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m5[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.2ms)[0m

  9) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m2[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (3.9ms)[0m

 10) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.08ms)[0m

 11) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.06ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.09ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.2ms)[0m

 12) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.1ms)[0m

 13) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.7ms)[0m

 14) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.6ms)[0m

 15) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.3ms)[0m

 16) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.2ms)[0m

 17) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.05s on tests)
[31m24 tests, 17 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:43

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mthis clause cannot match because a previous clause at line 43 always matches
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:66

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (7.3ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.1ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{3, 6}, {3, 6}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.08ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{3, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.08ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{3, 7}, {5, 5}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.3ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{5, 3}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{10}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.09ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{10}, {10}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.05ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.04ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[[{0, 0}, {0, 0}]], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.03ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[[{0, 0}, {0, 0}], {0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:43: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:39: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:46

[33mwarning: [0mvariable f2 is unused
  bowling.exs:58

[33mwarning: [0mthis clause cannot match because a previous clause at line 46 always matches
  bowling.exs:58

[33mwarning: [0mvariable m2 is unused
  bowling.exs:69

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
[31m  * test can score all 0s (8.7ms)[0m
frame number 10
frame number 10
frame number 10
frame number 10
frame number 11
frame number 10
frame number 10
frame number 10
frame number 11
frame number 11
frame number 12
frame number 11
frame number 12

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.3ms)[0m
frame number 0
frame number 1
frame number 11
frame number 10
frame number 11
frame number 10

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{3, 6}, {3, 6}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{3, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{3, 7}, {5, 5}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (6.3ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.5ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{5, 3}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (1.9ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{10}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (2.7ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (4.7ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{10}, {10}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.02ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.1ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[[{0, 0}, {0, 0}]], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.1ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[[{0, 0}, {0, 0}], {0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.2ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.2ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.2ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.8ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:46: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.03s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:49

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mthis clause cannot match because a previous clause at line 49 always matches
  bowling.exs:61

[33mwarning: [0mvariable m2 is unused
  bowling.exs:72

Excluding tags: [:pending]


BowlingTest
frame number 10
  * test can score all 0schunks number 10
[31m  * test can score all 0s (18.4ms)[0m
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:28: (test)

frame number 10
  * test can score a game with no strikes or spareschunks number 10
[31m  * test can score a game with no strikes or spares (7.2ms)[0m
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:44: (test)

chunks number 11
  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (6.1ms)[0m
frame number 11
chunks number 11
frame number 12
chunks number 12
frame number 11
chunks number 11
frame number 12
chunks number 12

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twiceframe number 0
[31m  * test points scored in the roll after the spare are counted twice (16.2ms)[0m
chunks number 1
frame number 1
chunks number 1
frame number 11
chunks number 11
frame number 10
chunks number 10
frame number 11
chunks number 11

frame number 10
  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:76: (test)

chunks number 10
  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (15.0ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (7.9ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (12.2ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (7.2ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (7.1ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (20.5ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (14.1ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (24.3ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (11.0ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (4.8ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (2.1ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.03ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.1ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (23.3ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (24.3ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (15.4ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (10.6ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (11.8ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (4.0ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for :ok[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1636: Enum.reduce/3
       (elixir) lib/enum.ex:1251: Enum.map_reduce/3
       (elixir) lib/enum.ex:2441: Enum.with_index/2
       bowling.exs:44: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.5 seconds (0.2s on load, 0.2s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:50

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mthis clause cannot match because a previous clause at line 50 always matches
  bowling.exs:62

[33mwarning: [0mvariable m2 is unused
  bowling.exs:73

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
chunks number 10
frame number 10
[31m  * test can score all 0s (5.1ms)[0m
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:28: (test)

frame number 10
  * test can score a game with no strikes or spareschunks number 10
[31m  * test can score a game with no strikes or spares (0.2ms)[0m
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 11

chunks number 11
  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{3, 6}, {3, 6}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
frame number 12
chunks number 12
frame number 11
chunks number 11
frame number 12
chunks number 12

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.4ms)[0m
frame number 0
chunks number 1
frame number 1
chunks number 1
frame number 11
chunks number 11

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{3, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (3.1ms)[0m
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 10
chunks number 10

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{3, 7}, {5, 5}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.7ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{5, 3}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{10}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{10}, {10}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.02ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.1ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[[{0, 0}, {0, 0}]], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.1ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[[{0, 0}, {0, 0}], {0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:50

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mthis clause cannot match because a previous clause at line 50 always matches
  bowling.exs:62

[33mwarning: [0mvariable m2 is unused
  bowling.exs:73

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
chunks number 10
[31m  * test can score all 0s (5.2ms)[0m
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10

frame number 11
  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spareschunks number 11
[31m  * test can score a game with no strikes or spares (0.1ms)[0m
frame number 11
chunks number 11
frame number 12
chunks number 12
frame number 11
chunks number 11
frame number 12
chunks number 12

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{3, 6}, {3, 6}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 pointsframe number 0
chunks number 1
[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
frame number 1
chunks number 1
frame number 11
chunks number 11
frame number 10
chunks number 10
frame number 11
chunks number 11

frame number 10
  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twicechunks number 10
[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{3, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (1.1ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{3, 7}, {5, 5}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.9ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (2.3ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (1.2ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{5, 3}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{10}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.09ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{10}, {10}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.01ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.05ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[[{0, 0}, {0, 0}]], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.09ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[[{0, 0}, {0, 0}], {0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.2ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.5ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.3ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:50: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:51

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mthis clause cannot match because a previous clause at line 51 always matches
  bowling.exs:63

[33mwarning: [0mvariable m2 is unused
  bowling.exs:74

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
chunks number 10
frame number 10
chunks number 10
[31m  * test can score all 0s (7.4ms)[0m
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or sparesframe number 11
chunks number 11
[31m  * test can score a game with no strikes or spares (1.6ms)[0m
frame number 12
chunks number 12
frame number 11
chunks number 11
frame number 12
chunks number 12
frame number 0
chunks number 1
frame number 1
chunks number 1
frame number 11
chunks number 11

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 6}, {3, 6}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (1.0ms)[0m
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 10
chunks number 10

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.0ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (1.4ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 7}, {5, 5}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (1.4ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (1.6ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.4ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{5, 3}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (2.8ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{10}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{10}, {10}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.02ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.08ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[[{0, 0}, {0, 0}]], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.07ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[[{0, 0}, {0, 0}], {0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.7ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:51

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mthis clause cannot match because a previous clause at line 51 always matches
  bowling.exs:63

[33mwarning: [0mvariable m2 is unused
  bowling.exs:74

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
chunks number 10
frame number 10
chunks number 10
[31m  * test can score all 0s (22.6ms)[0m
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 10
chunks number 10
frame number 10
chunks number 10

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:28: (test)

frame number 10
  * test can score a game with no strikes or spareschunks number 10
[31m  * test can score a game with no strikes or spares (0.1ms)[0m
frame number 11
chunks number 11
frame number 11
chunks number 11
frame number 12
chunks number 12
frame number 11
chunks number 11
frame number 12
chunks number 12

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 6}, {3, 6}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 pointsframe number 0
chunks number 1
[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
frame number 1
chunks number 1
frame number 11
chunks number 11
frame number 10
chunks number 10
frame number 11
chunks number 11
frame number 10
chunks number 10

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 0}, {6, 4}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (2.0ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 7}, {5, 5}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.2ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (6.8ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (5.2ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{5, 3}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{10}, {10}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{10}, {10}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.02ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.1ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[[{0, 0}, {0, 0}]], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.07ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[[{0, 0}, {0, 0}], {0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 9})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.04s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:51

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mthis clause cannot match because a previous clause at line 51 always matches
  bowling.exs:63

[33mwarning: [0mvariable m2 is unused
  bowling.exs:74

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
chunks number 11
[31m  * test can score all 0s (6.8ms)[0m
frame number 10
chunks number 11
frame number 10
chunks number 11
frame number 10
chunks number 11
frame number 10
chunks number 11
frame number 11
chunks number 12

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or sparesframe number 10
chunks number 11
[31m  * test can score a game with no strikes or spares (0.1ms)[0m
frame number 10
chunks number 11
frame number 10
chunks number 11
frame number 11
chunks number 12
frame number 11
chunks number 12
frame number 12
chunks number 13
frame number 11
chunks number 12
frame number 12
chunks number 13

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 6}, {3, 6}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (1.4ms)[0m
frame number 0
chunks number 1
frame number 1
chunks number 2
frame number 11
chunks number 12
frame number 10
chunks number 11
frame number 11
chunks number 12
frame number 10
chunks number 11

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (1.4ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (3.0ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{3, 7}, {5, 5}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.8ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{5, 3}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{10}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{10}, {10}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.01ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.06ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.06ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0}], 1})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:51: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:47

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mthis clause cannot match because a previous clause at line 47 always matches
  bowling.exs:59

[33mwarning: [0mvariable m2 is unused
  bowling.exs:70

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
frame number 10
[31m  * test can score all 0s (8.9ms)[0m
frame number 10
frame number 10
frame number 10
frame number 11
frame number 10
frame number 10
frame number 10
frame number 11
frame number 11
frame number 12
frame number 11
frame number 12

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or sparesframe number 0
[31m  * test can score a game with no strikes or spares (0.3ms)[0m
frame number 1
frame number 11
frame number 10
frame number 11
frame number 10

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{3, 6}, {3, 6}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{3, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{3, 7}, {5, 5}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (3.1ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{5, 3}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.6ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{10}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (3.2ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (3.6ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (2.2ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (2.0ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{10}, {10}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.02ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.05ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.1ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0}], 1})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.09ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.03s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:47

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mthis clause cannot match because a previous clause at line 47 always matches
  bowling.exs:59

[33mwarning: [0mvariable m2 is unused
  bowling.exs:70

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
frame number 10
[31m  * test can score all 0s (5.6ms)[0m
frame number 10
frame number 10
frame number 10
frame number 11
frame number 10
frame number 10
frame number 10
frame number 11

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or sparesframe number 11
[31m  * test can score a game with no strikes or spares (0.1ms)[0m
frame number 12

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{3, 6}, {3, 6}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
frame number 11
frame number 12
frame number 0
frame number 1
frame number 11
frame number 10
frame number 11
frame number 10

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{3, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (2.0ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{3, 7}, {5, 5}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.2ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (1.3ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.3ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{5, 3}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{10}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (5.4ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.5ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.4ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (1.6ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{10}, {10}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.01ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.07ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.08ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0}], 1})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.6ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.3ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.3ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.3ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:47: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:42: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:48

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mthis clause cannot match because a previous clause at line 48 always matches
  bowling.exs:60

[33mwarning: [0mvariable m2 is unused
  bowling.exs:71

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]
[31m  * test can score all 0s (4.2ms)[0m
frame number 10
[{0, 0}, {0, 0}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}, {3, 6}]
frame number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {6, 4}]
frame number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {3, 0}, {6, 4}]
frame number 10

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:28: (test)

[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0},
 {3, 7}, {5, 5}]
  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.3ms)[0m
frame number 11
[{0, 0}, {0, 0}, {7}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{3, 6}, {3, 6}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (3.6ms)[0m
frame number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {10}]
frame number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {5, 3}, {10}]
frame number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10},
 {10}, {10}]
frame number 11
[{0, 0}, {0, 0}, {7, 1}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
frame number 11
[{0, 0}, {0, 0}, {7, 3}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
frame number 12

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (1.2ms)[0m
[{0, 0}, {0, 0}, {10}, {10}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}, {0, 0}]

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{3, 0}, {6, 4}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (3.1ms)[0m
frame number 11
[{0, 0}, {0, 0}, {10}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
frame number 12
[{0, 0}, {0, 0}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10},
 {10}, {10}]
frame number 0
[{0, 0}, {0, 0}]
frame number 1
[{0, 0}, {0, 0}, {0}]
frame number 11
[{0, 0}, {0, 0}, {0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
frame number 10
[{0, 0}, {0, 0}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]
frame number 11
[{0, 0}, {0, 0}, {10}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
frame number 10
[{0, 0}, {0, 0}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{3, 7}, {5, 5}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (0.9ms)[0m

  6) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.4ms)[0m

  7) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.3ms)[0m

  8) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{5, 3}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.3ms)[0m

  9) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{10}, {10}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.3ms)[0m

 10) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.6ms)[0m

 11) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (1.6ms)[0m

 12) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.6ms)[0m

 13) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.4ms)[0m

 14) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{10}, {10}], 12})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (0.03ms)[0m

 15) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 16) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.1ms)[0m

 17) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 0})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.1ms)[0m

 18) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0}], 1})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.5ms)[0m

 19) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.4ms)[0m

 20) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.5ms)[0m

 21) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 11})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.3ms)[0m

 22) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.frame_score/1[0m
     [36mstacktrace:[0m
       bowling.exs:48: Bowling.frame_score({[{0, 0}, {0, 0}], 10})
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       (elixir) lib/enum.ex:1184: Enum."-map/2-lists^map/1-0-"/2
       bowling.exs:43: Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m24 tests, 22 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:48

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mthis clause cannot match because a previous clause at line 48 always matches
  bowling.exs:60

[33mwarning: [0mvariable m2 is unused
  bowling.exs:71

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sframe number 10
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 10
[32m  * test can score all 0s (5.4ms)[0m
  * test can score a game with no strikes or spares[{0, 0}, {0, 0}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6}, {3, 6},
 {3, 6}, {3, 6}]
'\t\t\t\t\t\t\t\t\t\t'
frame number 10
[32m  * test can score a game with no strikes or spares (5.0ms)[0m
  * test spare followed by all 0s is worth 10 points[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {6, 4}]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 10]
frame number 10
[32m  * test spare followed by all 0s is worth 10 points (0.8ms)[0m
  * test points scored in the roll after the spare are counted twice[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {3, 0}, {6, 4}]
[0, 0, 0, 0, 0, 0, 0, 0, 3, 10]
frame number 10
[31m  * test points scored in the roll after the spare are counted twice (14.1ms)[0m
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {4, 0},
 {3, 7}, {5, 5}]
[0, 0, 0, 0, 0, 0, 0, 4, 10, 15]
frame number 11
[{0, 0}, {0, 0}, {7}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[7, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[31m  * test consecutive spares each get a one roll bonus (2.4ms)[0m
frame number 10

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (17.9ms)[0m
  * test a strike earns ten points in frame with a single roll[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {10}]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 10]
frame number 10
[32m  * test a strike earns ten points in frame with a single roll (0.8ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {5, 3}, {10}]
[0, 0, 0, 0, 0, 0, 0, 0, 8, 10]
frame number 10
[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.5ms)[0m
[{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {5, 3}, {10},
 {10}, {10}]

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

[0, 0, 0, 0, 0, 0, 8, 10, 20, 30]
  * test consecutive strikes each get the two roll bonusframe number 11
[31m  * test consecutive strikes each get the two roll bonus (1.3ms)[0m
[{0, 0}, {0, 0}, {7, 1}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
[8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 11

[{0, 0}, {0, 0}, {7, 3}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (1.7ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 12
[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.7ms)[0m
[{0, 0}, {0, 0}, {10}, {10}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}, {0, 0}]
[10, 20, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  5) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

frame number 11
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (1.1ms)[0m
[{0, 0}, {0, 0}, {10}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
[10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 12

  6) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[{0, 0}, {0, 0}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10}, {10},
 {10}, {10}]
[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (1.1ms)[0m
[10, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]
frame number 0
[{0, 0}, {0, 0}]
[]

  7) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

frame number 1
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (1.2ms)[0m
[{0, 0}, {0, 0}, {0}]
[0]
frame number 11
[{0, 0}, {0, 0}, {0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 10
[{0, 0}, {0, 0}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]

  8) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (4.3ms)[0m
[10, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 11
[{0, 0}, {0, 0}, {10}, {10}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}, {0, 0}]
[10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0]
frame number 10
[{0, 0}, {0, 0}, {7, 3}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0},
 {0, 0}, {0, 0}]
[10, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  9) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.04ms)[0m

 10) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.05ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.08ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.8ms)[0m

 11) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (2.6ms)[0m

 12) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (1.7ms)[0m

 13) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (1.9ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (3.1ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (2.5ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.08s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:56

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (12.8ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.09ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m

  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m

  5) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m

  6) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m

  7) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

  8) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (2.9ms)[0m

  9) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 10) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.02ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 11) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.01ms)[0m

 12) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.07ms)[0m

 13) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.06ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:56

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.09ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.9ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (3.0ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m

  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m

  5) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.2ms)[0m

  6) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m

  7) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.02ms)[0m

  8) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.3ms)[0m

  9) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 10) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 11) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 12) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 13) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:48: syntax error before: ';'
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mthe variable "m1" is unsafe as it has been set inside a case/cond/receive/if/&&/||. Please explicitly return the variable value instead. For example:

    case int do
      1 -> atom = :one
      2 -> atom = :two
    end

should be written as

    atom =
      case int do
        1 -> :one
        2 -> :two
      end

Unsafe variable found at:
  bowling.exs:58

[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable m2 is unused
  bowling.exs:72

** (CompileError) bowling.exs:50: undefined function enum/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mthe variable "m1" is unsafe as it has been set inside a case/cond/receive/if/&&/||. Please explicitly return the variable value instead. For example:

    case int do
      1 -> atom = :one
      2 -> atom = :two
    end

should be written as

    atom =
      case int do
        1 -> :one
        2 -> :two
      end

Unsafe variable found at:
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mvariable m2 is unused
  bowling.exs:74

** (CompileError) bowling.exs:50: undefined function enum/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mthe variable "m1" is unsafe as it has been set inside a case/cond/receive/if/&&/||. Please explicitly return the variable value instead. For example:

    case int do
      1 -> atom = :one
      2 -> atom = :two
    end

should be written as

    atom =
      case int do
        1 -> :one
        2 -> :two
      end

Unsafe variable found at:
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:63

[33mwarning: [0mvariable m2 is unused
  bowling.exs:74

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.6ms)[0m
gotta spare
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (6.2ms)[0m
gotta spare
gotta spare
gotta spare
gotta spare

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.09ms)[0m

  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.2ms)[0m

  5) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.09ms)[0m

  6) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m

  7) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.07ms)[0m

  8) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (4.3ms)[0m

  9) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 10) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 11) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 12) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

 13) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.09ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mthe variable "m1" is unsafe as it has been set inside a case/cond/receive/if/&&/||. Please explicitly return the variable value instead. For example:

    case int do
      1 -> atom = :one
      2 -> atom = :two
    end

should be written as

    atom =
      case int do
        1 -> :one
        2 -> :two
      end

Unsafe variable found at:
  bowling.exs:58

[33mwarning: [0mthe variable "m1" is unsafe as it has been set inside a case/cond/receive/if/&&/||. Please explicitly return the variable value instead. For example:

    case int do
      1 -> atom = :one
      2 -> atom = :two
    end

should be written as

    atom =
      case int do
        1 -> :one
        2 -> :two
      end

Unsafe variable found at:
  bowling.exs:63

[33mwarning: [0mvariable i is unused
  bowling.exs:45

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mthis clause cannot match because a previous clause at line 45 always matches
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:77

Excluding tags: [:pending]


BowlingTest
scoring games
  * test can score all 0sm1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
[32m  * test can score all 0s (1.9ms)[0m
m1 1
  * test can score a game with no strikes or sparesm1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
[32m  * test can score a game with no strikes or spares (0.2ms)[0m
m1 1
  * test spare followed by all 0s is worth 10 pointsm1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
[32m  * test spare followed by all 0s is worth 10 points (0.2ms)[0m
m1 1
m1 1
  * test points scored in the roll after the spare are counted twicem1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
[31m  * test points scored in the roll after the spare are counted twice (4.0ms)[0m
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
gotta spare
m1 2
scoring games
m1 1
m1 1
gotta spare
m1 2
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

m1 1
m1 1
  * test consecutive spares each get a one roll bonusm1 1
m1 1
m1 1
[31m  * test consecutive spares each get a one roll bonus (0.4ms)[0m
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 2
m1 3
scoring games
m1 1
m1 1
m1 2
m1 2
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

m1 1
gotta spare
  * test a spare in the last frame gets a one roll bonus that is counted oncem1 2
m1 2
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.3ms)[0m
m1 2
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (12.9ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (1.4ms)[0m
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
m1 2
m1 3
m1 3
m1 2
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.2ms)[0m
scoring games
m1 1
m1 2
gotta spare
m1 3
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1

  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.9ms)[0m

  5) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

m1 2
  * test strikes with the two roll bonus do not get bonus rollsm1 3
m1 3
[31m  * test strikes with the two roll bonus do not get bonus rolls (0.5ms)[0m
m1 3
m1 3
m1 3
m1 3
m1 3
m1 3
m1 3
m1 3
scoring games
scoring games

  6) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

m1 1
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
scoring games
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
m1 2
m1 2
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
scoring games
m1 1
m1 2
m1 3
m1 2
m1 1

  7) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

m1 1
  * test all strikes is a perfect gamem1 1
m1 1
m1 1
[31m  * test all strikes is a perfect game (1.2ms)[0m
m1 1
m1 1
scoring games
m1 1
gotta spare
m1 2
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1
m1 1

  8) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (5.9ms)[0m

  9) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

 10) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.04ms)[0m

 11) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.1ms)[0m

 12) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.4ms)[0m

 13) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.3ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.3ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.2ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.03s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:56

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (2.7ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.09ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.08ms)[0m

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m

  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m

  5) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m

  6) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m

  7) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

  8) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (2.0ms)[0m

  9) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

 10) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

 11) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.01ms)[0m

 12) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.04ms)[0m

 13) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 14) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 15) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.03ms)[0m

 16) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 16 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:56

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.08ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (4.0ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m[31m24[0m
     [36mrhs:  [0m[32m17[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.08ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

  6) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.4ms)[0m

  7) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

  8) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  9) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 10) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

 11) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 12) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

 13) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

 14) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 14 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mthis clause cannot match because a previous clause at line 44 always matches
  bowling.exs:56

[33mwarning: [0mvariable m2 is unused
  bowling.exs:68

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.08ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.7ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m[31m24[0m
     [36mrhs:  [0m[32m17[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.2ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.2ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.09ms)[0m

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.06ms)[0m

  6) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (2.3ms)[0m

  7) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

  8) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  9) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 10) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

 11) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 12) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 13) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

 14) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.01s on tests)
[31m24 tests, 14 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable i is unused
  bowling.exs:44

[33mwarning: [0mvariable m2 is unused
  bowling.exs:68

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.6ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m[31m24[0m
     [36mrhs:  [0m[32m17[0m
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.08ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m[31m26[0m
     [36mrhs:  [0m[32m18[0m
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.08ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.05ms)[0m

  6) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m3[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.0ms)[0m

  7) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

  8) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  9) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

 10) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.05ms)[0m

 11) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m

 12) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

 13) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m30
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m

 14) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 14 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f2 is unused
  bowling.exs:44

[33mwarning: [0mvariable i is unused
  bowling.exs:52

[33mwarning: [0mvariable m2 is unused
  bowling.exs:68

Excluding tags: [:pending]


BowlingTest
  * test can score all 0sworking on frame 11
working on frame 11
working on frame 11
working on frame 11
[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twiceworking on frame 11
[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted onceworking on frame 11
[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.09ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.08ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.08ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (2.4ms)[0m
working on frame 11
working on frame 11

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m5[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.08ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m2[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.4ms)[0m

  3) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

  4) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  5) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  6) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

  7) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  8) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

  9) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

 10) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 10 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f2 is unused
  bowling.exs:44

[33mwarning: [0mvariable i is unused
  bowling.exs:51

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (3.5ms)[0m

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m4[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.06ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m3[31m1[0m0
     [36mrhs:  [0m30[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.3ms)[0m

  3) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

  4) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  5) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  6) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

  7) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  8) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  9) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m

 10) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 10 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:44

[33mwarning: [0mvariable i is unused
  bowling.exs:51

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

** (CompileError) bowling.exs:48: undefined function m1/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable f1 is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:44

[33mwarning: [0mvariable i is unused
  bowling.exs:51

[33mwarning: [0mvariable m2 is unused
  bowling.exs:67

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.04ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (2.3ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m29[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[31m  * test rolls can not score negative points (1.2ms)[0m

  2) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.01ms)[0m

  3) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  4) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  5) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

  6) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  7) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  8) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  9) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 9 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:44

[33mwarning: [0mvariable f2 is unused
  bowling.exs:48

[33mwarning: [0mvariable i is unused
  bowling.exs:55

[33mwarning: [0mvariable m2 is unused
  bowling.exs:71

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.08ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.08ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[31m  * test rolls can not score negative points (2.7ms)[0m

  1) test rolls can not score negative points (BowlingTest)
     [1m[30mbowling_test.exs:247[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], -1)
       bowling_test.exs:249: (test)

  * test a roll can not score more than 10 points[31m  * test a roll can not score more than 10 points (0.02ms)[0m

  2) test a roll can not score more than 10 points (BowlingTest)
     [1m[30mbowling_test.exs:252[0m
     [31m** (FunctionClauseError) no function clause matching in Bowling.roll/2[0m
     [36mstacktrace:[0m
       bowling.exs:6: Bowling.roll([], 11)
       bowling_test.exs:254: (test)

  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (1.0ms)[0m

  3) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  4) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

  5) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  6) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  7) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  8) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 8 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:48

[33mwarning: [0mvariable f2 is unused
  bowling.exs:48

[33mwarning: [0mvariable f2 is unused
  bowling.exs:52

[33mwarning: [0mvariable i is unused
  bowling.exs:59

[33mwarning: [0mvariable m2 is unused
  bowling.exs:75

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (2.6ms)[0m

  1) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.03ms)[0m

  2) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.09ms)[0m

  3) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  4) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  5) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  6) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:53

[33mwarning: [0mvariable f2 is unused
  bowling.exs:53

[33mwarning: [0mvariable f2 is unused
  bowling.exs:57

[33mwarning: [0mvariable i is unused
  bowling.exs:64

[33mwarning: [0mvariable m2 is unused
  bowling.exs:80

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.6ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.08ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.04ms)[0m

  6) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "Pins must have a value from 0 to 10"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.02ms)[0m

  7) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  8) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.07ms)[0m

  9) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mPi[0mn[31ms[0m [31mmust h[0ma[31mv[0me [31ma[0m [31mv[0ma[31mlue[0m fr[31mo[0mm[31m 0 to 10[0m"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m [32mtoo[0m [32mm[0ma[32mny[0m fr[32ma[0mm[32mes[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 10) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

 11) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mPins[0m [31mmus[0mt [31mhav[0me a [31mval[0mue [31mfr[0mo[31mm[0m [31m0 [0mt[31mo[0m [31m10[0m"}
     [36mrhs:  [0m{:error, "[32mScore[0m [32mcanno[0mt [32mb[0me [32mt[0ma[32mken[0m u[32mntil th[0me [32mend [0mo[32mf[0m t[32mhe[0m [32mgame[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

 12) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 12 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:53

[33mwarning: [0mvariable f2 is unused
  bowling.exs:53

[33mwarning: [0mvariable f2 is unused
  bowling.exs:57

[33mwarning: [0mvariable i is unused
  bowling.exs:64

[33mwarning: [0mvariable m2 is unused
  bowling.exs:80

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (2.2ms)[0m

  1) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mPins[0m [31mmus[0mt [31mhav[0me a [31mval[0mue [31mfr[0mo[31mm[0m [31m0 [0mt[31mo[0m [31m10[0m"}
     [36mrhs:  [0m{:error, "[32mScore[0m [32mcanno[0mt [32mb[0me [32mt[0ma[32mken[0m u[32mntil th[0me [32mend [0mo[32mf[0m t[32mhe[0m [32mgame[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  2) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mPins[0m [31mmus[0mt [31mhav[0me a [31mval[0mue [31mfr[0mo[31mm[0m [31m0 [0mt[31mo[0m [31m10[0m"}
     [36mrhs:  [0m{:error, "[32mScore[0m [32mcanno[0mt [32mb[0me [32mt[0ma[32mken[0m u[32mntil th[0me [32mend [0mo[32mf[0m t[32mhe[0m [32mgame[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.09ms)[0m

  3) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  4) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  5) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  6) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:53

[33mwarning: [0mvariable f2 is unused
  bowling.exs:53

[33mwarning: [0mvariable f2 is unused
  bowling.exs:57

[33mwarning: [0mvariable i is unused
  bowling.exs:64

[33mwarning: [0mvariable m2 is unused
  bowling.exs:80

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.3ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
** (CompileError) bowling.exs:45: invalid expression in guard
    (elixir) expanding macro: Kernel.&&/2
    bowling.exs:45: Bowling.score_game/1
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable f1 is unused
  bowling.exs:54

[33mwarning: [0mvariable f2 is unused
  bowling.exs:54

[33mwarning: [0mvariable f2 is unused
  bowling.exs:58

[33mwarning: [0mvariable i is unused
  bowling.exs:65

[33mwarning: [0mvariable m2 is unused
  bowling.exs:81

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.08ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (4.4ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

  2) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

  3) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

  4) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.09ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:54

[33mwarning: [0mvariable f2 is unused
  bowling.exs:54

[33mwarning: [0mvariable f2 is unused
  bowling.exs:58

[33mwarning: [0mvariable i is unused
  bowling.exs:65

[33mwarning: [0mvariable m2 is unused
  bowling.exs:81

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.09ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.08ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.7ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:54

[33mwarning: [0mvariable f2 is unused
  bowling.exs:54

[33mwarning: [0mvariable f2 is unused
  bowling.exs:58

[33mwarning: [0mvariable i is unused
  bowling.exs:65

[33mwarning: [0mvariable m2 is unused
  bowling.exs:81

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.08ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.5ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.09ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.2ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (1.9ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.09ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.0ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.5ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.5ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.09ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.04ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable r1 is unused
  bowling.exs:46

[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.7ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.08ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable r1 is unused
  bowling.exs:46

[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.3ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.06ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.09ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.1 seconds (0.1s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable r1 is unused
  bowling.exs:46

[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.7ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.08ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.06ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable r1 is unused
  bowling.exs:46

[33mwarning: [0mvariable r1 is unused
  bowling.exs:47

[33mwarning: [0mvariable f1 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:67

[33mwarning: [0mvariable m2 is unused
  bowling.exs:83

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.09ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.09ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.09ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (13.6ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.09ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.08ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

  2) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.06ms)[0m

  3) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.07ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.02ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.1ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

  4) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.2ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.02s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable r1 is unused
  bowling.exs:45

[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.09ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (3.4ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.09ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.09ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.07ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  3) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:46

[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (5.1ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

  4) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:45

[33mwarning: [0mvariable f1 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:55

[33mwarning: [0mvariable f2 is unused
  bowling.exs:59

[33mwarning: [0mvariable i is unused
  bowling.exs:66

[33mwarning: [0mvariable m2 is unused
  bowling.exs:82

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.04ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.03ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.1ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.08ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.02ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

  4) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.02ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.03ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:67

[33mwarning: [0mvariable m2 is unused
  bowling.exs:83

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[31m  * test can score all 0s (6.2ms)[0m

  1) test can score all 0s (BowlingTest)
     [1m[30mbowling_test.exs:15[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:28: (test)

  * test can score a game with no strikes or spares[31m  * test can score a game with no strikes or spares (0.1ms)[0m

  2) test can score a game with no strikes or spares (BowlingTest)
     [1m[30mbowling_test.exs:31[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:44: (test)

  * test spare followed by all 0s is worth 10 points[31m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m

  3) test spare followed by all 0s is worth 10 points (BowlingTest)
     [1m[30mbowling_test.exs:47[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:60: (test)

  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (0.08ms)[0m

  4) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  5) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m

  6) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m

  7) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.04ms)[0m

  8) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.01ms)[0m

  9) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.01ms)[0m

 10) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (3.3ms)[0m

 11) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

 12) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.09ms)[0m

 13) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.04ms)[0m

 14) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31m** (CondClauseError) no cond clause evaluated to a true value[0m
     [36mstacktrace:[0m
       Bowling.score/1
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 14 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:67

[33mwarning: [0mvariable m2 is unused
  bowling.exs:83

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.1ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.05ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.08ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.07ms)[0m

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.04ms)[0m

  6) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (0.01ms)[0m

  7) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.01ms)[0m

  8) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.06ms)[0m

  9) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mScore ca[0mn[31mnot[0m [31mbe t[0ma[31mk[0me[31mn[0m [31mun[0mt[31mil[0m [31mthe e[0mn[31md[0m [31mo[0mf[31m the g[0mame"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m t[32moo[0m [32mma[0mn[32my[0m f[32mr[0mame[32ms[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

 10) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.03ms)[0m

 11) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m24 tests, 11 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:67

[33mwarning: [0mvariable m2 is unused
  bowling.exs:83

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.09ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.04ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.04ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.0ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:56

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mvariable i is unused
  bowling.exs:67

[33mwarning: [0mvariable m2 is unused
  bowling.exs:83

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.08ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.08ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.08ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.07ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (3.7ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:43: unexpected token: ")". "{" starting at line 43 is missing terminator "}"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) bowling.exs:43: unexpected token: ")". "do" starting at line 41 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable f1 is unused
  bowling.exs:57

[33mwarning: [0mvariable f2 is unused
  bowling.exs:57

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable i is unused
  bowling.exs:68

[33mwarning: [0mvariable m2 is unused
  bowling.exs:84

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[31m  * test a spare in the last frame gets a one roll bonus that is counted once (2.9ms)[0m

  1) test a spare in the last frame gets a one roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:95[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 17
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m17
     [36mstacktrace:[0m
       bowling_test.exs:109: (test)

  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m

  2) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

  3) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m

  4) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m

  5) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.03ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.05ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  6) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  7) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m{:error, "[31mInv[0ma[31mlid[0m [31mg[0ma[31mm[0me[31m:[0m t[31moo[0m [31mma[0mn[31my[0m f[31mr[0mame[31ms[0m"}
     [36mrhs:  [0m{:error, "[32mScore c[0ma[32mnnot[0m [32mbe t[0ma[32mk[0me[32mn[0m [32mun[0mt[32mil[0m [32mthe e[0mn[32md[0m [32mo[0mf[32m the g[0mame"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  8) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m24 tests, 8 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame10 is unused
  bowling.exs:41

[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable frame12 is unused
  bowling.exs:43

[33mwarning: [0mvariable f1 is unused
  bowling.exs:60

[33mwarning: [0mvariable f2 is unused
  bowling.exs:60

[33mwarning: [0mvariable f2 is unused
  bowling.exs:64

[33mwarning: [0mvariable i is unused
  bowling.exs:71

[33mwarning: [0mvariable m2 is unused
  bowling.exs:87

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.2ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.09ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.01ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.3ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

  2) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.7ms)[0m

  3) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:65

[33mwarning: [0mvariable i is unused
  bowling.exs:72

[33mwarning: [0mvariable m2 is unused
  bowling.exs:88

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (1.9ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.09ms)[0m

  2) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

  3) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m

  4) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:65

[33mwarning: [0mvariable i is unused
  bowling.exs:72

[33mwarning: [0mvariable m2 is unused
  bowling.exs:88

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.07ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.08ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.05ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.09ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (3.0ms)[0m

  1) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

  2) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  3) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m

  4) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:65

[33mwarning: [0mvariable i is unused
  bowling.exs:72

[33mwarning: [0mvariable m2 is unused
  bowling.exs:88

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.06ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[31m  * test a strike earns ten points in frame with a single roll (3.2ms)[0m

  1) test a strike earns ten points in frame with a single roll (BowlingTest)
     [1m[30mbowling_test.exs:112[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 10
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m10
     [36mstacktrace:[0m
       bowling_test.exs:125: (test)

  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.4ms)[0m

  2) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m26
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m

  3) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m81
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.04ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.06ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.04ms)[0m

  4) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m

  5) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m

  6) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.04ms)[0m

  7) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 7 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:65

[33mwarning: [0mvariable i is unused
  bowling.exs:72

[33mwarning: [0mvariable m2 is unused
  bowling.exs:88

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.04ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[31m  * test points scored in the roll after the spare are counted twice (3.5ms)[0m

  1) test points scored in the roll after the spare are counted twice (BowlingTest)
     [1m[30mbowling_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 16
     [36mlhs:  [0m1[31m3[0m
     [36mrhs:  [0m1[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:76: (test)

  * test consecutive spares each get a one roll bonus[31m  * test consecutive spares each get a one roll bonus (0.1ms)[0m

  2) test consecutive spares each get a one roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 31
     [36mlhs:  [0m[31m29[0m
     [36mrhs:  [0m[32m31[0m
     [36mstacktrace:[0m
       bowling_test.exs:92: (test)

  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.09ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.08ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m

  3) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m[31m18[0m
     [36mrhs:  [0m[32m26[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.6ms)[0m

  4) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m6[0m8
     [36mrhs:  [0m8[32m1[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (0.1ms)[0m

  5) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m

  6) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m

  7) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m[31m6[0m0
     [36mrhs:  [0m[32m3[0m0
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[31m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.06ms)[0m

  8) test a strike with the one roll bonus after a spare in the last frame does not get a bonus (BowlingTest)
     [1m[30mbowling_test.exs:212[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m[31m3[0m0
     [36mrhs:  [0m[32m2[0m0
     [36mstacktrace:[0m
       bowling_test.exs:226: (test)

  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

  9) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

 10) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m24 tests, 10 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:65

[33mwarning: [0mvariable i is unused
  bowling.exs:72

[33mwarning: [0mvariable m2 is unused
  bowling.exs:88

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.08ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.06ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.06ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.08ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (6.6ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.2ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.1ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.01ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.1ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.01ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.01ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.2ms)[0m

  3) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:61

[33mwarning: [0mvariable f2 is unused
  bowling.exs:65

[33mwarning: [0mvariable i is unused
  bowling.exs:72

[33mwarning: [0mvariable m2 is unused
  bowling.exs:88

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.04ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.04ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.03ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.03ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (1.9ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.1ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.08ms)[0m

  3) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.03ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.04ms)[0m

  4) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 4 failures[0m

Randomized with seed 0
** (SyntaxError) bowling.exs:46: unexpected token: ")". "do" starting at line 45 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) bowling.exs:46: unexpected token: ")". "do" starting at line 45 is missing terminator "end"
    (elixir) lib/code.ex:321: Code.load_file/2
    bowling_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.06ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.06ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.04ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (6.6ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.4ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.4ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.09ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.06ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (2.6ms)[0m

  3) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  4) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.07ms)[0m

  5) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mScore ca[0mn[31mnot[0m [31mbe t[0ma[31mk[0me[31mn[0m [31mun[0mt[31mil[0m [31mthe e[0mn[31md[0m [31mo[0mf[31m the g[0mame"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m t[32moo[0m [32mma[0mn[32my[0m f[32mr[0mame[32ms[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.05ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  6) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m24 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.09ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.08ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.09ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.1ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.07ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (3.9ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.3ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.09ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.1ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (2.8ms)[0m

  3) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.03ms)[0m

  4) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.3ms)[0m

  5) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mScore ca[0mn[31mnot[0m [31mbe t[0ma[31mk[0me[31mn[0m [31mun[0mt[31mil[0m [31mthe e[0mn[31md[0m [31mo[0mf[31m the g[0mame"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m t[32moo[0m [32mma[0mn[32my[0m f[32mr[0mame[32ms[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m

  6) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.08ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.07ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.09ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (9.3ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.06ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (1.0ms)[0m

  3) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.02ms)[0m

  4) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

  5) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m{:error, "[31mScore ca[0mn[31mnot[0m [31mbe t[0ma[31mk[0me[31mn[0m [31mun[0mt[31mil[0m [31mthe e[0mn[31md[0m [31mo[0mf[31m the g[0mame"}
     [36mrhs:  [0m{:error, "[32mI[0mn[32mvalid[0m [32mg[0ma[32mm[0me[32m:[0m t[32moo[0m [32mma[0mn[32my[0m f[32mr[0mame[32ms[0m"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.04ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.07ms)[0m

  6) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.09ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.09ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.05ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.1ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.1ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (3.7ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.09ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.08ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.08ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.04ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.07ms)[0m
  * test an unstarted game can not be scored[31m  * test an unstarted game can not be scored (3.5ms)[0m

  3) test an unstarted game can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:279[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:281: (test)

  * test score cannot be taken until the end of the game[31m  * test score cannot be taken until the end of the game (0.06ms)[0m

  4) test score cannot be taken until the end of the game (BowlingTest)
     [1m[30mbowling_test.exs:284[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.tuple_to_list(nil)
       bowling.exs:92: Bowling.is_spare/1
       bowling.exs:46: Bowling.score/1
       bowling_test.exs:287: (test)

  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.08ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m

  5) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m24 tests, 5 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable frame12 is unused
  bowling.exs:43

[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.07ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.09ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.07ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.07ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[31m  * test strikes with the two roll bonus do not get bonus rolls (4.2ms)[0m

  1) test strikes with the two roll bonus do not get bonus rolls (BowlingTest)
     [1m[30mbowling_test.exs:194[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 30
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m30
     [36mstacktrace:[0m
       bowling_test.exs:209: (test)

  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.07ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.04ms)[0m

  2) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m{:error, "Invalid game: too many frames"}
     [36mrhs:  [0m300
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.05ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

  3) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.07ms)[0m

  4) test bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:307[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:320: (test)

  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[31m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m

  5) test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:323[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m20
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:337: (test)

  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[31m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.08ms)[0m

  6) test bonus roll for a spare in the last frame must be rolled before score can be calculated (BowlingTest)
     [1m[30mbowling_test.exs:340[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Score cannot be taken until the end of the game"}
     [36mlhs:  [0m10
     [36mrhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mstacktrace:[0m
       bowling_test.exs:353: (test)



Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 6 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable frame11 is unused
  bowling.exs:42

[33mwarning: [0mvariable frame12 is unused
  bowling.exs:43

[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.5ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.1ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.09ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.08ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.07ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.07ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.08ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[31m  * test a strike in the last frame gets a two roll bonus that is counted once (35.1ms)[0m

  1) test a strike in the last frame gets a two roll bonus that is counted once (BowlingTest)
     [1m[30mbowling_test.exs:160[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 18
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m18
     [36mstacktrace:[0m
       bowling_test.exs:174: (test)

  * test rolling a spare with the two roll bonus does not get a bonus roll[31m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.3ms)[0m

  2) test rolling a spare with the two roll bonus does not get a bonus roll (BowlingTest)
     [1m[30mbowling_test.exs:177[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 20
     [36mlhs:  [0m{:error, "Score cannot be taken until the end of the game"}
     [36mrhs:  [0m20
     [36mstacktrace:[0m
       bowling_test.exs:191: (test)

  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.05ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.06ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (0.1ms)[0m

  3) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.9ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.5ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.1ms)[0m


Finished in 0.3 seconds (0.2s on load, 0.05s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.06ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.08ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.09ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.06ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.05ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.05ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.06ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.04ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.03ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (2.2ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 1 failure[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:62

[33mwarning: [0mvariable f2 is unused
  bowling.exs:66

[33mwarning: [0mvariable i is unused
  bowling.exs:73

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.05ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.04ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.04ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.04ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.05ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.2ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.03ms)[0m
  * test a game with more than ten frames can not be scored[31m  * test a game with more than ten frames can not be scored (5.5ms)[0m

  1) test a game with more than ten frames can not be scored (BowlingTest)
     [1m[30mbowling_test.exs:290[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == {:error, "Invalid game: too many frames"}
     [36mlhs:  [0m0
     [36mrhs:  [0m{:error, "Invalid game: too many frames"}
     [36mstacktrace:[0m
       bowling_test.exs:304: (test)

  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.06ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.05ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m24 tests, 1 failure[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:63

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mvariable f2 is unused
  bowling.exs:67

[33mwarning: [0mvariable i is unused
  bowling.exs:74

[33mwarning: [0mvariable m2 is unused
  bowling.exs:90

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.06ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.05ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.04ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.04ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.03ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (0.03ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.03ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.03ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.03ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.03ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.02ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.02ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.02ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.02ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.02ms)[0m


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m24 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:63

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mvariable f2 is unused
  bowling.exs:67

[33mwarning: [0mvariable i is unused
  bowling.exs:74

[33mwarning: [0mvariable m2 is unused
  bowling.exs:89

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.09ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.07ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.07ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.04ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.03ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.03ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.05ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[31m  * test points scored in the two rolls after a strike are counted twice as a bonus (2.0ms)[0m

  1) test points scored in the two rolls after a strike are counted twice as a bonus (BowlingTest)
     [1m[30mbowling_test.exs:128[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 26
     [36mlhs:  [0m2[31m1[0m
     [36mrhs:  [0m2[32m6[0m
     [36mstacktrace:[0m
       bowling_test.exs:141: (test)

  * test consecutive strikes each get the two roll bonus[31m  * test consecutive strikes each get the two roll bonus (0.06ms)[0m

  2) test consecutive strikes each get the two roll bonus (BowlingTest)
     [1m[30mbowling_test.exs:144[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 81
     [36mlhs:  [0m[31m56[0m
     [36mrhs:  [0m[32m81[0m
     [36mstacktrace:[0m
       bowling_test.exs:157: (test)

  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.07ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.06ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.05ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.3ms)[0m
  * test all strikes is a perfect game[31m  * test all strikes is a perfect game (0.1ms)[0m

  3) test all strikes is a perfect game (BowlingTest)
     [1m[30mbowling_test.exs:229[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mBowling.score(game) == 300
     [36mlhs:  [0m[31m21[0m0
     [36mrhs:  [0m[32m3[0m0[32m0[0m
     [36mstacktrace:[0m
       bowling_test.exs:244: (test)

  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.00ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.04ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.00ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.00ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.03ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.02ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.02ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.02ms)[0m


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m24 tests, 3 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable f1 is unused
  bowling.exs:63

[33mwarning: [0mvariable f2 is unused
  bowling.exs:63

[33mwarning: [0mvariable f2 is unused
  bowling.exs:67

[33mwarning: [0mvariable i is unused
  bowling.exs:74

[33mwarning: [0mvariable m2 is unused
  bowling.exs:90

Excluding tags: [:pending]


BowlingTest
  * test can score all 0s[32m  * test can score all 0s (0.1ms)[0m
  * test can score a game with no strikes or spares[32m  * test can score a game with no strikes or spares (0.1ms)[0m
  * test spare followed by all 0s is worth 10 points[32m  * test spare followed by all 0s is worth 10 points (0.09ms)[0m
  * test points scored in the roll after the spare are counted twice[32m  * test points scored in the roll after the spare are counted twice (0.1ms)[0m
  * test consecutive spares each get a one roll bonus[32m  * test consecutive spares each get a one roll bonus (0.1ms)[0m
  * test a spare in the last frame gets a one roll bonus that is counted once[32m  * test a spare in the last frame gets a one roll bonus that is counted once (0.1ms)[0m
  * test a strike earns ten points in frame with a single roll[32m  * test a strike earns ten points in frame with a single roll (0.09ms)[0m
  * test points scored in the two rolls after a strike are counted twice as a bonus[32m  * test points scored in the two rolls after a strike are counted twice as a bonus (0.08ms)[0m
  * test consecutive strikes each get the two roll bonus[32m  * test consecutive strikes each get the two roll bonus (1.0ms)[0m
  * test a strike in the last frame gets a two roll bonus that is counted once[32m  * test a strike in the last frame gets a two roll bonus that is counted once (0.2ms)[0m
  * test rolling a spare with the two roll bonus does not get a bonus roll[32m  * test rolling a spare with the two roll bonus does not get a bonus roll (0.1ms)[0m
  * test strikes with the two roll bonus do not get bonus rolls[32m  * test strikes with the two roll bonus do not get bonus rolls (0.1ms)[0m
  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus[32m  * test a strike with the one roll bonus after a spare in the last frame does not get a bonus (0.1ms)[0m
  * test all strikes is a perfect game[32m  * test all strikes is a perfect game (0.06ms)[0m
  * test rolls can not score negative points[32m  * test rolls can not score negative points (0.00ms)[0m
  * test a roll can not score more than 10 points[32m  * test a roll can not score more than 10 points (0.00ms)[0m
  * test two rolls in a frame can not score more than 10 points[32m  * test two rolls in a frame can not score more than 10 points (0.01ms)[0m
  * test two bonus rolls after a strike in the last frame can not score more than 10 points[32m  * test two bonus rolls after a strike in the last frame can not score more than 10 points (0.07ms)[0m
  * test an unstarted game can not be scored[32m  * test an unstarted game can not be scored (0.01ms)[0m
  * test score cannot be taken until the end of the game[32m  * test score cannot be taken until the end of the game (0.02ms)[0m
  * test a game with more than ten frames can not be scored[32m  * test a game with more than ten frames can not be scored (0.1ms)[0m
  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.08ms)[0m
  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated[32m  * test both bonus rolls for a strike in the last frame must be rolled before score can be calculated (0.1ms)[0m
  * test bonus roll for a spare in the last frame must be rolled before score can be calculated[32m  * test bonus roll for a spare in the last frame must be rolled before score can be calculated (0.09ms)[0m


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[32m24 tests, 0 failures[0m

Randomized with seed 0
