[33mwarning: [0mvariable list is unused
  flatten_array.exs:18

** (CompileError) flatten_array.exs:18: undefined function a/0
    (stdlib) lists.erl:1337: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable list is unused
  flatten_array.exs:18

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list  * test flattens an empty nested list (skipped)
  * test flattens a nested list  * test flattens a nested list (skipped)
  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[32m6 tests, 0 failures, 5 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:18

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[31m  * test flattens an empty nested list (4.1ms)[0m

  1) test flattens an empty nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:15[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([[]]) == []
     [36mlhs:  [0m[[31m[][0m]
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       flatten_array_test.exs:16: (test)

  * test flattens a nested list  * test flattens a nested list (skipped)
  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[31m6 tests, 1 failure, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list  * test flattens a nested list (skipped)
  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[32m6 tests, 0 failures, 4 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (2.5ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[1, 2, [31m[3][0m, 4, [31m[][0m, [31m5[0m, [31m6[0m, [31m'\a\b'[0m]
     [36mrhs:  [0m[1, 2, [32m3[0m, 4, [32m5[0m, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[31m6 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (3.1ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[1, 2, 3, [31m[][0m, [31m4[0m, [31m[][0m, [31m5[0m, [31m6[0m[31m, [0m[31m7[0m[31m, [0m[31m8[0m]
     [36mrhs:  [0m[1, 2, 3, [32m4[0m, [32m5[0m, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[31m6 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (4.4ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31m** (FunctionClauseError) no function clause matching in FlattenArray.flatten/2[0m
     [36mstacktrace:[0m
       flatten_array.exs:17: FlattenArray.flatten(2, [])
       flatten_array.exs:20: FlattenArray.flatten/2
       flatten_array_test.exs:20: (test)

  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (2.6ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[1, 2, 3, 4, [31m[][0m, [31m5[0m, [31m6[0m, [31m'\a\b'[0m]
     [36mrhs:  [0m[1, 2, 3, 4, [32m5[0m, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[31m6 tests, 1 failure, 3 skipped[0m

Randomized with seed 0
** (SyntaxError) flatten_array.exs:20: unexpected token: ")". "[" starting at line 20 is missing terminator "]"
    (elixir) lib/code.ex:321: Code.load_file/2
    flatten_array_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.01ms)[0m
  * test removes nil from list  * test removes nil from list (skipped)
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[32m6 tests, 0 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable list is unused
  flatten_array.exs:19

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.00ms)[0m
  * test removes nil from listExcluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.01ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list  * test removes nil from a nested list (skipped)
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[32m6 tests, 0 failures, 2 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.00ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[32m  * test removes nil from a nested list (0.00ms)[0m
  * test returns an empty list if all values in nested list are nil  * test returns an empty list if all values in nested list are nil (skipped)


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[32m6 tests, 0 failures, 1 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.00ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[32m  * test removes nil from a nested list (0.00ms)[0m
  * test returns an empty list if all values in nested list are nil[31m  * test returns an empty list if all values in nested list are nil (2.5ms)[0m

  1) test returns an empty list if all values in nested list are nil (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([nil, [nil], [nil, [nil]]]) == []
     [36mlhs:  [0m[[31mnil[0m]
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       flatten_array_test.exs:32: (test)



Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 1 failure[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.01ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[32m  * test removes nil from a nested list (0.00ms)[0m
  * test returns an empty list if all values in nested list are nil[31m  * test returns an empty list if all values in nested list are nil (2.6ms)[0m

  1) test returns an empty list if all values in nested list are nil (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([nil, [nil], [nil, [nil]]]) == []
     [36mlhs:  [0m[[31mnil[0m]
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       flatten_array_test.exs:32: (test)



Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 1 failure[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.01ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[32m  * test removes nil from a nested list (0.00ms)[0m
  * test returns an empty list if all values in nested list are nil[31m  * test returns an empty list if all values in nested list are nil (2.6ms)[0m

  1) test returns an empty list if all values in nested list are nil (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([nil, [nil], [nil, [nil]]]) == []
     [36mlhs:  [0m[[31mnil[0m]
     [36mrhs:  [0m[]
     [36mstacktrace:[0m
       flatten_array_test.exs:32: (test)



Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 1 failure[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.00ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[32m  * test removes nil from a nested list (0.00ms)[0m
  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[32m6 tests, 0 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[31m  * test returns original list if there is nothing to flatten (3.7ms)[0m

  1) test returns original list if there is nothing to flatten (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:11[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, 2, 3]) == [1, 2, 3]
     [36mlhs:  [0m[[31m3[0m, 2, [31m1[0m]
     [36mrhs:  [0m[[32m1[0m, 2, [32m3[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:12: (test)

  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (0.03ms)[0m

  2) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[[31m8[0m, [31m7[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m[32m, [0m[32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m[32m, [0m[32m7[0m[32m, [0m[32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[31m  * test removes nil from list (0.01ms)[0m

  3) test removes nil from list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:23[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, nil, 2]) == [1, 2]
     [36mlhs:  [0m[[31m2[0m, [31m1[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:24: (test)

  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.01ms)[0m

  4) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[[31m5[0m, [31m4[0m, [31m2[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m4[0m[32m, [0m[32m5[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 4 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[31m  * test returns original list if there is nothing to flatten (2.3ms)[0m

  1) test returns original list if there is nothing to flatten (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:11[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, 2, 3]) == [1, 2, 3]
     [36mlhs:  [0m[[31m3[0m, 2, [31m1[0m]
     [36mrhs:  [0m[[32m1[0m, 2, [32m3[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:12: (test)

  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (0.01ms)[0m

  2) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[[31m8[0m, [31m7[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m[32m, [0m[32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m[32m, [0m[32m7[0m[32m, [0m[32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[31m  * test removes nil from list (0.01ms)[0m

  3) test removes nil from list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:23[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, nil, 2]) == [1, 2]
     [36mlhs:  [0m[[31m2[0m, [31m1[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:24: (test)

  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.01ms)[0m

  4) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[[31m5[0m, [31m4[0m, [31m2[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m4[0m[32m, [0m[32m5[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 4 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (3.0ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[[31m7[0m, [31m8[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m[32m, [0m[32m3[0m[32m, [0m[32m4[0m[32m, [0m[32m5[0m[32m, [0m[32m6[0m[32m, [0m[32m7[0m[32m, [0m[32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.02ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[[31m4[0m, 2, [31m5[0m]
     [36mrhs:  [0m[[32m1[0m, 2, [32m4[0m[32m, [0m[32m5[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested listExcluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (2.5ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[1, [31m4[0m, 3, [31m2[0m, 5, [31m7[0m, [31m8[0m, [31m6[0m]
     [36mrhs:  [0m[1, [32m2[0m, 3, [32m4[0m, 5, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.01ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[1, [31m4[0m, [31m2[0m, 5]
     [36mrhs:  [0m[1, [32m2[0m, [32m4[0m, 5]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (2.7ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[[31m6[0m, [31m4[0m, [31m2[0m, [31m1[0m, [31m3[0m, [31m5[0m, 7, 8]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m, [32m4[0m, [32m5[0m, [32m6[0m, 7, 8]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.02ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[[31m4[0m, 2, [31m1[0m, 5]
     [36mrhs:  [0m[[32m1[0m, 2, [32m4[0m, 5]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (2.9ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[1, [31m4[0m, 3, [31m2[0m, 5, [31m7[0m, [31m8[0m, [31m6[0m]
     [36mrhs:  [0m[1, [32m2[0m, 3, [32m4[0m, 5, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.02ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[1, [31m4[0m, [31m2[0m, 5]
     [36mrhs:  [0m[1, [32m2[0m, [32m4[0m, 5]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (3.6ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[[31m6[0m, [31m7[0m, [31m8[0m, 4, [31m2[0m, [31m3[0m, [31m1[0m, [31m5[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m, 4, [32m5[0m, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.01ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.05ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[[31m4[0m, 2, [31m1[0m, 5]
     [36mrhs:  [0m[[32m1[0m, 2, [32m4[0m, 5]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[32m  * test flattens a nested list (0.00ms)[0m
  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[32m  * test removes nil from a nested list (0.00ms)[0m
  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[32m6 tests, 0 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (2.1ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[1, 2, [31m1[0m, [31m3[0m, [31m1[0m, [31m2[0m, [31m1[0m, [31m1[0m[31m, [0m[31m4[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m[31m, [0m[31m6[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m[31m, [0m[31m7[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m[31m, [0m[31m6[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m[31m, [0m[31m8[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m[31m, [0m[31m6[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m]
     [36mrhs:  [0m[1, 2, [32m3[0m, [32m4[0m, [32m5[0m, [32m6[0m, [32m7[0m, [32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.02ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[1, 2, [31m1[0m, [31m1[0m[31m, [0m[31m4[0m[31m, [0m[31m1[0m[31m, [0m[31m5[0m]
     [36mrhs:  [0m[1, 2, [32m4[0m, [32m5[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.04 seconds (0.04s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable a is unused
  flatten_array.exs:22

Excluding tags: [:pending]


FlattenArrayTest
  * test returns original list if there is nothing to flatten[32m  * test returns original list if there is nothing to flatten (0.00ms)[0m
  * test flattens an empty nested list[32m  * test flattens an empty nested list (0.00ms)[0m
  * test flattens a nested list[31m  * test flattens a nested list (3.4ms)[0m

  1) test flattens a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:19[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, [3], 4], 5, [6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]
     [36mlhs:  [0m[[31m5[0m, [31m5[0m, [31m1[0m, [31m5[0m, 5]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m3[0m, [32m4[0m, 5[32m, [0m[32m6[0m[32m, [0m[32m7[0m[32m, [0m[32m8[0m]
     [36mstacktrace:[0m
       flatten_array_test.exs:20: (test)

  * test removes nil from list[32m  * test removes nil from list (0.00ms)[0m
  * test removes nil from a nested list[31m  * test removes nil from a nested list (0.03ms)[0m

  2) test removes nil from a nested list (FlattenArrayTest)
     [1m[30mflatten_array_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mFlattenArray.flatten([1, [2, nil, 4], 5]) == [1, 2, 4, 5]
     [36mlhs:  [0m[[31m5[0m, [31m5[0m, [31m1[0m, 5[31m, [0m[31m5[0m]
     [36mrhs:  [0m[[32m1[0m, [32m2[0m, [32m4[0m, 5]
     [36mstacktrace:[0m
       flatten_array_test.exs:28: (test)

  * test returns an empty list if all values in nested list are nil[32m  * test returns an empty list if all values in nested list are nil (0.00ms)[0m


Finished in 0.05 seconds (0.05s on load, 0.00s on tests)
[31m6 tests, 2 failures[0m

Randomized with seed 0
