** (CompileError) custom_set.exs:6: CustomSet.__struct__/1 is undefined, cannot expand struct CustomSet
    custom_set.exs:5: (module)

[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:11

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:15

[33mwarning: [0mvariable element is unused
  custom_set.exs:15

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:31

[33mwarning: [0mvariable element is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty  * test empty? sets with no elements are empty (skipped)
  * test empty? sets with elements are not empty[31m  * test empty? sets with elements are not empty (3.3ms)[0m

  1) test empty? sets with elements are not empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:33: (test)

  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set[31m  * test contains? when the element is in the set (0.02ms)[0m

  2) test contains? when the element is in the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:44[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.contains?(custom_set, 1) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:46: (test)

  * test contains? when the element is not in the set[31m  * test contains? when the element is not in the set (0.01ms)[0m

  3) test contains? when the element is not in the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:49[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.contains?(custom_set, 4) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:51: (test)

  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set[31m  * test subset? empty set is a subset of non-empty set (0.02ms)[0m

  4) test subset? empty set is a subset of non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:66: (test)

  * test subset? non-empty set is not a subset of empty set[31m  * test subset? non-empty set is not a subset of empty set (0.01ms)[0m

  5) test subset? non-empty set is not a subset of empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:69[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:72: (test)

  * test subset? set is a subset of set with exact same elements[31m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m

  6) test subset? set is a subset of set with exact same elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:78: (test)

  * test subset? set is a subset of larger set with same elements[31m  * test subset? set is a subset of larger set with same elements (0.01ms)[0m

  7) test subset? set is a subset of larger set with same elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:81[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:84: (test)

  * test subset? set is not a subset of set that does not contain its elements[31m  * test subset? set is not a subset of set that does not contain its elements (0.01ms)[0m

  8) test subset? set is not a subset of set that does not contain its elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:90: (test)

  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set[31m  * test disjoint? empty set is disjoint with non-empty set (0.02ms)[0m

  9) test disjoint? empty set is disjoint with non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:102[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:105: (test)

  * test disjoint? non-empty set is disjoint with empty set[31m  * test disjoint? non-empty set is disjoint with empty set (0.01ms)[0m

 10) test disjoint? non-empty set is disjoint with empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:108[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:111: (test)

  * test disjoint? sets are not disjoint if they share an element[31m  * test disjoint? sets are not disjoint if they share an element (0.01ms)[0m

 11) test disjoint? sets are not disjoint if they share an element (CustomSetTest)
     [1m[30mcustom_set_test.exs:114[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:117: (test)

  * test disjoint? sets are disjoint if they share no elements[31m  * test disjoint? sets are disjoint if they share no elements (0.01ms)[0m

 12) test disjoint? sets are disjoint if they share no elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:120[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:123: (test)

  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set[31m  * test equal? empty set is not equal to non-empty set (0.01ms)[0m

 13) test equal? empty set is not equal to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:135[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:138: (test)

  * test equal? non-empty set is not equal to empty set[31m  * test equal? non-empty set is not equal to empty set (0.01ms)[0m

 14) test equal? non-empty set is not equal to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:141[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:144: (test)

  * test equal? sets with the same elements are equal[31m  * test equal? sets with the same elements are equal (0.01ms)[0m

 15) test equal? sets with the same elements are equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:147[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:150: (test)

  * test equal? sets with different elements are not equal[31m  * test equal? sets with different elements are not equal (0.01ms)[0m

 16) test equal? sets with different elements are not equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:153[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:156: (test)

  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set[31m  * test add add to non-empty set (1.6ms)[0m

 17) test add add to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:169[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:173: (test)

  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (1.3ms)[0m

 18) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:176[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(expected, actual)
     [36mstacktrace:[0m
       custom_set_test.exs:179: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set[31m  * test intersection intersection of an empty set and non-empty set is an empty set (1.5ms)[0m

 19) test intersection intersection of an empty set and non-empty set is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:193[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:198: (test)

  * test intersection intersection of a non-empty set and an empty set is an empty set[31m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.02ms)[0m

 20) test intersection intersection of a non-empty set and an empty set is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:201[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:206: (test)

  * test intersection intersection of two sets with no shared elements is an empty set[31m  * test intersection intersection of two sets with no shared elements is an empty set (2.7ms)[0m

 21) test intersection intersection of two sets with no shared elements is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:209[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:214: (test)

  * test intersection intersection of two sets with shared elements is a set of the shared elements[31m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.03ms)[0m

 22) test intersection intersection of two sets with shared elements is a set of the shared elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:217[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:222: (test)

  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set[31m  * test difference difference of empty set and non-empty set is an empty set (0.8ms)[0m

 23) test difference difference of empty set and non-empty set is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:236[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:241: (test)

  * test difference difference of a non-empty set and an empty set is the non-empty set[31m  * test difference difference of a non-empty set and an empty set is the non-empty set (0.02ms)[0m

 24) test difference difference of a non-empty set and an empty set is the non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:244[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:249: (test)

  * test difference difference of two non-empty sets is a set of elements that are only in the first set[31m  * test difference difference of two non-empty sets is a set of elements that are only in the first set (0.01ms)[0m

 25) test difference difference of two non-empty sets is a set of elements that are only in the first set (CustomSetTest)
     [1m[30mcustom_set_test.exs:252[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:257: (test)

  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set[31m  * test union union of an empty set and non-empty set is the non-empty set (0.01ms)[0m

 26) test union union of an empty set and non-empty set is the non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:271[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:276: (test)

  * test union union of a non-empty set and empty set is the non-empty set[31m  * test union union of a non-empty set and empty set is the non-empty set (0.01ms)[0m

 27) test union union of a non-empty set and empty set is the non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:279[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:284: (test)

  * test union union of non-empty sets contains all unique elements[31m  * test union union of non-empty sets contains all unique elements (0.02ms)[0m

 28) test union union of non-empty sets contains all unique elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:287[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:292: (test)



Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m39 tests, 28 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:11

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:15

[33mwarning: [0mvariable element is unused
  custom_set.exs:15

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:31

[33mwarning: [0mvariable element is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty  * test empty? sets with no elements are empty (skipped)
  * test empty? sets with elements are not empty[31m  * test empty? sets with elements are not empty (2.7ms)[0m

  1) test empty? sets with elements are not empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:33: (test)

  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set[31m  * test contains? when the element is in the set (0.02ms)[0m

  2) test contains? when the element is in the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:44[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.contains?(custom_set, 1) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:46: (test)

  * test contains? when the element is not in the set[31m  * test contains? when the element is not in the set (0.01ms)[0m

  3) test contains? when the element is not in the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:49[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.contains?(custom_set, 4) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:51: (test)

  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set[31m  * test subset? empty set is a subset of non-empty set (0.01ms)[0m

  4) test subset? empty set is a subset of non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:66: (test)

  * test subset? non-empty set is not a subset of empty set[31m  * test subset? non-empty set is not a subset of empty set (0.01ms)[0m

  5) test subset? non-empty set is not a subset of empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:69[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:72: (test)

  * test subset? set is a subset of set with exact same elements[31m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m

  6) test subset? set is a subset of set with exact same elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:78: (test)

  * test subset? set is a subset of larger set with same elements[31m  * test subset? set is a subset of larger set with same elements (0.01ms)[0m

  7) test subset? set is a subset of larger set with same elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:81[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:84: (test)

  * test subset? set is not a subset of set that does not contain its elements[31m  * test subset? set is not a subset of set that does not contain its elements (0.01ms)[0m

  8) test subset? set is not a subset of set that does not contain its elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:90: (test)

  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set[31m  * test disjoint? empty set is disjoint with non-empty set (0.01ms)[0m

  9) test disjoint? empty set is disjoint with non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:102[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:105: (test)

  * test disjoint? non-empty set is disjoint with empty set[31m  * test disjoint? non-empty set is disjoint with empty set (0.01ms)[0m

 10) test disjoint? non-empty set is disjoint with empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:108[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:111: (test)

  * test disjoint? sets are not disjoint if they share an element[31m  * test disjoint? sets are not disjoint if they share an element (0.01ms)[0m

 11) test disjoint? sets are not disjoint if they share an element (CustomSetTest)
     [1m[30mcustom_set_test.exs:114[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:117: (test)

  * test disjoint? sets are disjoint if they share no elements[31m  * test disjoint? sets are disjoint if they share no elements (0.01ms)[0m

 12) test disjoint? sets are disjoint if they share no elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:120[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:123: (test)

  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set[31m  * test equal? empty set is not equal to non-empty set (0.01ms)[0m

 13) test equal? empty set is not equal to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:135[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:138: (test)

  * test equal? non-empty set is not equal to empty set[31m  * test equal? non-empty set is not equal to empty set (0.01ms)[0m

 14) test equal? non-empty set is not equal to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:141[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:144: (test)

  * test equal? sets with the same elements are equal[31m  * test equal? sets with the same elements are equal (0.01ms)[0m

 15) test equal? sets with the same elements are equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:147[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:150: (test)

  * test equal? sets with different elements are not equal[31m  * test equal? sets with different elements are not equal (0.01ms)[0m

 16) test equal? sets with different elements are not equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:153[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:156: (test)

  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set[31m  * test add add to non-empty set (1.2ms)[0m

 17) test add add to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:169[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:173: (test)

  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (0.9ms)[0m

 18) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:176[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(expected, actual)
     [36mstacktrace:[0m
       custom_set_test.exs:179: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set[31m  * test intersection intersection of an empty set and non-empty set is an empty set (1.1ms)[0m

 19) test intersection intersection of an empty set and non-empty set is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:193[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:198: (test)

  * test intersection intersection of a non-empty set and an empty set is an empty set[31m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.03ms)[0m

 20) test intersection intersection of a non-empty set and an empty set is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:201[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:206: (test)

  * test intersection intersection of two sets with no shared elements is an empty set[31m  * test intersection intersection of two sets with no shared elements is an empty set (2.1ms)[0m

 21) test intersection intersection of two sets with no shared elements is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:209[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:214: (test)

  * test intersection intersection of two sets with shared elements is a set of the shared elements[31m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.8ms)[0m

 22) test intersection intersection of two sets with shared elements is a set of the shared elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:217[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:222: (test)

  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set[31m  * test difference difference of empty set and non-empty set is an empty set (0.03ms)[0m

 23) test difference difference of empty set and non-empty set is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:236[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:241: (test)

  * test difference difference of a non-empty set and an empty set is the non-empty set[31m  * test difference difference of a non-empty set and an empty set is the non-empty set (0.04ms)[0m

 24) test difference difference of a non-empty set and an empty set is the non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:244[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:249: (test)

  * test difference difference of two non-empty sets is a set of elements that are only in the first set[31m  * test difference difference of two non-empty sets is a set of elements that are only in the first set (0.02ms)[0m

 25) test difference difference of two non-empty sets is a set of elements that are only in the first set (CustomSetTest)
     [1m[30mcustom_set_test.exs:252[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:257: (test)

  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set[31m  * test union union of an empty set and non-empty set is the non-empty set (0.04ms)[0m

 26) test union union of an empty set and non-empty set is the non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:271[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:276: (test)

  * test union union of a non-empty set and empty set is the non-empty set[31m  * test union union of a non-empty set and empty set is the non-empty set (0.02ms)[0m

 27) test union union of a non-empty set and empty set is the non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:279[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:284: (test)

  * test union union of non-empty sets contains all unique elements[31m  * test union union of non-empty sets contains all unique elements (0.02ms)[0m

 28) test union union of non-empty sets contains all unique elements (CustomSetTest)
     [1m[30mcustom_set_test.exs:287[0m
     [31mExpected truthy, got nil[0m
     [36mcode: [0mCustomSet.equal?(actual, expected)
     [36mstacktrace:[0m
       custom_set_test.exs:292: (test)



Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m39 tests, 28 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:11

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:15

[33mwarning: [0mvariable element is unused
  custom_set.exs:15

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:31

[33mwarning: [0mvariable element is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty  * test empty? sets with no elements are empty (skipped)
  * test empty? sets with elements are not empty  * test empty? sets with elements are not empty (skipped)
  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 37 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:11

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:15

[33mwarning: [0mvariable element is unused
  custom_set.exs:15

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:31

[33mwarning: [0mvariable element is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty  * test empty? sets with no elements are empty (skipped)
  * test empty? sets with elements are not empty  * test empty? sets with elements are not empty (skipped)
  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 37 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:11

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:15

[33mwarning: [0mvariable element is unused
  custom_set.exs:15

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:19

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:31

[33mwarning: [0mvariable element is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[31m  * test empty? sets with no elements are empty (3.1ms)[0m

  1) test empty? sets with no elements are empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:25[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:27: (test)

  * test empty? sets with elements are not empty  * test empty? sets with elements are not empty (skipped)
  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m39 tests, 1 failure, 36 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:16

[33mwarning: [0mvariable element is unused
  custom_set.exs:16

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:20

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:20

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:24

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:24

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:28

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:28

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:32

[33mwarning: [0mvariable element is unused
  custom_set.exs:32

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty  * test empty? sets with elements are not empty (skipped)
  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 36 skipped[0m

Randomized with seed 0
** (CompileError) custom_set.exs:2: undefined field map on struct __MODULE__
    (elixir) lib/kernel/typespec.ex:1004: Kernel.Typespec.compile_error/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    (elixir) lib/kernel/typespec.ex:803: Kernel.Typespec.typespec/3
    (elixir) lib/kernel/typespec.ex:390: Kernel.Typespec.translate_type/3
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

** (CompileError) custom_set.exs:2: undefined field map on struct __MODULE__
    (elixir) lib/kernel/typespec.ex:1004: Kernel.Typespec.compile_error/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    (elixir) lib/kernel/typespec.ex:803: Kernel.Typespec.typespec/3
    (elixir) lib/kernel/typespec.ex:390: Kernel.Typespec.translate_type/3
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

** (CompileError) custom_set.exs:2: undefined field map on struct __MODULE__
    (elixir) lib/kernel/typespec.ex:1004: Kernel.Typespec.compile_error/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    (elixir) lib/kernel/typespec.ex:803: Kernel.Typespec.typespec/3
    (elixir) lib/kernel/typespec.ex:390: Kernel.Typespec.translate_type/3
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

** (CompileError) custom_set.exs:2: undefined field map on struct __MODULE__
    (elixir) lib/kernel/typespec.ex:1004: Kernel.Typespec.compile_error/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    (elixir) lib/kernel/typespec.ex:803: Kernel.Typespec.typespec/3
    (elixir) lib/kernel/typespec.ex:390: Kernel.Typespec.translate_type/3
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:5

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:20

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:20

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:24

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:24

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:28

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:28

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:32

[33mwarning: [0mvariable element is unused
  custom_set.exs:32

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

** (CompileError) custom_set.exs:31: type t() undefined
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

** (CompileError) custom_set.exs:2: type items() undefined
    (stdlib) lists.erl:1338: :lists.foreach/2
    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6

[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty  * test empty? sets with elements are not empty (skipped)
  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m39 tests, 0 failures, 36 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[31m  * test empty? sets with elements are not empty (2.8ms)[0m

  1) test empty? sets with elements are not empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:30[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == false
     [36mlhs:  [0mtrue
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:32: (test)

  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m39 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[31m  * test empty? sets with elements are not empty (2.5ms)[0m

  1) test empty? sets with elements are not empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:30[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == false
     [36mlhs:  [0mtrue
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:32: (test)

  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:22

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:22

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: []}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty%CustomSet{items: []}
[32m  * test empty? sets with no elements are empty (6.4ms)[0m
  * test empty? sets with elements are not empty[31m  * test empty? sets with elements are not empty (4.6ms)[0m

  1) test empty? sets with elements are not empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:30[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == false
     [36mlhs:  [0mtrue
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:32: (test)

  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m39 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable enumerable is unused
  custom_set.exs:6

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct*************
0
[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable*************
0
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (1.8ms)[0m
  * test empty? sets with elements are not empty[31m  * test empty? sets with elements are not empty (2.3ms)[0m

  1) test empty? sets with elements are not empty (CustomSetTest)
     [1m[30mcustom_set_test.exs:30[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.empty?(custom_set) == false
     [36mlhs:  [0mtrue
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:32: (test)

  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:23

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:27

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable*************
0
[31m  * test new removes duplicates in the given enumerable (3.8ms)[0m
*************
1

  1) test new removes duplicates in the given enumerable (CustomSetTest)
     [1m[30mcustom_set_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mactual == expected
     [36mlhs:  [0m%CustomSet{items: [1, [31m1[0m, [31m2[0m[31m, [0m[31m3[0m]}
     [36mrhs:  [0m%CustomSet{items: [1, [32m2[0m, [32m3[0m]}
     [36mstacktrace:[0m
       custom_set_test.exs:20: (test)

  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (1.3ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.07ms)[0m
  * test contains? nothing is contained in an empty set  * test contains? nothing is contained in an empty set (skipped)
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[31m  * test new removes duplicates in the given enumerable (2.9ms)[0m

  1) test new removes duplicates in the given enumerable (CustomSetTest)
     [1m[30mcustom_set_test.exs:17[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mactual == expected
     [36mlhs:  [0m%CustomSet{items: [1, [31m1[0m, [31m2[0m[31m, [0m[31m3[0m]}
     [36mrhs:  [0m%CustomSet{items: [1, [32m2[0m, [32m3[0m]}
     [36mstacktrace:[0m
       custom_set_test.exs:20: (test)

  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set  * test contains? when the element is in the set (skipped)
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set  * test contains? when the element is not in the set (skipped)
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 33 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set  * test subset? empty set is a subset of another empty set (skipped)
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 32 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:21

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:25

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:29

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:33

[33mwarning: [0mvariable element is unused
  custom_set.exs:33

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[31m  * test subset? empty set is a subset of another empty set (2.5ms)[0m

  1) test subset? empty set is a subset of another empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:54[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:57: (test)

  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m39 tests, 1 failure, 31 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[31m  * test subset? empty set is a subset of another empty set (7.6ms)[0m

  1) test subset? empty set is a subset of another empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:54[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for %CustomSet{items: []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:241: Enum.all?/2
       custom_set_test.exs:57: (test)

  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 31 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.01ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set  * test subset? empty set is a subset of non-empty set (skipped)
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 31 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[31m  * test subset? empty set is a subset of non-empty set (2.4ms)[0m

  1) test subset? empty set is a subset of non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:60[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.subset?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mfalse
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:63: (test)

  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 30 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 30 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set  * test subset? non-empty set is not a subset of empty set (skipped)
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 30 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements  * test subset? set is a subset of set with exact same elements (skipped)
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 29 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements  * test subset? set is a subset of larger set with same elements (skipped)
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 28 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.01ms)[0m
  * test subset? set is not a subset of set that does not contain its elements  * test subset? set is not a subset of set that does not contain its elements (skipped)
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 27 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself  * test disjoint? the empty set is disjoint with itself (skipped)
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 26 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:26

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:30

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:34

[33mwarning: [0mvariable element is unused
  custom_set.exs:34

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:38

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[31m  * test disjoint? the empty set is disjoint with itself (3.0ms)[0m

  1) test disjoint? the empty set is disjoint with itself (CustomSetTest)
     [1m[30mcustom_set_test.exs:92[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:95: (test)

  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m39 tests, 1 failure, 25 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.01ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[31m  * test disjoint? the empty set is disjoint with itself (2.5ms)[0m

  1) test disjoint? the empty set is disjoint with itself (CustomSetTest)
     [1m[30mcustom_set_test.exs:92[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.disjoint?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mfalse
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:95: (test)

  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 25 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set  * test disjoint? empty set is disjoint with non-empty set (skipped)
  * test disjoint? non-empty set is disjoint with empty set  * test disjoint? non-empty set is disjoint with empty set (skipped)
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 25 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.01ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element  * test disjoint? sets are not disjoint if they share an element (skipped)
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 23 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.01ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements  * test disjoint? sets are disjoint if they share no elements (skipped)
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 22 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.01ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.02ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.01ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.01ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.01ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.01ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.01ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal  * test equal? empty sets are equal (skipped)
  * test equal? empty set is not equal to non-empty set  * test equal? empty set is not equal to non-empty set (skipped)
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 21 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:31

[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:35

[33mwarning: [0mvariable element is unused
  custom_set.exs:35

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:39

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:43

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[31m  * test equal? empty sets are equal (3.9ms)[0m

  1) test equal? empty sets are equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:124[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mnil
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:127: (test)

  * test equal? empty set is not equal to non-empty set[31m  * test equal? empty set is not equal to non-empty set (0.03ms)[0m

  2) test equal? empty set is not equal to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:130[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == false
     [36mlhs:  [0mnil
     [36mrhs:  [0mfalse
     [36mstacktrace:[0m
       custom_set_test.exs:133: (test)

  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m39 tests, 2 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set  * test equal? non-empty set is not equal to empty set (skipped)
  * test equal? sets with the same elements are equal  * test equal? sets with the same elements are equal (skipped)
  * test equal? sets with different elements are not equal  * test equal? sets with different elements are not equal (skipped)
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 19 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.04ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[31m  * test equal? sets with the same elements are equal (2.8ms)[0m

  1) test equal? sets with the same elements are equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:142[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mCustomSet.equal?(custom_set_1, custom_set_2) == true
     [36mlhs:  [0mfalse
     [36mrhs:  [0mtrue
     [36mstacktrace:[0m
       custom_set_test.exs:145: (test)

  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.01ms)[0m
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[31m  * test equal? empty sets are equal (5.9ms)[0m

  1) test equal? empty sets are equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:124[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for %CustomSet{items: []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1627: Enum.reduce/3
       (elixir) lib/enum.ex:1969: Enum.sort/2
       custom_set.exs:32: CustomSet.equal?/2
       custom_set_test.exs:127: (test)

  * test equal? empty set is not equal to non-empty set[31m  * test equal? empty set is not equal to non-empty set (4.2ms)[0m

  2) test equal? empty set is not equal to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:130[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for %CustomSet{items: [1, 2, 3]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1627: Enum.reduce/3
       (elixir) lib/enum.ex:1969: Enum.sort/2
       custom_set.exs:32: CustomSet.equal?/2
       custom_set_test.exs:133: (test)

  * test equal? non-empty set is not equal to empty set[31m  * test equal? non-empty set is not equal to empty set (3.7ms)[0m

  3) test equal? non-empty set is not equal to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:136[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for %CustomSet{items: []}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1627: Enum.reduce/3
       (elixir) lib/enum.ex:1969: Enum.sort/2
       custom_set.exs:32: CustomSet.equal?/2
       custom_set_test.exs:139: (test)

  * test equal? sets with the same elements are equal[31m  * test equal? sets with the same elements are equal (3.1ms)[0m

  4) test equal? sets with the same elements are equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:142[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for %CustomSet{items: [2, 1]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1627: Enum.reduce/3
       (elixir) lib/enum.ex:1969: Enum.sort/2
       custom_set.exs:32: CustomSet.equal?/2
       custom_set_test.exs:145: (test)

  * test equal? sets with different elements are not equal[31m  * test equal? sets with different elements are not equal (4.5ms)[0m

  5) test equal? sets with different elements are not equal (CustomSetTest)
     [1m[30mcustom_set_test.exs:148[0m
     [31m** (Protocol.UndefinedError) protocol Enumerable not implemented for %CustomSet{items: [1, 2, 4]}[0m
     [36mstacktrace:[0m
       (elixir) lib/enum.ex:1: Enumerable.impl_for!/1
       (elixir) lib/enum.ex:116: Enumerable.reduce/3
       (elixir) lib/enum.ex:1627: Enum.reduce/3
       (elixir) lib/enum.ex:1969: Enum.sort/2
       custom_set.exs:32: CustomSet.equal?/2
       custom_set_test.exs:151: (test)

  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.02s on tests)
[31m39 tests, 5 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.01ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set  * test add add to empty set (skipped)
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 16 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.01ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[31m  * test add add to empty set (8.1ms)[0m

  1) test add add to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:156[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:160: (test)

  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m39 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.06ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.1ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.01ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.03ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.03ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.02ms)[0m
  * test add add to empty set[31m  * test add add to empty set (7.8ms)[0m

  1) test add add to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:156[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:160: (test)

  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m39 tests, 1 failure, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set is unused
  custom_set.exs:36

[33mwarning: [0mvariable element is unused
  custom_set.exs:36

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:40

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:44

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:48

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:48

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[31m  * test add add to empty set (4.7ms)[0m

  1) test add add to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:156[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:160: (test)

  * test add add to non-empty set[31m  * test add add to non-empty set (2.6ms)[0m

  2) test add add to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:163[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:167: (test)

  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (2.6ms)[0m

  3) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:170[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:173: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m39 tests, 3 failures, 13 skipped[0m

Randomized with seed 0
** (SyntaxError) custom_set.exs:37: unexpected token: "}". "[" starting at line 37 is missing terminator "]"
    (elixir) lib/code.ex:321: Code.load_file/2
    custom_set_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:49

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:49

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[31m  * test add add to empty set (2.7ms)[0m

  1) test add add to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:156[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:160: (test)

  * test add add to non-empty set[31m  * test add add to non-empty set (0.02ms)[0m

  2) test add add to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:163[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([1, 2, 4], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:167: (test)

  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (0.01ms)[0m

  3) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:170[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([1, 2, 3], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:173: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 3 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:49

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:49

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[31m  * test add add to empty set (2.3ms)[0m

  1) test add add to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:156[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:160: (test)

  * test add add to non-empty set[31m  * test add add to non-empty set (0.02ms)[0m

  2) test add add to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:163[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([1, 2, 4], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:167: (test)

  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (0.01ms)[0m

  3) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:170[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([1, 2, 3], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:173: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 3 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable new_set is unused
  custom_set.exs:37

[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:41

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:45

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:49

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:49

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.03ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[31m  * test add add to empty set (2.1ms)[0m

  1) test add add to empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:156[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:160: (test)

  * test add add to non-empty set[31m  * test add add to non-empty set (0.02ms)[0m

  2) test add add to non-empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:163[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([1, 2, 4], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:167: (test)

  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (0.02ms)[0m

  3) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:170[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.apply([1, 2, 3], :items, [])
       CustomSet.equal?/2
       custom_set_test.exs:173: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 3 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (2.6ms)[0m

  1) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:170[0m
     [31mExpected truthy, got false[0m
     [36mcode: [0mCustomSet.equal?(expected, actual)
     [36mstacktrace:[0m
       custom_set_test.exs:173: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: [3]}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (5.6ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.02ms)[0m
  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (2.4ms)[0m

  1) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:171[0m
     [31mExpected truthy, got false[0m
     [36mcode: [0mCustomSet.equal?(expected, actual)
     [36mstacktrace:[0m
       custom_set_test.exs:174: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m39 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set%CustomSet{items: [3]}
[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (5.6ms)[0m
  * test add add to non-empty set  * test add add to non-empty set (skipped)
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 15 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
%CustomSet{items: [3]}
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (5.9ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set%CustomSet{items: [3]}
[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.01ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.01ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (5.2ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.02ms)[0m
  * test add adding an existing element does not change the set  * test add adding an existing element does not change the set (skipped)
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 14 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.01ms)[0m
  * test equal? non-empty set is not equal to empty set%CustomSet{items: [3]}
[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (5.6ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.02ms)[0m
  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (2.3ms)[0m

  1) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:171[0m
     [31mExpected truthy, got false[0m
     [36mcode: [0mCustomSet.equal?(expected, actual)
     [36mstacktrace:[0m
       custom_set_test.exs:174: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m39 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.01ms)[0m
%CustomSet{items: [3, 1, 2, 3]}
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[31m  * test add adding an existing element does not change the set (13.6ms)[0m

  1) test add adding an existing element does not change the set (CustomSetTest)
     [1m[30mcustom_set_test.exs:170[0m
     [31mExpected truthy, got false[0m
     [36mcode: [0mCustomSet.equal?(expected, actual)
     [36mstacktrace:[0m
       custom_set_test.exs:174: (test)

  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m39 tests, 1 failure, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.02ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty%CustomSet{items: [3, 1, 2]}
[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (12.3ms)[0m
  * test intersection intersection of two empty sets is an empty set  * test intersection intersection of two empty sets is an empty set (skipped)
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[32m39 tests, 0 failures, 13 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:42

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:46

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:50

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:50

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: [3, 1, 2]}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (4.9ms)[0m
  * test intersection intersection of two empty sets is an empty set[31m  * test intersection intersection of two empty sets is an empty set (6.5ms)[0m

  1) test intersection intersection of two empty sets is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:179[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:184: (test)

  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m39 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:51

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:51

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.01ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.01ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set%CustomSet{items: [3, 1, 2]}
[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (11.0ms)[0m
  * test intersection intersection of two empty sets is an empty set[31m  * test intersection intersection of two empty sets is an empty set (4.9ms)[0m

  1) test intersection intersection of two empty sets is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:179[0m
     [31m** (UndefinedFunctionError) function Enum.filter?/2 is undefined or private. Did you mean one of:
     
           * filter/2
           * filter_map/3
     [0m
     [36mstacktrace:[0m
       (elixir) Enum.filter?([], #Function<4.133925885/1 in CustomSet.intersection/2>)
       custom_set.exs:43: CustomSet.intersection/2
       custom_set_test.exs:182: (test)

  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m39 tests, 1 failure, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:51

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:51

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.01ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.01ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.05ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
%CustomSet{items: [3, 1, 2]}
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.05ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.01ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (5.9ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.00ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set  * test intersection intersection of an empty set and non-empty set is an empty set (skipped)
  * test intersection intersection of a non-empty set and an empty set is an empty set  * test intersection intersection of a non-empty set and an empty set is an empty set (skipped)
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m39 tests, 0 failures, 12 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:51

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:51

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
%CustomSet{items: [3, 1, 2]}
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.01ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (14.0ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.07ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.01ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set  * test intersection intersection of two sets with no shared elements is an empty set (skipped)
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[32m39 tests, 0 failures, 10 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:51

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:51

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: [3, 1, 2]}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (7.3ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.01ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.00ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements  * test intersection intersection of two sets with shared elements is a set of the shared elements (skipped)
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m39 tests, 0 failures, 9 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:51

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:51

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: [3, 1, 2]}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.01ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (5.6ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.01ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.00ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements[32m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.01ms)[0m
  * test difference difference of two empty sets is an empty set  * test difference difference of two empty sets is an empty set (skipped)
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 8 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:47

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:51

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:51

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: [3, 1, 2]}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.01ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (5.4ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.01ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.00ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements[32m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.01ms)[0m
  * test difference difference of two empty sets is an empty set[31m  * test difference difference of two empty sets is an empty set (5.2ms)[0m

  1) test difference difference of two empty sets is an empty set (CustomSetTest)
     [1m[30mcustom_set_test.exs:221[0m
     [31m** (UndefinedFunctionError) function nil.items/0 is undefined or private[0m
     [36mstacktrace:[0m
       nil.items()
       CustomSet.equal?/2
       custom_set_test.exs:226: (test)

  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m39 tests, 1 failure, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

[33mwarning: [0mvariable custom_set_1 is unused
  custom_set.exs:52

[33mwarning: [0mvariable custom_set_2 is unused
  custom_set.exs:52

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
%CustomSet{items: [3, 1, 2]}
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.01ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.01ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.00ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (9.8ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.01ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.01ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements[32m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.01ms)[0m
  * test difference difference of two empty sets is an empty set[32m  * test difference difference of two empty sets is an empty set (0.00ms)[0m
  * test difference difference of empty set and non-empty set is an empty set  * test difference difference of empty set and non-empty set is an empty set (skipped)
  * test difference difference of a non-empty set and an empty set is the non-empty set  * test difference difference of a non-empty set and an empty set is the non-empty set (skipped)
  * test difference difference of two non-empty sets is a set of elements that are only in the first set  * test difference difference of two non-empty sets is a set of elements that are only in the first set (skipped)
  * test union union of empty sets is an empty set  * test union union of empty sets is an empty set (skipped)
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[32m39 tests, 0 failures, 7 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable%CustomSet{items: [3, 1, 2]}
[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.00ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (6.7ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.01ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.00ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements[32m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.01ms)[0m
  * test difference difference of two empty sets is an empty set[32m  * test difference difference of two empty sets is an empty set (0.00ms)[0m
  * test difference difference of empty set and non-empty set is an empty set[32m  * test difference difference of empty set and non-empty set is an empty set (0.00ms)[0m
  * test difference difference of a non-empty set and an empty set is the non-empty set[32m  * test difference difference of a non-empty set and an empty set is the non-empty set (0.01ms)[0m
  * test difference difference of two non-empty sets is a set of elements that are only in the first set[32m  * test difference difference of two non-empty sets is a set of elements that are only in the first set (0.00ms)[0m
  * test union union of empty sets is an empty set[32m  * test union union of empty sets is an empty set (0.00ms)[0m
  * test union union of an empty set and non-empty set is the non-empty set  * test union union of an empty set and non-empty set is the non-empty set (skipped)
  * test union union of a non-empty set and empty set is the non-empty set  * test union union of a non-empty set and empty set is the non-empty set (skipped)
  * test union union of non-empty sets contains all unique elements  * test union union of non-empty sets contains all unique elements (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures, 3 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements%CustomSet{items: [3, 1, 2]}
[32m  * test subset? set is a subset of larger set with same elements (0.01ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.07ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.00ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (5.0ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.01ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.00ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements[32m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.01ms)[0m
  * test difference difference of two empty sets is an empty set[32m  * test difference difference of two empty sets is an empty set (0.00ms)[0m
  * test difference difference of empty set and non-empty set is an empty set[32m  * test difference difference of empty set and non-empty set is an empty set (0.00ms)[0m
  * test difference difference of a non-empty set and an empty set is the non-empty set[32m  * test difference difference of a non-empty set and an empty set is the non-empty set (0.01ms)[0m
  * test difference difference of two non-empty sets is a set of elements that are only in the first set[32m  * test difference difference of two non-empty sets is a set of elements that are only in the first set (0.01ms)[0m
  * test union union of empty sets is an empty set[32m  * test union union of empty sets is an empty set (0.00ms)[0m
  * test union union of an empty set and non-empty set is the non-empty set[32m  * test union union of an empty set and non-empty set is the non-empty set (0.00ms)[0m
  * test union union of a non-empty set and empty set is the non-empty set[32m  * test union union of a non-empty set and empty set is the non-empty set (0.00ms)[0m
  * test union union of non-empty sets contains all unique elements[32m  * test union union of non-empty sets contains all unique elements (0.00ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures[0m

Randomized with seed 0
[33mwarning: [0mvariable old_value is unused
  custom_set.exs:37

Excluding tags: [:pending]


CustomSetTest
  * test new returns a CustomSet struct[32m  * test new returns a CustomSet struct (0.00ms)[0m
  * test new removes duplicates in the given enumerable[32m  * test new removes duplicates in the given enumerable (0.00ms)[0m
  * test empty? sets with no elements are empty[32m  * test empty? sets with no elements are empty (0.00ms)[0m
  * test empty? sets with elements are not empty[32m  * test empty? sets with elements are not empty (0.00ms)[0m
  * test contains? nothing is contained in an empty set[32m  * test contains? nothing is contained in an empty set (0.00ms)[0m
  * test contains? when the element is in the set[32m  * test contains? when the element is in the set (0.00ms)[0m
  * test contains? when the element is not in the set[32m  * test contains? when the element is not in the set (0.00ms)[0m
  * test subset? empty set is a subset of another empty set[32m  * test subset? empty set is a subset of another empty set (0.00ms)[0m
  * test subset? empty set is a subset of non-empty set[32m  * test subset? empty set is a subset of non-empty set (0.00ms)[0m
  * test subset? non-empty set is not a subset of empty set[32m  * test subset? non-empty set is not a subset of empty set (0.00ms)[0m
  * test subset? set is a subset of set with exact same elements[32m  * test subset? set is a subset of set with exact same elements (0.00ms)[0m
  * test subset? set is a subset of larger set with same elements[32m  * test subset? set is a subset of larger set with same elements (0.00ms)[0m
  * test subset? set is not a subset of set that does not contain its elements[32m  * test subset? set is not a subset of set that does not contain its elements (0.00ms)[0m
  * test disjoint? the empty set is disjoint with itself[32m  * test disjoint? the empty set is disjoint with itself (0.00ms)[0m
  * test disjoint? empty set is disjoint with non-empty set[32m  * test disjoint? empty set is disjoint with non-empty set (0.00ms)[0m
  * test disjoint? non-empty set is disjoint with empty set[32m  * test disjoint? non-empty set is disjoint with empty set (0.00ms)[0m
  * test disjoint? sets are not disjoint if they share an element[32m  * test disjoint? sets are not disjoint if they share an element (0.00ms)[0m
  * test disjoint? sets are disjoint if they share no elements[32m  * test disjoint? sets are disjoint if they share no elements (0.00ms)[0m
  * test equal? empty sets are equal[32m  * test equal? empty sets are equal (0.00ms)[0m
  * test equal? empty set is not equal to non-empty set[32m  * test equal? empty set is not equal to non-empty set (0.00ms)[0m
  * test equal? non-empty set is not equal to empty set[32m  * test equal? non-empty set is not equal to empty set (0.01ms)[0m
  * test equal? sets with the same elements are equal[32m  * test equal? sets with the same elements are equal (0.00ms)[0m
  * test equal? sets with different elements are not equal[32m  * test equal? sets with different elements are not equal (0.00ms)[0m
  * test add add to empty set[32m  * test add add to empty set (0.00ms)[0m
  * test add add to non-empty set[32m  * test add add to non-empty set (0.01ms)[0m
  * test add adding an existing element does not change the set[32m  * test add adding an existing element does not change the set (0.00ms)[0m
  * test intersection intersection of two empty sets is an empty set[32m  * test intersection intersection of two empty sets is an empty set (0.00ms)[0m
  * test intersection intersection of an empty set and non-empty set is an empty set[32m  * test intersection intersection of an empty set and non-empty set is an empty set (0.01ms)[0m
  * test intersection intersection of a non-empty set and an empty set is an empty set[32m  * test intersection intersection of a non-empty set and an empty set is an empty set (0.00ms)[0m
  * test intersection intersection of two sets with no shared elements is an empty set[32m  * test intersection intersection of two sets with no shared elements is an empty set (0.01ms)[0m
  * test intersection intersection of two sets with shared elements is a set of the shared elements[32m  * test intersection intersection of two sets with shared elements is a set of the shared elements (0.01ms)[0m
  * test difference difference of two empty sets is an empty set[32m  * test difference difference of two empty sets is an empty set (0.00ms)[0m
  * test difference difference of empty set and non-empty set is an empty set[32m  * test difference difference of empty set and non-empty set is an empty set (0.00ms)[0m
  * test difference difference of a non-empty set and an empty set is the non-empty set[32m  * test difference difference of a non-empty set and an empty set is the non-empty set (0.01ms)[0m
  * test difference difference of two non-empty sets is a set of elements that are only in the first set[32m  * test difference difference of two non-empty sets is a set of elements that are only in the first set (0.01ms)[0m
  * test union union of empty sets is an empty set[32m  * test union union of empty sets is an empty set (0.00ms)[0m
  * test union union of an empty set and non-empty set is the non-empty set[32m  * test union union of an empty set and non-empty set is the non-empty set (0.00ms)[0m
  * test union union of a non-empty set and empty set is the non-empty set[32m  * test union union of a non-empty set and empty set is the non-empty set (0.00ms)[0m
  * test union union of non-empty sets contains all unique elements[32m  * test union union of non-empty sets contains all unique elements (0.00ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m39 tests, 0 failures[0m

Randomized with seed 0
