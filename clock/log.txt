[33mwarning: [0mvariable hour is unused
  clock.exs:11

[33mwarning: [0mvariable minute is unused
  clock.exs:11

[33mwarning: [0mvariable add_minute is unused
  clock.exs:21

[33mwarning: [0mvariable hour is unused
  clock.exs:21

[33mwarning: [0mvariable minute is unused
  clock.exs:21

Excluding tags: [:pending]


ClockTest
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test to_string[31m  * test to_string (7.4ms)[0m

  1) test to_string (ClockTest)
     [1m[30mclock_test.exs:12[0m
     [31mCan't convert Clock to string.
     Hint: implement the String.Chars protocol for Clock.
     http://elixir-lang.org/getting-started/protocols.html
     http://elixir-lang.org/docs/stable/elixir/String.Chars.html
     [0m
     [36mstacktrace:[0m
       clock_test.exs:17: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test create past the hour  * test create past the hour (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test create on the hour[31m  * test create on the hour (0.02ms)[0m

  2) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m""
     [36mrhs:  [0m"08:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m51 tests, 2 failures, 49 skipped[0m

Randomized with seed 765145
[33mwarning: [0mvariable hour is unused
  clock.exs:11

[33mwarning: [0mvariable minute is unused
  clock.exs:11

[33mwarning: [0mvariable add_minute is unused
  clock.exs:21

[33mwarning: [0mvariable hour is unused
  clock.exs:21

[33mwarning: [0mvariable minute is unused
  clock.exs:21

Excluding tags: [:pending]


ClockTest
  * test to_string[31m  * test to_string (6.4ms)[0m

  1) test to_string (ClockTest)
     [1m[30mclock_test.exs:12[0m
     [31mCan't convert Clock to string.
     Hint: implement the String.Chars protocol for Clock.
     http://elixir-lang.org/getting-started/protocols.html
     http://elixir-lang.org/docs/stable/elixir/String.Chars.html
     [0m
     [36mstacktrace:[0m
       clock_test.exs:17: (test)

  * test create on the hour[31m  * test create on the hour (1.2ms)[0m

  2) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m""
     [36mrhs:  [0m"08:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour  * test create past the hour (skipped)
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 2 failures, 49 skipped[0m

Randomized with seed 0
** (SyntaxError) clock.exs:29: unexpected token: end
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable hour is unused
  clock.exs:11

[33mwarning: [0mvariable minute is unused
  clock.exs:11

[33mwarning: [0mvariable add_minute is unused
  clock.exs:21

[33mwarning: [0mvariable hour is unused
  clock.exs:21

[33mwarning: [0mvariable minute is unused
  clock.exs:21

[33mwarning: [0mvariable clock is unused
  clock.exs:26

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (0.01ms)[0m
  * test create on the hour[31m  * test create on the hour (3.8ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m""
     [36mrhs:  [0m"08:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour  * test create past the hour (skipped)
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 1 failure, 49 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[31m  * test to_string (4.8ms)[0m

  1) test to_string (ClockTest)
     [1m[30mclock_test.exs:12[0m
     [31m** (FunctionClauseError) no function clause matching in String.Unicode.next_grapheme_size/1[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:32: String.Unicode.next_grapheme_size(0)
       (elixir) unicode/unicode.ex:185: String.Unicode.length/1
       (elixir) lib/string.ex:939: String.pad/4
       clock.exs:28: String.Chars.Clock.to_string/1
       clock_test.exs:14: (test)

  * test create on the hour[31m  * test create on the hour (0.7ms)[0m

  2) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31m** (FunctionClauseError) no function clause matching in String.Unicode.next_grapheme_size/1[0m
     [36mstacktrace:[0m
       (elixir) unicode/unicode.ex:32: String.Unicode.next_grapheme_size(8)
       (elixir) unicode/unicode.ex:185: String.Unicode.length/1
       (elixir) lib/string.ex:939: String.pad/4
       clock.exs:28: String.Chars.Clock.to_string/1
       clock_test.exs:28: (test)

  * test create past the hour  * test create past the hour (skipped)
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m51 tests, 2 failures, 49 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

[33mwarning: [0mvariable clock is unused
  clock.exs:27

** (CompileError) clock.exs:28: undefined function v/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)

[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

[33mwarning: [0mvariable clock is unused
  clock.exs:27

** (CompileError) clock.exs:28: undefined function v/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)

[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[31m  * test to_string (2.5ms)[0m

  1) test to_string (ClockTest)
     [1m[30mclock_test.exs:12[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.binary_to_integer(0)
       clock.exs:32: String.Chars.Clock.pad_value/1
       clock.exs:28: String.Chars.Clock.to_string/1
       clock_test.exs:14: (test)

  * test create on the hour[31m  * test create on the hour (0.02ms)[0m

  2) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31m** (ArgumentError) argument error[0m
     [36mstacktrace:[0m
       :erlang.binary_to_integer(8)
       clock.exs:32: String.Chars.Clock.pad_value/1
       clock.exs:28: String.Chars.Clock.to_string/1
       clock_test.exs:28: (test)

  * test create past the hour  * test create past the hour (skipped)
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m51 tests, 2 failures, 49 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.0ms)[0m
  * test create on the hour[32m  * test create on the hour (0.02ms)[0m
  * test create past the hour  * test create past the hour (skipped)
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 49 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.0ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours  * test create midnight is zero hours (skipped)
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 48 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.5ms)[0m
  * test create on the hour[32m  * test create on the hour (1.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.05ms)[0m
  * test create hour rolls over  * test create hour rolls over (skipped)
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 47 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.0ms)[0m
  * test create on the hour[32m  * test create on the hour (0.6ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously  * test create hour rolls over continuously (skipped)
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 46 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.7ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.04ms)[0m
  * test create sixty minutes is next hour  * test create sixty minutes is next hour (skipped)
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 45 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.2ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.1ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.03ms)[0m
  * test create sixty minutes is next hour[31m  * test create sixty minutes is next hour (2.4ms)[0m

  1) test create sixty minutes is next hour (ClockTest)
     [1m[30mclock_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, 60) |> to_string == "02:00"
     [36mlhs:  [0m"0[31m1[0m:[31m6[0m0"
     [36mrhs:  [0m"0[32m2[0m:0[32m0[0m"
     [36mstacktrace:[0m
       clock_test.exs:48: (test)

  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 1 failure, 44 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.02ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[31m  * test create sixty minutes is next hour (2.2ms)[0m

  1) test create sixty minutes is next hour (ClockTest)
     [1m[30mclock_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, 60) |> to_string == "02:00"
     [36mlhs:  [0m"0[31m1[0m:00"
     [36mrhs:  [0m"0[32m2[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:48: (test)

  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 1 failure, 44 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.3ms)[0m
  * test create on the hour[32m  * test create on the hour (0.02ms)[0m
  * test create past the hour[32m  * test create past the hour (1.0ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.04ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over  * test create minutes roll over (skipped)
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 44 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.0ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously  * test create minutes roll over continuously (skipped)
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 43 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.06ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (2.0ms)[0m

  1) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"[31m28[0m:43"
     [36mrhs:  [0m"[32m04[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 1 failure, 42 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (1.9ms)[0m
  * test create on the hour[32m  * test create on the hour (0.6ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.06ms)[0m
  * test create hour and minutes roll over  * test create hour and minutes roll over (skipped)
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 42 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (1.9ms)[0m
  * test create on the hour[32m  * test create on the hour (0.01ms)[0m
  * test create past the hour[32m  * test create past the hour (0.7ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.04ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously  * test create hour and minutes roll over continuously (skipped)
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 41 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.02ms)[0m
  * test create past the hour[32m  * test create past the hour (0.9ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.04ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.1ms)[0m
  * test create hour and minutes roll over to exactly midnight  * test create hour and minutes roll over to exactly midnight (skipped)
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 40 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (1.8ms)[0m
  * test create on the hour[32m  * test create on the hour (0.02ms)[0m
  * test create past the hour[32m  * test create past the hour (0.7ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour  * test create negative hour (skipped)
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 39 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.9ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.08ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[31m  * test create negative hour (3.0ms)[0m

  1) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"[31m-1[0m:15"
     [36mrhs:  [0m"[32m23[0m:15"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m51 tests, 1 failure, 38 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.00ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.00ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.00ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[31m  * test create negative hour (3.3ms)[0m

  1) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"[31m-1[0m:15"
     [36mrhs:  [0m"[32m23[0m:15"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m51 tests, 1 failure, 38 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.2ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.06ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.04ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.05ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.05ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.07ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[31m  * test create negative hour (2.6ms)[0m

  1) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"[31m-1[0m:15"
     [36mrhs:  [0m"[32m23[0m:15"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 1 failure, 38 skipped[0m

Randomized with seed 0
** (SyntaxError) clock.exs:12: unexpected token: ")". "{" starting at line 12 is missing terminator "}"
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[31m  * test create on the hour (2.5ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m"[31m16[0m:00"
     [36mrhs:  [0m"[32m08[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour[31m  * test create past the hour (0.04ms)[0m

  2) test create past the hour (ClockTest)
     [1m[30mclock_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(11, 9) |> to_string == "11:09"
     [36mlhs:  [0m"1[31m3[0m:09"
     [36mrhs:  [0m"1[32m1[0m:09"
     [36mstacktrace:[0m
       clock_test.exs:32: (test)

  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.04ms)[0m
  * test create hour rolls over[31m  * test create hour rolls over (0.05ms)[0m

  3) test create hour rolls over (ClockTest)
     [1m[30mclock_test.exs:39[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 0) |> to_string == "01:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m01[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:40: (test)

  * test create hour rolls over continuously[31m  * test create hour rolls over continuously (0.05ms)[0m

  4) test create hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:43[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(100, 0) |> to_string == "04:00"
     [36mlhs:  [0m"[31m2[0m0:00"
     [36mrhs:  [0m"0[32m4[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:44: (test)

  * test create sixty minutes is next hour[31m  * test create sixty minutes is next hour (1.0ms)[0m

  5) test create sixty minutes is next hour (ClockTest)
     [1m[30mclock_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, 60) |> to_string == "02:00"
     [36mlhs:  [0m"0[31m0[0m:00"
     [36mrhs:  [0m"0[32m2[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:48: (test)

  * test create minutes roll over[32m  * test create minutes roll over (0.8ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (1.0ms)[0m
  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.8ms)[0m

  6) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m1[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.03ms)[0m

  7) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m7[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.7ms)[0m
  * test create negative hour[31m  * test create negative hour (0.05ms)[0m

  8) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"[31m01[0m:15"
     [36mrhs:  [0m"[32m23[0m:15"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m51 tests, 8 failures, 38 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.7ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.1ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over  * test create negative hour rolls over (skipped)
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 38 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously  * test create negative hour rolls over continuously (skipped)
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 37 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.1ms)[0m
  * test create on the hour[32m  * test create on the hour (1.4ms)[0m
  * test create past the hour[32m  * test create past the hour (0.08ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.03ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.06ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.04ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.03ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.03ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes  * test create negative minutes (skipped)
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 36 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.1ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.1ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.08ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.03ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.1ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.1ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.03ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.06ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[31m  * test create negative minutes (3.0ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m1[0m:[31m-4[0m0"
     [36mrhs:  [0m"0[32m0[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:22

[33mwarning: [0mvariable hour is unused
  clock.exs:22

[33mwarning: [0mvariable minute is unused
  clock.exs:22

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.9ms)[0m
  * test create on the hour[32m  * test create on the hour (1.5ms)[0m
  * test create past the hour[32m  * test create past the hour (0.06ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.03ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[31m  * test create negative minutes (4.1ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m1[0m:[31m-4[0m0"
     [36mrhs:  [0m"0[32m0[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m51 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
** (SyntaxError) clock.exs:14: unexpected token: "}". "(" starting at line 14 is missing terminator ")"
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

** (CompileError) clock.exs:14: undefined function rem/1
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (14.3ms)[0m
  * test create on the hour[31m  * test create on the hour (10.1ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m"0[31m7[0m:00"
     [36mrhs:  [0m"0[32m8[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour[32m  * test create past the hour (0.2ms)[0m
  * test create midnight is zero hours[31m  * test create midnight is zero hours (0.2ms)[0m

  2) test create midnight is zero hours (ClockTest)
     [1m[30mclock_test.exs:35[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(24, 0) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:36: (test)

  * test create hour rolls over[31m  * test create hour rolls over (0.3ms)[0m

  3) test create hour rolls over (ClockTest)
     [1m[30mclock_test.exs:39[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 0) |> to_string == "01:00"
     [36mlhs:  [0m"0[31m0[0m:00"
     [36mrhs:  [0m"0[32m1[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:40: (test)

  * test create hour rolls over continuously[31m  * test create hour rolls over continuously (0.1ms)[0m

  4) test create hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:43[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(100, 0) |> to_string == "04:00"
     [36mlhs:  [0m"0[31m3[0m:00"
     [36mrhs:  [0m"0[32m4[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:44: (test)

  * test create sixty minutes is next hour[31m  * test create sixty minutes is next hour (18.9ms)[0m

  5) test create sixty minutes is next hour (ClockTest)
     [1m[30mclock_test.exs:47[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, 60) |> to_string == "02:00"
     [36mlhs:  [0m"0[31m0[0m:00"
     [36mrhs:  [0m"0[32m2[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:48: (test)

  * test create minutes roll over[31m  * test create minutes roll over (35.3ms)[0m

  6) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"2[31m3[0m:40"
     [36mrhs:  [0m"[32m0[0m2:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (28.2ms)[0m

  7) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"[31m23[0m:43"
     [36mrhs:  [0m"[32m04[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (22.9ms)[0m

  8) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m0[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.2ms)[0m

  9) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"[31m08[0m:01"
     [36mrhs:  [0m"[32m11[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (17.5ms)[0m

 10) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.2ms)[0m
  * test create negative hour rolls over[31m  * test create negative hour rolls over (0.07ms)[0m

 11) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"2[31m2[0m:00"
     [36mrhs:  [0m"2[32m3[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.05ms)[0m

 12) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"0[31m4[0m:00"
     [36mrhs:  [0m"0[32m5[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[31m  * test create negative minutes (3.1ms)[0m

 13) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"00:[31m-4[0m0"
     [36mrhs:  [0m"00:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 1.4 seconds (1.2s on load, 0.1s on tests)
[31m51 tests, 13 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (7.1ms)[0m
  * test create on the hour[31m  * test create on the hour (21.7ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m"0[31m7[0m:00"
     [36mrhs:  [0m"0[32m8[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour[32m  * test create past the hour (0.09ms)[0m
  * test create midnight is zero hours[31m  * test create midnight is zero hours (0.1ms)[0m

  2) test create midnight is zero hours (ClockTest)
     [1m[30mclock_test.exs:35[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(24, 0) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:36: (test)

  * test create hour rolls over[31m  * test create hour rolls over (0.1ms)[0m

  3) test create hour rolls over (ClockTest)
     [1m[30mclock_test.exs:39[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 0) |> to_string == "01:00"
     [36mlhs:  [0m"0[31m0[0m:00"
     [36mrhs:  [0m"0[32m1[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:40: (test)

  * test create hour rolls over continuously[31m  * test create hour rolls over continuously (0.08ms)[0m

  4) test create hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:43[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(100, 0) |> to_string == "04:00"
     [36mlhs:  [0m"0[31m3[0m:00"
     [36mrhs:  [0m"0[32m4[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:44: (test)

  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.04ms)[0m
  * test create minutes roll over[31m  * test create minutes roll over (0.04ms)[0m

  5) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m3[0m:40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.05ms)[0m

  6) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m7[0m:43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.08ms)[0m

  7) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m4[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.07ms)[0m

  8) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m2[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.08ms)[0m

  9) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.04ms)[0m
  * test create negative hour rolls over[31m  * test create negative hour rolls over (10.2ms)[0m

 10) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"2[31m2[0m:00"
     [36mrhs:  [0m"2[32m3[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.09ms)[0m

 11) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"0[31m4[0m:00"
     [36mrhs:  [0m"0[32m5[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[31m  * test create negative minutes (17.0ms)[0m

 12) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"00:[31m-4[0m0"
     [36mrhs:  [0m"00:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.9 seconds (0.9s on load, 0.06s on tests)
[31m51 tests, 12 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (7.4ms)[0m
  * test create on the hour[31m  * test create on the hour (16.9ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m"0[31m7[0m:00"
     [36mrhs:  [0m"0[32m8[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour[31m  * test create past the hour (0.08ms)[0m

  2) test create past the hour (ClockTest)
     [1m[30mclock_test.exs:31[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(11, 9) |> to_string == "11:09"
     [36mlhs:  [0m"11:[31m51[0m"
     [36mrhs:  [0m"11:[32m09[0m"
     [36mstacktrace:[0m
       clock_test.exs:32: (test)

  * test create midnight is zero hours[31m  * test create midnight is zero hours (0.1ms)[0m

  3) test create midnight is zero hours (ClockTest)
     [1m[30mclock_test.exs:35[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(24, 0) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:36: (test)

  * test create hour rolls over[31m  * test create hour rolls over (0.02ms)[0m

  4) test create hour rolls over (ClockTest)
     [1m[30mclock_test.exs:39[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 0) |> to_string == "01:00"
     [36mlhs:  [0m"0[31m0[0m:00"
     [36mrhs:  [0m"0[32m1[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:40: (test)

  * test create hour rolls over continuously[31m  * test create hour rolls over continuously (0.02ms)[0m

  5) test create hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:43[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(100, 0) |> to_string == "04:00"
     [36mlhs:  [0m"0[31m3[0m:00"
     [36mrhs:  [0m"0[32m4[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:44: (test)

  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[31m  * test create minutes roll over (0.02ms)[0m

  6) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m3[0m:[31m-[0m40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.02ms)[0m

  7) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m7[0m:[31m-[0m43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.02ms)[0m

  8) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m4[0m:[31m-[0m40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.02ms)[0m

  9) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m2[0m:[31m-[0m1"
     [36mrhs:  [0m"1[32m1[0m:[32m0[0m1"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m

 10) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[31m  * test create negative hour (0.02ms)[0m

 11) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"23:[31m4[0m5"
     [36mrhs:  [0m"23:[32m1[0m5"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over[31m  * test create negative hour rolls over (0.6ms)[0m

 12) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"2[31m2[0m:00"
     [36mrhs:  [0m"2[32m3[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.02ms)[0m

 13) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"0[31m4[0m:00"
     [36mrhs:  [0m"0[32m5[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[31m  * test create negative minutes (0.02ms)[0m

 14) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"00:[31m4[0m0"
     [36mrhs:  [0m"00:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 1.1 seconds (1.1s on load, 0.02s on tests)
[31m51 tests, 14 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (6.1ms)[0m
  * test create on the hour[31m  * test create on the hour (22.9ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m"0[31m7[0m:00"
     [36mrhs:  [0m"0[32m8[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[31m  * test create midnight is zero hours (0.05ms)[0m

  2) test create midnight is zero hours (ClockTest)
     [1m[30mclock_test.exs:35[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(24, 0) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:36: (test)

  * test create hour rolls over[31m  * test create hour rolls over (0.04ms)[0m

  3) test create hour rolls over (ClockTest)
     [1m[30mclock_test.exs:39[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 0) |> to_string == "01:00"
     [36mlhs:  [0m"0[31m0[0m:00"
     [36mrhs:  [0m"0[32m1[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:40: (test)

  * test create hour rolls over continuously[31m  * test create hour rolls over continuously (0.03ms)[0m

  4) test create hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:43[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(100, 0) |> to_string == "04:00"
     [36mlhs:  [0m"0[31m3[0m:00"
     [36mrhs:  [0m"0[32m4[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:44: (test)

  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[31m  * test create minutes roll over (0.03ms)[0m

  5) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m3[0m:40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.02ms)[0m

  6) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m7[0m:43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.03ms)[0m

  7) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m4[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.02ms)[0m

  8) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m2[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m

  9) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.04ms)[0m
  * test create negative hour rolls over[31m  * test create negative hour rolls over (0.4ms)[0m

 10) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"2[31m2[0m:00"
     [36mrhs:  [0m"2[32m3[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.1ms)[0m

 11) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"0[31m4[0m:00"
     [36mrhs:  [0m"0[32m5[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[32m  * test create negative minutes (0.05ms)[0m
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 1.0 seconds (1.0s on load, 0.03s on tests)
[31m51 tests, 11 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.9ms)[0m
  * test create on the hour[31m  * test create on the hour (18.9ms)[0m

  1) test create on the hour (ClockTest)
     [1m[30mclock_test.exs:27[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(8, 0) |> to_string == "08:00"
     [36mlhs:  [0m"0[31m9[0m:00"
     [36mrhs:  [0m"0[32m8[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:28: (test)

  * test create past the hour[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours[31m  * test create midnight is zero hours (0.1ms)[0m

  2) test create midnight is zero hours (ClockTest)
     [1m[30mclock_test.exs:35[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(24, 0) |> to_string == "00:00"
     [36mlhs:  [0m"0[31m1[0m:00"
     [36mrhs:  [0m"0[32m0[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:36: (test)

  * test create hour rolls over[31m  * test create hour rolls over (0.1ms)[0m

  3) test create hour rolls over (ClockTest)
     [1m[30mclock_test.exs:39[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 0) |> to_string == "01:00"
     [36mlhs:  [0m"0[31m2[0m:00"
     [36mrhs:  [0m"0[32m1[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:40: (test)

  * test create hour rolls over continuously[31m  * test create hour rolls over continuously (0.1ms)[0m

  4) test create hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:43[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(100, 0) |> to_string == "04:00"
     [36mlhs:  [0m"0[31m5[0m:00"
     [36mrhs:  [0m"0[32m4[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:44: (test)

  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.8ms)[0m
  * test create minutes roll over[31m  * test create minutes roll over (0.3ms)[0m

  5) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m1[0m:40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.2ms)[0m

  6) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m1[0m:43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.2ms)[0m

  7) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m2[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.1ms)[0m

  8) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m0[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.1ms)[0m

  9) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"0[31m1[0m:00"
     [36mrhs:  [0m"0[32m0[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.06ms)[0m
  * test create negative hour rolls over[31m  * test create negative hour rolls over (0.09ms)[0m

 10) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"[31m00[0m:00"
     [36mrhs:  [0m"[32m23[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.09ms)[0m

 11) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"0[31m6[0m:00"
     [36mrhs:  [0m"0[32m5[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[31m  * test create negative minutes (0.09ms)[0m

 12) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m2[0m:20"
     [36mrhs:  [0m"0[32m0[0m:20"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.9 seconds (0.9s on load, 0.03s on tests)
[31m51 tests, 12 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

** (CompileError) clock.exs:12: undefined function minutes/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (5.3ms)[0m
  * test create on the hour[32m  * test create on the hour (3.3ms)[0m
  * test create past the hour[32m  * test create past the hour (0.05ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.08ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.03ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.03ms)[0m
  * test create minutes roll over[31m  * test create minutes roll over (9.0ms)[0m

  1) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m3[0m:40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.1ms)[0m

  2) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m7[0m:43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.1ms)[0m

  3) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m4[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.1ms)[0m

  4) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m2[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.1ms)[0m

  5) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.03ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.04ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.5s on load, 0.02s on tests)
[31m51 tests, 5 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:24

[33mwarning: [0mvariable hour is unused
  clock.exs:24

[33mwarning: [0mvariable minute is unused
  clock.exs:24

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.9ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[31m  * test create minutes roll over (8.9ms)[0m

  1) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m3[0m:40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.1ms)[0m

  2) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m7[0m:43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.05ms)[0m

  3) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m4[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.05ms)[0m

  4) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m2[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.05ms)[0m

  5) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.02ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.08ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (3.3ms)[0m
  * test create negative minutes[32m  * test create negative minutes (3.0ms)[0m
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.4s on load, 0.02s on tests)
[31m51 tests, 5 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:25

[33mwarning: [0mvariable hour is unused
  clock.exs:25

[33mwarning: [0mvariable minute is unused
  clock.exs:25

** (CompileError) clock.exs:13: undefined function substract_hour/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:25

[33mwarning: [0mvariable hour is unused
  clock.exs:25

[33mwarning: [0mvariable minute is unused
  clock.exs:25

** (CompileError) clock.exs:13: undefined function substract_hour/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:25

[33mwarning: [0mvariable hour is unused
  clock.exs:25

[33mwarning: [0mvariable minute is unused
  clock.exs:25

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (4.5ms)[0m
  * test create on the hour"subtract_hour 0"
[32m  * test create on the hour (3.5ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (0.08ms)[0m
  * test create midnight is zero hours"subtract_hour 0"
[32m  * test create midnight is zero hours (0.08ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.08ms)[0m
"subtract_hour 0"
  * test create hour rolls over continuously"subtract_hour 0"
[32m  * test create hour rolls over continuously (0.1ms)[0m
  * test create sixty minutes is next hour"subtract_hour 1"
[32m  * test create sixty minutes is next hour (0.09ms)[0m
  * test create minutes roll over"subtract_hour 27"
[31m  * test create minutes roll over (5.5ms)[0m
"subtract_hour 1"
"subtract_hour 49"
"subtract_hour 143"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour -1"

  1) test create minutes roll over (ClockTest)
     [1m[30mclock_test.exs:51[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 160) |> to_string == "02:40"
     [36mlhs:  [0m"0[31m3[0m:40"
     [36mrhs:  [0m"0[32m2[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:52: (test)

  * test create minutes roll over continuously[31m  * test create minutes roll over continuously (0.2ms)[0m

  2) test create minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:55[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 1723) |> to_string == "04:43"
     [36mlhs:  [0m"0[31m7[0m:43"
     [36mrhs:  [0m"0[32m4[0m:43"
     [36mstacktrace:[0m
       clock_test.exs:56: (test)

  * test create hour and minutes roll over[31m  * test create hour and minutes roll over (0.07ms)[0m

  3) test create hour and minutes roll over (ClockTest)
     [1m[30mclock_test.exs:59[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(25, 160) |> to_string == "03:40"
     [36mlhs:  [0m"0[31m4[0m:40"
     [36mrhs:  [0m"0[32m3[0m:40"
     [36mstacktrace:[0m
       clock_test.exs:60: (test)

  * test create hour and minutes roll over continuously[31m  * test create hour and minutes roll over continuously (0.07ms)[0m

  4) test create hour and minutes roll over continuously (ClockTest)
     [1m[30mclock_test.exs:63[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(201, 3001) |> to_string == "11:01"
     [36mlhs:  [0m"1[31m2[0m:01"
     [36mrhs:  [0m"1[32m1[0m:01"
     [36mstacktrace:[0m
       clock_test.exs:64: (test)

  * test create hour and minutes roll over to exactly midnight[31m  * test create hour and minutes roll over to exactly midnight (0.07ms)[0m

  5) test create hour and minutes roll over to exactly midnight (ClockTest)
     [1m[30mclock_test.exs:67[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(72, 8640) |> to_string == "00:00"
     [36mlhs:  [0m"[31m23[0m:00"
     [36mrhs:  [0m"[32m00[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:68: (test)

  * test create negative hour[32m  * test create negative hour (0.06ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.05ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.05ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.06ms)[0m
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.5s on load, 0.01s on tests)
[31m51 tests, 5 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:25

[33mwarning: [0mvariable hour is unused
  clock.exs:25

[33mwarning: [0mvariable minute is unused
  clock.exs:25

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (5.0ms)[0m
  * test create on the hour"subtract_hour 0"
[32m  * test create on the hour (2.7ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (0.07ms)[0m
  * test create midnight is zero hours"subtract_hour 0"
[32m  * test create midnight is zero hours (0.09ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.09ms)[0m
"subtract_hour 0"
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.06ms)[0m
"subtract_hour 0"
  * test create sixty minutes is next hour"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.07ms)[0m
  * test create minutes roll over"subtract_hour 0"
[32m  * test create minutes roll over (0.1ms)[0m
  * test create minutes roll over continuously"subtract_hour 0"
[32m  * test create minutes roll over continuously (0.08ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.07ms)[0m
"subtract_hour 0"
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over to exactly midnight"subtract_hour 0"
[32m  * test create hour and minutes roll over to exactly midnight (0.06ms)[0m
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
  * test create negative hour[32m  * test create negative hour (0.07ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.04ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.05ms)[0m
  * test create negative minutes[31m  * test create negative minutes (5.6ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m1[0m:20"
     [36mrhs:  [0m"0[32m0[0m:20"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.5s on load, 0.01s on tests)
[31m51 tests, 1 failure, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (7.1ms)[0m
  * test create on the hour"subtract_hour 0"
[32m  * test create on the hour (4.3ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (0.06ms)[0m
  * test create midnight is zero hours"subtract_hour 0"
[32m  * test create midnight is zero hours (0.07ms)[0m
  * test create hour rolls over"subtract_hour 0"
[32m  * test create hour rolls over (0.06ms)[0m
  * test create hour rolls over continuously"subtract_hour 0"
[32m  * test create hour rolls over continuously (0.06ms)[0m
  * test create sixty minutes is next hour"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.06ms)[0m
  * test create minutes roll over"subtract_hour 0"
[32m  * test create minutes roll over (0.06ms)[0m
  * test create minutes roll over continuously"subtract_hour 0"
[32m  * test create minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over"subtract_hour 0"
[32m  * test create hour and minutes roll over (0.06ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.08ms)[0m
"subtract_hour 0"
  * test create hour and minutes roll over to exactly midnight"subtract_hour 0"
[32m  * test create hour and minutes roll over to exactly midnight (0.06ms)[0m
  * test create negative hour"subtract_hour 0"
[32m  * test create negative hour (0.09ms)[0m
  * test create negative hour rolls over"subtract_hour 0"
[32m  * test create negative hour rolls over (0.06ms)[0m
  * test create negative hour rolls over continuously"subtract_hour -1"
[32m  * test create negative hour rolls over continuously (0.06ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.06ms)[0m
  * test create negative minutes roll over  * test create negative minutes roll over (skipped)
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.5s on load, 0.01s on tests)
[32m51 tests, 0 failures, 35 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (2.0ms)[0m
  * test create on the hour[32m  * test create on the hour (2.0ms)[0m
  * test create past the hour"subtract_hour 0"
"subtract_hour 0"
[32m  * test create past the hour (0.07ms)[0m
  * test create midnight is zero hours"subtract_hour 0"
[32m  * test create midnight is zero hours (0.06ms)[0m
  * test create hour rolls over"subtract_hour 0"
[32m  * test create hour rolls over (0.1ms)[0m
  * test create hour rolls over continuously"subtract_hour 0"
[32m  * test create hour rolls over continuously (0.07ms)[0m
  * test create sixty minutes is next hour"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.07ms)[0m
  * test create minutes roll over"subtract_hour 0"
[32m  * test create minutes roll over (0.05ms)[0m
  * test create minutes roll over continuously"subtract_hour 0"
[32m  * test create minutes roll over continuously (0.08ms)[0m
  * test create hour and minutes roll over"subtract_hour 0"
[32m  * test create hour and minutes roll over (0.06ms)[0m
  * test create hour and minutes roll over continuously"subtract_hour 0"
[32m  * test create hour and minutes roll over continuously (0.06ms)[0m
  * test create hour and minutes roll over to exactly midnight"subtract_hour 0"
[32m  * test create hour and minutes roll over to exactly midnight (0.07ms)[0m
  * test create negative hour[32m  * test create negative hour (0.3ms)[0m
"subtract_hour 0"
  * test create negative hour rolls over"subtract_hour 0"
[32m  * test create negative hour rolls over (0.6ms)[0m
  * test create negative hour rolls over continuously"subtract_hour -1"
[32m  * test create negative hour rolls over continuously (0.2ms)[0m
  * test create negative minutes"subtract_hour -1"
[32m  * test create negative minutes (0.09ms)[0m
  * test create negative minutes roll over[31m  * test create negative minutes roll over (21.0ms)[0m

  1) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"22:[31m-4[0m0"
     [36mrhs:  [0m"22:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.4s on load, 0.02s on tests)
[31m51 tests, 1 failure, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

** (CompileError) clock.exs:13: undefined function minutes/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

** (CompileError) clock.exs:13: undefined function minutes/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

** (CompileError) clock.exs:13: undefined function minutes/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (10.5ms)[0m
  * test create on the hour"subtract_hour 0"
[32m  * test create on the hour (7.9ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours"subtract_hour 0"
[32m  * test create midnight is zero hours (0.1ms)[0m
  * test create hour rolls over"subtract_hour 0"
[32m  * test create hour rolls over (0.07ms)[0m
  * test create hour rolls over continuously"subtract_hour 0"
[32m  * test create hour rolls over continuously (0.07ms)[0m
  * test create sixty minutes is next hour"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.08ms)[0m
  * test create minutes roll over"subtract_hour 0"
[32m  * test create minutes roll over (0.09ms)[0m
  * test create minutes roll over continuously"subtract_hour 0"
[32m  * test create minutes roll over continuously (0.2ms)[0m
  * test create hour and minutes roll over"subtract_hour 0"
[32m  * test create hour and minutes roll over (0.07ms)[0m
  * test create hour and minutes roll over continuously"subtract_hour 0"
[32m  * test create hour and minutes roll over continuously (0.06ms)[0m
  * test create hour and minutes roll over to exactly midnight"subtract_hour 0"
[32m  * test create hour and minutes roll over to exactly midnight (0.06ms)[0m
  * test create negative hour"subtract_hour 0"
[32m  * test create negative hour (0.07ms)[0m
  * test create negative hour rolls over"subtract_hour 0"
[32m  * test create negative hour rolls over (0.06ms)[0m
  * test create negative hour rolls over continuously"subtract_hour 1"
[32m  * test create negative hour rolls over continuously (0.07ms)[0m
  * test create negative minutes"subtract_hour 1"
[31m  * test create negative minutes (7.3ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m2[0m:0[31m0[0m"
     [36mrhs:  [0m"0[32m0[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over[31m  * test create negative minutes roll over (0.4ms)[0m

  2) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"[31m00[0m:0[31m0[0m"
     [36mrhs:  [0m"[32m22[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.4s on load, 0.03s on tests)
[31m51 tests, 2 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable subtract_minutes is unused
  clock.exs:12

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.9ms)[0m
  * test create on the hour"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
[32m  * test create on the hour (9.0ms)[0m
  * test create past the hour[32m  * test create past the hour (0.9ms)[0m
"subtract_hour 1"
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.1ms)[0m
  * test create hour rolls over"subtract_hour 1"
[32m  * test create hour rolls over (0.2ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.09ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.06ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.05ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.06ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.06ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.04ms)[0m
  * test create negative hour[32m  * test create negative hour (0.04ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.04ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (1.2ms)[0m
  * test create negative minutes[31m  * test create negative minutes (9.7ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m2[0m:20"
     [36mrhs:  [0m"0[32m0[0m:20"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over[31m  * test create negative minutes roll over (0.4ms)[0m

  2) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"00:-40"
     [36mrhs:  [0m"22:20"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.5s on load, 0.02s on tests)
[31m51 tests, 2 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable subtract_minutes is unused
  clock.exs:12

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (3.0ms)[0m
  * test create on the hour"subtract_hour 0"
[32m  * test create on the hour (1.6ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours"subtract_hour 0"
[32m  * test create midnight is zero hours (0.07ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.08ms)[0m
"subtract_hour 0"
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.07ms)[0m
  * test create sixty minutes is next hour"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.06ms)[0m
"subtract_hour 0"
  * test create minutes roll over"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 0"
"subtract_hour 1"
[32m  * test create minutes roll over (0.1ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over"subtract_hour 1"
[32m  * test create hour and minutes roll over (0.05ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.04ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.05ms)[0m
  * test create negative hour[32m  * test create negative hour (0.05ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.05ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.05ms)[0m
  * test create negative minutes[31m  * test create negative minutes (3.6ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"0[31m2[0m:20"
     [36mrhs:  [0m"0[32m0[0m:20"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over[31m  * test create negative minutes roll over (0.1ms)[0m

  2) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"00:-40"
     [36mrhs:  [0m"22:20"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.4 seconds (0.4s on load, 0.01s on tests)
[31m51 tests, 2 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable subtract_minutes is unused
  clock.exs:12

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.4ms)[0m
  * test create on the hour"subtract_hour 0"
"subtract_hour 0"
[32m  * test create on the hour (2.0ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.08ms)[0m
  * test create hour rolls over"subtract_hour 0"
[32m  * test create hour rolls over (0.2ms)[0m
  * test create hour rolls over continuously"subtract_hour 0"
"subtract_hour 0"
[32m  * test create hour rolls over continuously (0.2ms)[0m
  * test create sixty minutes is next hour"subtract_hour 0"
"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.1ms)[0m
"subtract_hour 0"
  * test create minutes roll over"subtract_hour 0"
[32m  * test create minutes roll over (0.3ms)[0m
"subtract_hour 0"
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.2ms)[0m
"subtract_hour 0"
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.4ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.5ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.4ms)[0m
  * test create negative hour"subtract_hour 0"
[32m  * test create negative hour (2.1ms)[0m
  * test create negative hour rolls over"subtract_hour 0"
[32m  * test create negative hour rolls over (0.2ms)[0m
  * test create negative hour rolls over continuously"subtract_hour -1"
[32m  * test create negative hour rolls over continuously (0.1ms)[0m
  * test create negative minutes"subtract_hour -1"
[32m  * test create negative minutes (0.08ms)[0m
  * test create negative minutes roll over[31m  * test create negative minutes roll over (29.0ms)[0m

  1) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"22:[31m-4[0m0"
     [36mrhs:  [0m"22:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.5 seconds (0.5s on load, 0.04s on tests)
[31m51 tests, 1 failure, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable subtract_minutes is unused
  clock.exs:12

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

** (CompileError) clock.exs:18: undefined function subtract_minute/0
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:28

[33mwarning: [0mvariable hour is unused
  clock.exs:28

[33mwarning: [0mvariable minute is unused
  clock.exs:28

Excluding tags: [:pending]


ClockTest
  * test to_string"subtract_hour 0"
[32m  * test to_string (3.4ms)[0m
  * test create on the hour"subtract_hour 0"
[32m  * test create on the hour (6.3ms)[0m
  * test create past the hour"subtract_hour 0"
[32m  * test create past the hour (1.0ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.1ms)[0m
  * test create hour rolls over"subtract_hour 0"
[32m  * test create hour rolls over (0.1ms)[0m
  * test create hour rolls over continuously"subtract_hour 0"
[32m  * test create hour rolls over continuously (0.1ms)[0m
"subtract_hour 0"
  * test create sixty minutes is next hour"subtract_hour 0"
[32m  * test create sixty minutes is next hour (0.1ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.1ms)[0m
"subtract_hour 0"
  * test create minutes roll over continuously"subtract_hour 0"
[32m  * test create minutes roll over continuously (0.1ms)[0m
  * test create hour and minutes roll over"subtract_hour 0"
[32m  * test create hour and minutes roll over (0.4ms)[0m
  * test create hour and minutes roll over continuously"subtract_hour 0"
[32m  * test create hour and minutes roll over continuously (0.3ms)[0m
  * test create hour and minutes roll over to exactly midnight"subtract_hour 0"
[32m  * test create hour and minutes roll over to exactly midnight (0.6ms)[0m
  * test create negative hour[32m  * test create negative hour (0.5ms)[0m
  * test create negative hour rolls over"subtract_hour 0"
[32m  * test create negative hour rolls over (1.3ms)[0m
"subtract_hour 0"
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.3ms)[0m
"subtract_hour -1"
  * test create negative minutes"subtract_hour -1"
[31m  * test create negative minutes (15.0ms)[0m

  1) test create negative minutes (ClockTest)
     [1m[30mclock_test.exs:83[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -40) |> to_string == "00:20"
     [36mlhs:  [0m"00:0[31m0[0m"
     [36mrhs:  [0m"00:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:84: (test)

  * test create negative minutes roll over[31m  * test create negative minutes roll over (0.2ms)[0m

  2) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"22:0[31m0[0m"
     [36mrhs:  [0m"22:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.6 seconds (0.6s on load, 0.03s on tests)
[31m51 tests, 2 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:23

[33mwarning: [0mvariable hour is unused
  clock.exs:23

[33mwarning: [0mvariable minute is unused
  clock.exs:23

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.8ms)[0m
  * test create on the hour[32m  * test create on the hour (1.2ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.03ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[31m  * test create negative hour (3.2ms)[0m

  1) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"00:-45"
     [36mrhs:  [0m"23:15"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over[31m  * test create negative hour rolls over (0.05ms)[0m

  2) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"[31m-1[0m:00"
     [36mrhs:  [0m"[32m23[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.07ms)[0m

  3) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"[31m-19[0m:00"
     [36mrhs:  [0m"[32m05[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[32m  * test create negative minutes (0.02ms)[0m
  * test create negative minutes roll over[31m  * test create negative minutes roll over (1.7ms)[0m

  4) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"-1:-40"
     [36mrhs:  [0m"22:20"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.2s on load, 0.01s on tests)
[31m51 tests, 4 failures, 34 skipped[0m

Randomized with seed 0
** (SyntaxError) clock.exs:24: syntax error before: ','
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

** (SyntaxError) clock.exs:24: syntax error before: '}'
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

[33mwarning: [0mvariable add_minute is unused
  clock.exs:34

[33mwarning: [0mvariable hour is unused
  clock.exs:34

[33mwarning: [0mvariable minute is unused
  clock.exs:34

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (1.9ms)[0m
  * test create on the hour[32m  * test create on the hour (0.01ms)[0m
  * test create past the hour[32m  * test create past the hour (0.00ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.00ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.00ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.00ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.00ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.00ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.00ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.00ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.00ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.00ms)[0m
  * test create negative hour[31m  * test create negative hour (1.9ms)[0m

  1) test create negative hour (ClockTest)
     [1m[30mclock_test.exs:71[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-1, 15) |> to_string == "23:15"
     [36mlhs:  [0m"[31m00[0m:[31m4[0m5"
     [36mrhs:  [0m"[32m23[0m:[32m1[0m5"
     [36mstacktrace:[0m
       clock_test.exs:72: (test)

  * test create negative hour rolls over[31m  * test create negative hour rolls over (0.7ms)[0m

  2) test create negative hour rolls over (ClockTest)
     [1m[30mclock_test.exs:75[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-25, 0) |> to_string == "23:00"
     [36mlhs:  [0m"[31m01[0m:00"
     [36mrhs:  [0m"[32m23[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:76: (test)

  * test create negative hour rolls over continuously[31m  * test create negative hour rolls over continuously (0.02ms)[0m

  3) test create negative hour rolls over continuously (ClockTest)
     [1m[30mclock_test.exs:79[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(-91, 0) |> to_string == "05:00"
     [36mlhs:  [0m"[31m19[0m:00"
     [36mrhs:  [0m"[32m05[0m:00"
     [36mstacktrace:[0m
       clock_test.exs:80: (test)

  * test create negative minutes[32m  * test create negative minutes (0.05ms)[0m
  * test create negative minutes roll over[31m  * test create negative minutes roll over (0.05ms)[0m

  4) test create negative minutes roll over (ClockTest)
     [1m[30mclock_test.exs:87[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(1, -160) |> to_string == "22:20"
     [36mlhs:  [0m"[31m01[0m:[31m4[0m0"
     [36mrhs:  [0m"[32m22[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:88: (test)

  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 4 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:34

[33mwarning: [0mvariable hour is unused
  clock.exs:34

[33mwarning: [0mvariable minute is unused
  clock.exs:34

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.2ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.04ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.05ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.1ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.08ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.02ms)[0m
  * test create negative minutes roll over continuously  * test create negative minutes roll over continuously (skipped)
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 34 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:34

[33mwarning: [0mvariable hour is unused
  clock.exs:34

[33mwarning: [0mvariable minute is unused
  clock.exs:34

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.2ms)[0m
  * test create on the hour[32m  * test create on the hour (0.9ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.04ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.1ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.02ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.03ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over  * test create negative hour and minutes roll over (skipped)
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 33 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:34

[33mwarning: [0mvariable hour is unused
  clock.exs:34

[33mwarning: [0mvariable minute is unused
  clock.exs:34

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.2ms)[0m
  * test create on the hour[32m  * test create on the hour (0.02ms)[0m
  * test create past the hour[32m  * test create past the hour (0.8ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.02ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.08ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.04ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.09ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously  * test create negative hour and minutes roll over continuously (skipped)
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 32 skipped[0m

Randomized with seed 0
[33mwarning: [0mvariable add_minute is unused
  clock.exs:34

[33mwarning: [0mvariable hour is unused
  clock.exs:34

[33mwarning: [0mvariable minute is unused
  clock.exs:34

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.0ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.04ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.02ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.07ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes  * test add add minutes (skipped)
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures, 31 skipped[0m

Randomized with seed 0
** (SyntaxError) clock.exs:44: syntax error before: '='
    (elixir) lib/code.ex:321: Code.load_file/2
    clock_test.exs:2: (file)
    (elixir) lib/code.ex:363: Code.require_file/2

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (4.5ms)[0m
  * test create on the hour[32m  * test create on the hour (15.7ms)[0m
  * test create past the hour[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.03ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.1ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.04ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.06ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.03ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.1ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.03ms)[0m
  * test create negative hour[32m  * test create negative hour (0.04ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.03ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.05ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.03ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.02ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.02ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.02ms)[0m
  * test add add minutes[32m  * test add add minutes (0.03ms)[0m
  * test add add no minutes  * test add add no minutes (skipped)
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.8 seconds (0.8s on load, 0.02s on tests)
[32m51 tests, 0 failures, 30 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.7ms)[0m
  * test create on the hour[32m  * test create on the hour (2.1ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.5ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.03ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.03ms)[0m
  * test create negative hour[32m  * test create negative hour (0.08ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.07ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.02ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.07ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.02ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.05ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.2ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.02ms)[0m
  * test add add minutes[32m  * test add add minutes (0.03ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour  * test add add to next hour (skipped)
  * test add add more than one hour  * test add add more than one hour (skipped)
  * test add add more than two hours with carry  * test add add more than two hours with carry (skipped)
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.8 seconds (0.8s on load, 0.01s on tests)
[32m51 tests, 0 failures, 29 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.1ms)[0m
  * test create on the hour[32m  * test create on the hour (0.8ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.02ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.02ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.00ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.01ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.01ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.01ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.02ms)[0m
  * test add add across midnight  * test add add across midnight (skipped)
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days  * test add add more than two days (skipped)
  * test add subtract minutes  * test add subtract minutes (skipped)
  * test add subtract to previous hour  * test add subtract to previous hour (skipped)
  * test add subtract more than an hour  * test add subtract more than an hour (skipped)
  * test add subtract across midnight  * test add subtract across midnight (skipped)
  * test add subtract more than two hours  * test add subtract more than two hours (skipped)
  * test add subtract more than two hours with borrow  * test add subtract more than two hours with borrow (skipped)
  * test add subtract more than one day (1500 min = 25 hrs)  * test add subtract more than one day (1500 min = 25 hrs) (skipped)
  * test add subtract more than two days  * test add subtract more than two days (skipped)
  * test == clocks with same time  * test == clocks with same time (skipped)
  * test == clocks a minute apart  * test == clocks a minute apart (skipped)
  * test == clocks an hour apart  * test == clocks an hour apart (skipped)
  * test == clocks with hour overflow  * test == clocks with hour overflow (skipped)
  * test == clocks with hour overflow by several days  * test == clocks with hour overflow by several days (skipped)
  * test == clocks with negative hour  * test == clocks with negative hour (skipped)
  * test == clocks with negative hour that wraps  * test == clocks with negative hour that wraps (skipped)
  * test == clocks with negative hour that wraps multiple times  * test == clocks with negative hour that wraps multiple times (skipped)
  * test == clocks with minute overflow  * test == clocks with minute overflow (skipped)
  * test == clocks with minute overflow by several days  * test == clocks with minute overflow by several days (skipped)
  * test == clocks with negative minute  * test == clocks with negative minute (skipped)
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.4 seconds (0.4s on load, 0.00s on tests)
[32m51 tests, 0 failures, 26 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (5.7ms)[0m
  * test create on the hour[32m  * test create on the hour (1.1ms)[0m
  * test create past the hour[32m  * test create past the hour (0.05ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.05ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.03ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.02ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.02ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.02ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.02ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.03ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.02ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.02ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.02ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.1ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.07ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.1ms)[0m
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[32m  * test add add more than two days (0.1ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.1ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.1ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.2ms)[0m
  * test add subtract across midnight[31m  * test add subtract across midnight (9.6ms)[0m

  1) test add subtract across midnight (ClockTest)
     [1m[30mclock_test.exs:150[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 3) |> Clock.add(-4) |> to_string == "23:59"
     [36mlhs:  [0m"00:-1"
     [36mrhs:  [0m"23:59"
     [36mstacktrace:[0m
       clock_test.exs:151: (test)

  * test add subtract more than two hours[31m  * test add subtract more than two hours (0.08ms)[0m

  2) test add subtract more than two hours (ClockTest)
     [1m[30mclock_test.exs:154[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 0) |> Clock.add(-160) |> to_string == "21:20"
     [36mlhs:  [0m"[31m-[0m2:[31m-4[0m0"
     [36mrhs:  [0m"2[32m1[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:155: (test)

  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.04ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[31m  * test add subtract more than one day (1500 min = 25 hrs) (0.04ms)[0m

  3) test add subtract more than one day (1500 min = 25 hrs) (ClockTest)
     [1m[30mclock_test.exs:162[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(5, 32) |> Clock.add(-1500) |> to_string == "04:32"
     [36mlhs:  [0m"-19:-28"
     [36mrhs:  [0m"04:32"
     [36mstacktrace:[0m
       clock_test.exs:163: (test)

  * test add subtract more than two days[31m  * test add subtract more than two days (0.05ms)[0m

  4) test add subtract more than two days (ClockTest)
     [1m[30mclock_test.exs:166[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(2, 20) |> Clock.add(-3000) |> to_string == "00:20"
     [36mlhs:  [0m"[31m-23[0m:[31m-4[0m0"
     [36mrhs:  [0m"[32m00[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:167: (test)

  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.4 seconds (0.4s on load, 0.02s on tests)
[31m51 tests, 4 failures, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.7ms)[0m
  * test create on the hour[32m  * test create on the hour (1.0ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.02ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.06ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.02ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.02ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.02ms)[0m
  * test add add minutes[32m  * test add add minutes (0.02ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.01ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.01ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.01ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.01ms)[0m
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[32m  * test add add more than two days (0.02ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.04ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.07ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.02ms)[0m
  * test add subtract across midnight[31m  * test add subtract across midnight (3.1ms)[0m

  1) test add subtract across midnight (ClockTest)
     [1m[30mclock_test.exs:150[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 3) |> Clock.add(-4) |> to_string == "23:59"
     [36mlhs:  [0m"00:-1"
     [36mrhs:  [0m"23:59"
     [36mstacktrace:[0m
       clock_test.exs:151: (test)

  * test add subtract more than two hours[31m  * test add subtract more than two hours (0.05ms)[0m

  2) test add subtract more than two hours (ClockTest)
     [1m[30mclock_test.exs:154[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 0) |> Clock.add(-160) |> to_string == "21:20"
     [36mlhs:  [0m"[31m-[0m2:[31m-4[0m0"
     [36mrhs:  [0m"2[32m1[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:155: (test)

  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.03ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[31m  * test add subtract more than one day (1500 min = 25 hrs) (0.03ms)[0m

  3) test add subtract more than one day (1500 min = 25 hrs) (ClockTest)
     [1m[30mclock_test.exs:162[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(5, 32) |> Clock.add(-1500) |> to_string == "04:32"
     [36mlhs:  [0m"-19:-28"
     [36mrhs:  [0m"04:32"
     [36mstacktrace:[0m
       clock_test.exs:163: (test)

  * test add subtract more than two days[31m  * test add subtract more than two days (0.07ms)[0m

  4) test add subtract more than two days (ClockTest)
     [1m[30mclock_test.exs:166[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(2, 20) |> Clock.add(-3000) |> to_string == "00:20"
     [36mlhs:  [0m"[31m-23[0m:[31m-4[0m0"
     [36mrhs:  [0m"[32m00[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:167: (test)

  * test == clocks with same time[32m  * test == clocks with same time (0.01ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.01s on tests)
[31m51 tests, 4 failures, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.0ms)[0m
  * test create on the hour[32m  * test create on the hour (1.2ms)[0m
  * test create past the hour[32m  * test create past the hour (0.06ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.04ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.03ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.03ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.04ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[31m  * test add add minutes (2.5ms)[0m

  1) test add add minutes (ClockTest)
     [1m[30mclock_test.exs:105[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 10, minute: 3}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:106: (test)

  * test add add no minutes[31m  * test add add no minutes (0.01ms)[0m

  2) test add add no minutes (ClockTest)
     [1m[30mclock_test.exs:109[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 6, minute: 41}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:110: (test)

  * test add add to next hour[31m  * test add add to next hour (0.00ms)[0m

  3) test add add to next hour (ClockTest)
     [1m[30mclock_test.exs:113[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 1, minute: 25}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:114: (test)

  * test add add more than one hour[31m  * test add add more than one hour (0.00ms)[0m

  4) test add add more than one hour (ClockTest)
     [1m[30mclock_test.exs:117[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 11, minute: 1}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:118: (test)

  * test add add more than two hours with carry[31m  * test add add more than two hours with carry (0.00ms)[0m

  5) test add add more than two hours with carry (ClockTest)
     [1m[30mclock_test.exs:121[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 3, minute: 25}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:122: (test)

  * test add add across midnight[31m  * test add add across midnight (0.00ms)[0m

  6) test add add across midnight (ClockTest)
     [1m[30mclock_test.exs:125[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 0, minute: 1}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:126: (test)

  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[31m  * test add add more than two days (0.00ms)[0m

  7) test add add more than two days (ClockTest)
     [1m[30mclock_test.exs:134[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 11, minute: 21}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:135: (test)

  * test add subtract minutes[31m  * test add subtract minutes (0.00ms)[0m

  8) test add subtract minutes (ClockTest)
     [1m[30mclock_test.exs:138[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 10, minute: 0}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:139: (test)

  * test add subtract to previous hour[31m  * test add subtract to previous hour (0.00ms)[0m

  9) test add subtract to previous hour (ClockTest)
     [1m[30mclock_test.exs:142[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 9, minute: 33}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:143: (test)

  * test add subtract more than an hour[31m  * test add subtract more than an hour (0.00ms)[0m

 10) test add subtract more than an hour (ClockTest)
     [1m[30mclock_test.exs:146[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 8, minute: 53}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:147: (test)

  * test add subtract across midnight[31m  * test add subtract across midnight (0.00ms)[0m

 11) test add subtract across midnight (ClockTest)
     [1m[30mclock_test.exs:150[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 0, minute: -1}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:151: (test)

  * test add subtract more than two hours[31m  * test add subtract more than two hours (0.00ms)[0m

 12) test add subtract more than two hours (ClockTest)
     [1m[30mclock_test.exs:154[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: -2, minute: -40}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:155: (test)

  * test add subtract more than two hours with borrow[31m  * test add subtract more than two hours with borrow (0.00ms)[0m

 13) test add subtract more than two hours with borrow (ClockTest)
     [1m[30mclock_test.exs:158[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 3, minute: 35}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:159: (test)

  * test add subtract more than one day (1500 min = 25 hrs)[31m  * test add subtract more than one day (1500 min = 25 hrs) (0.00ms)[0m

 14) test add subtract more than one day (1500 min = 25 hrs) (ClockTest)
     [1m[30mclock_test.exs:162[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: -19, minute: -28}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:163: (test)

  * test add subtract more than two days[31m  * test add subtract more than two days (0.00ms)[0m

 15) test add subtract more than two days (ClockTest)
     [1m[30mclock_test.exs:166[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: -23, minute: -40}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:167: (test)

  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[31m51 tests, 15 failures, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.2ms)[0m
  * test create on the hour[32m  * test create on the hour (2.0ms)[0m
  * test create past the hour[32m  * test create past the hour (0.1ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.09ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.1ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.04ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.03ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.02ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.02ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.03ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.02ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.02ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.02ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.02ms)[0m
  * test add add minutes[31m  * test add add minutes (5.2ms)[0m

  1) test add add minutes (ClockTest)
     [1m[30mclock_test.exs:105[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 10, minute: 3}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:106: (test)

  * test add add no minutes[31m  * test add add no minutes (0.03ms)[0m

  2) test add add no minutes (ClockTest)
     [1m[30mclock_test.exs:109[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 6, minute: 41}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:110: (test)

  * test add add to next hour[31m  * test add add to next hour (0.02ms)[0m

  3) test add add to next hour (ClockTest)
     [1m[30mclock_test.exs:113[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 1, minute: 25}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:114: (test)

  * test add add more than one hour[31m  * test add add more than one hour (0.01ms)[0m

  4) test add add more than one hour (ClockTest)
     [1m[30mclock_test.exs:117[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 11, minute: 1}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:118: (test)

  * test add add more than two hours with carry[31m  * test add add more than two hours with carry (0.01ms)[0m

  5) test add add more than two hours with carry (ClockTest)
     [1m[30mclock_test.exs:121[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 3, minute: 25}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:122: (test)

  * test add add across midnight[31m  * test add add across midnight (0.01ms)[0m

  6) test add add across midnight (ClockTest)
     [1m[30mclock_test.exs:125[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 0, minute: 1}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:126: (test)

  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[31m  * test add add more than two days (0.01ms)[0m

  7) test add add more than two days (ClockTest)
     [1m[30mclock_test.exs:134[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 11, minute: 21}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:135: (test)

  * test add subtract minutes[31m  * test add subtract minutes (0.01ms)[0m

  8) test add subtract minutes (ClockTest)
     [1m[30mclock_test.exs:138[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 10, minute: 0}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:139: (test)

  * test add subtract to previous hour[31m  * test add subtract to previous hour (0.01ms)[0m

  9) test add subtract to previous hour (ClockTest)
     [1m[30mclock_test.exs:142[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 9, minute: 33}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:143: (test)

  * test add subtract more than an hour[31m  * test add subtract more than an hour (0.01ms)[0m

 10) test add subtract more than an hour (ClockTest)
     [1m[30mclock_test.exs:146[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 8, minute: 53}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:147: (test)

  * test add subtract across midnight[31m  * test add subtract across midnight (0.01ms)[0m

 11) test add subtract across midnight (ClockTest)
     [1m[30mclock_test.exs:150[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 0, minute: -1}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:151: (test)

  * test add subtract more than two hours[31m  * test add subtract more than two hours (0.01ms)[0m

 12) test add subtract more than two hours (ClockTest)
     [1m[30mclock_test.exs:154[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: -2, minute: -40}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:155: (test)

  * test add subtract more than two hours with borrow[31m  * test add subtract more than two hours with borrow (0.01ms)[0m

 13) test add subtract more than two hours with borrow (ClockTest)
     [1m[30mclock_test.exs:158[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: 3, minute: 35}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:159: (test)

  * test add subtract more than one day (1500 min = 25 hrs)[31m  * test add subtract more than one day (1500 min = 25 hrs) (0.01ms)[0m

 14) test add subtract more than one day (1500 min = 25 hrs) (ClockTest)
     [1m[30mclock_test.exs:162[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: -19, minute: -28}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:163: (test)

  * test add subtract more than two days[31m  * test add subtract more than two days (0.01ms)[0m

 15) test add subtract more than two days (ClockTest)
     [1m[30mclock_test.exs:166[0m
     [31m** (KeyError) key :minutes not found in: %Clock{hour: -23, minute: -40}[0m
     [36mstacktrace:[0m
       clock.exs:46: Clock.add/2
       clock_test.exs:167: (test)

  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m51 tests, 15 failures, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (1.9ms)[0m
  * test create on the hour[32m  * test create on the hour (0.01ms)[0m
  * test create past the hour[32m  * test create past the hour (0.8ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.02ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.02ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.04ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.02ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.03ms)[0m
  * test add add minutes[32m  * test add add minutes (0.01ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.01ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.01ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.01ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.01ms)[0m
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[32m  * test add add more than two days (0.01ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.01ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.01ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.02ms)[0m
  * test add subtract across midnight[31m  * test add subtract across midnight (2.7ms)[0m

  1) test add subtract across midnight (ClockTest)
     [1m[30mclock_test.exs:150[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 3) |> Clock.add(-4) |> to_string == "23:59"
     [36mlhs:  [0m"00:-1"
     [36mrhs:  [0m"23:59"
     [36mstacktrace:[0m
       clock_test.exs:151: (test)

  * test add subtract more than two hours[31m  * test add subtract more than two hours (0.04ms)[0m

  2) test add subtract more than two hours (ClockTest)
     [1m[30mclock_test.exs:154[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(0, 0) |> Clock.add(-160) |> to_string == "21:20"
     [36mlhs:  [0m"[31m-[0m2:[31m-4[0m0"
     [36mrhs:  [0m"2[32m1[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:155: (test)

  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.01ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[31m  * test add subtract more than one day (1500 min = 25 hrs) (0.02ms)[0m

  3) test add subtract more than one day (1500 min = 25 hrs) (ClockTest)
     [1m[30mclock_test.exs:162[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(5, 32) |> Clock.add(-1500) |> to_string == "04:32"
     [36mlhs:  [0m"-19:-28"
     [36mrhs:  [0m"04:32"
     [36mstacktrace:[0m
       clock_test.exs:163: (test)

  * test add subtract more than two days[31m  * test add subtract more than two days (0.02ms)[0m

  4) test add subtract more than two days (ClockTest)
     [1m[30mclock_test.exs:166[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(2, 20) |> Clock.add(-3000) |> to_string == "00:20"
     [36mlhs:  [0m"[31m-23[0m:[31m-4[0m0"
     [36mrhs:  [0m"[32m00[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:167: (test)

  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[31m51 tests, 4 failures, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.8ms)[0m
  * test create on the hour[32m  * test create on the hour (0.03ms)[0m
  * test create past the hour[32m  * test create past the hour (1.1ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.05ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.03ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.02ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.01ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.02ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.1ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.02ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.3ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.02ms)[0m
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[32m  * test add add more than two days (0.02ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.01ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.01ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.01ms)[0m
  * test add subtract across midnight[32m  * test add subtract across midnight (0.01ms)[0m
  * test add subtract more than two hours[32m  * test add subtract more than two hours (0.01ms)[0m
  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.01ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[32m  * test add subtract more than one day (1500 min = 25 hrs) (0.01ms)[0m
  * test add subtract more than two days[31m  * test add subtract more than two days (3.8ms)[0m

  1) test add subtract more than two days (ClockTest)
     [1m[30mclock_test.exs:166[0m
     [31mAssertion with == failed[0m
     [36mcode: [0mClock.new(2, 20) |> Clock.add(-3000) |> to_string == "00:20"
     [36mlhs:  [0m"[31m-23[0m:[31m-4[0m0"
     [36mrhs:  [0m"[32m00[0m:[32m2[0m0"
     [36mstacktrace:[0m
       clock_test.exs:167: (test)

  * test == clocks with same time[32m  * test == clocks with same time (0.01ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.3 seconds (0.3s on load, 0.01s on tests)
[31m51 tests, 1 failure, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.9ms)[0m
  * test create on the hour[32m  * test create on the hour (1.1ms)[0m
  * test create past the hour[32m  * test create past the hour (0.02ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.03ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.08ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.03ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.02ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.03ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.02ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.02ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.02ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.05ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.1ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.1ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.1ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.03ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.01ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.01ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.01ms)[0m
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[32m  * test add add more than two days (0.01ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.01ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.01ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.01ms)[0m
  * test add subtract across midnight[32m  * test add subtract across midnight (0.01ms)[0m
  * test add subtract more than two hours[32m  * test add subtract more than two hours (0.01ms)[0m
  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.01ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[32m  * test add subtract more than one day (1500 min = 25 hrs) (0.01ms)[0m
  * test add subtract more than two days[32m  * test add subtract more than two days (0.01ms)[0m
  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.01ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps  * test == clocks with negative minute that wraps (skipped)
  * test == clocks with negative minute that wraps multiple times  * test == clocks with negative minute that wraps multiple times (skipped)
  * test == clocks with negative hours and minutes  * test == clocks with negative hours and minutes (skipped)
  * test == clocks with negative hours and minutes that wrap  * test == clocks with negative hours and minutes that wrap (skipped)


Finished in 0.4 seconds (0.4s on load, 0.00s on tests)
[32m51 tests, 0 failures, 5 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (3.3ms)[0m
  * test create on the hour[32m  * test create on the hour (0.02ms)[0m
  * test create past the hour[32m  * test create past the hour (1.4ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.02ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.02ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.02ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.02ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.03ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.01ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.01ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.00ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.03ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.02ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.06ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.02ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.02ms)[0m
  * test add add more than one day (1500 min = 25 hrs)  * test add add more than one day (1500 min = 25 hrs) (skipped)
  * test add add more than two days[32m  * test add add more than two days (0.02ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.02ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.01ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.01ms)[0m
  * test add subtract across midnight[32m  * test add subtract across midnight (0.01ms)[0m
  * test add subtract more than two hours[32m  * test add subtract more than two hours (0.02ms)[0m
  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.02ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[32m  * test add subtract more than one day (1500 min = 25 hrs) (0.01ms)[0m
  * test add subtract more than two days[32m  * test add subtract more than two days (0.01ms)[0m
  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps[32m  * test == clocks with negative minute that wraps (0.00ms)[0m
  * test == clocks with negative minute that wraps multiple times[32m  * test == clocks with negative minute that wraps multiple times (0.00ms)[0m
  * test == clocks with negative hours and minutes[32m  * test == clocks with negative hours and minutes (0.00ms)[0m
  * test == clocks with negative hours and minutes that wrap[32m  * test == clocks with negative hours and minutes that wrap (0.00ms)[0m


Finished in 0.3 seconds (0.3s on load, 0.00s on tests)
[32m51 tests, 0 failures, 1 skipped[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.6ms)[0m
  * test create on the hour[32m  * test create on the hour (1.0ms)[0m
  * test create past the hour[32m  * test create past the hour (0.04ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.03ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.02ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.02ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.02ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.05ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.6ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.02ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.01ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.01ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.01ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.01ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.01ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.01ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.01ms)[0m
  * test add add more than one day (1500 min = 25 hrs)[32m  * test add add more than one day (1500 min = 25 hrs) (0.01ms)[0m
  * test add add more than two days[32m  * test add add more than two days (0.01ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.01ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.01ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.01ms)[0m
  * test add subtract across midnight[32m  * test add subtract across midnight (0.01ms)[0m
  * test add subtract more than two hours[32m  * test add subtract more than two hours (0.01ms)[0m
  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.01ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[32m  * test add subtract more than one day (1500 min = 25 hrs) (0.01ms)[0m
  * test add subtract more than two days[32m  * test add subtract more than two days (0.02ms)[0m
  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps[32m  * test == clocks with negative minute that wraps (0.00ms)[0m
  * test == clocks with negative minute that wraps multiple times[32m  * test == clocks with negative minute that wraps multiple times (0.00ms)[0m
  * test == clocks with negative hours and minutes[32m  * test == clocks with negative hours and minutes (0.00ms)[0m
  * test == clocks with negative hours and minutes that wrap[32m  * test == clocks with negative hours and minutes that wrap (0.00ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures[0m

Randomized with seed 0
** (CompileError) clock.exs:13: undefined function clock_from_total_minutes/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

** (CompileError) clock.exs:13: undefined function clock_from_total_minutes/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

** (CompileError) clock.exs:13: undefined function clock_from_total_minutes/2
    (stdlib) lists.erl:1338: :lists.foreach/2
    clock.exs:1: (file)
    (elixir) lib/code.ex:321: Code.load_file/2

Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.6ms)[0m
  * test create on the hour[32m  * test create on the hour (0.01ms)[0m
  * test create past the hour[32m  * test create past the hour (0.7ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.01ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.03ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.03ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.04ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.02ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.01ms)[0m
  * test add add minutes[32m  * test add add minutes (0.01ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.01ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.01ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.01ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.05ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.03ms)[0m
  * test add add more than one day (1500 min = 25 hrs)[32m  * test add add more than one day (1500 min = 25 hrs) (0.03ms)[0m
  * test add add more than two days[32m  * test add add more than two days (0.01ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.01ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.01ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.01ms)[0m
  * test add subtract across midnight[32m  * test add subtract across midnight (0.01ms)[0m
  * test add subtract more than two hours[32m  * test add subtract more than two hours (0.05ms)[0m
  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.01ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[32m  * test add subtract more than one day (1500 min = 25 hrs) (0.01ms)[0m
  * test add subtract more than two days[32m  * test add subtract more than two days (0.01ms)[0m
  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps[32m  * test == clocks with negative minute that wraps (0.00ms)[0m
  * test == clocks with negative minute that wraps multiple times[32m  * test == clocks with negative minute that wraps multiple times (0.00ms)[0m
  * test == clocks with negative hours and minutes[32m  * test == clocks with negative hours and minutes (0.00ms)[0m
  * test == clocks with negative hours and minutes that wrap[32m  * test == clocks with negative hours and minutes that wrap (0.00ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures[0m

Randomized with seed 0
Excluding tags: [:pending]


ClockTest
  * test to_string[32m  * test to_string (2.7ms)[0m
  * test create on the hour[32m  * test create on the hour (1.4ms)[0m
  * test create past the hour[32m  * test create past the hour (0.03ms)[0m
  * test create midnight is zero hours[32m  * test create midnight is zero hours (0.02ms)[0m
  * test create hour rolls over[32m  * test create hour rolls over (0.01ms)[0m
  * test create hour rolls over continuously[32m  * test create hour rolls over continuously (0.01ms)[0m
  * test create sixty minutes is next hour[32m  * test create sixty minutes is next hour (0.01ms)[0m
  * test create minutes roll over[32m  * test create minutes roll over (0.01ms)[0m
  * test create minutes roll over continuously[32m  * test create minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over[32m  * test create hour and minutes roll over (0.01ms)[0m
  * test create hour and minutes roll over continuously[32m  * test create hour and minutes roll over continuously (0.01ms)[0m
  * test create hour and minutes roll over to exactly midnight[32m  * test create hour and minutes roll over to exactly midnight (0.01ms)[0m
  * test create negative hour[32m  * test create negative hour (0.01ms)[0m
  * test create negative hour rolls over[32m  * test create negative hour rolls over (0.01ms)[0m
  * test create negative hour rolls over continuously[32m  * test create negative hour rolls over continuously (0.01ms)[0m
  * test create negative minutes[32m  * test create negative minutes (0.00ms)[0m
  * test create negative minutes roll over[32m  * test create negative minutes roll over (0.00ms)[0m
  * test create negative minutes roll over continuously[32m  * test create negative minutes roll over continuously (0.00ms)[0m
  * test create negative hour and minutes roll over[32m  * test create negative hour and minutes roll over (0.00ms)[0m
  * test create negative hour and minutes roll over continuously[32m  * test create negative hour and minutes roll over continuously (0.00ms)[0m
  * test add add minutes[32m  * test add add minutes (0.01ms)[0m
  * test add add no minutes[32m  * test add add no minutes (0.00ms)[0m
  * test add add to next hour[32m  * test add add to next hour (0.00ms)[0m
  * test add add more than one hour[32m  * test add add more than one hour (0.00ms)[0m
  * test add add more than two hours with carry[32m  * test add add more than two hours with carry (0.00ms)[0m
  * test add add across midnight[32m  * test add add across midnight (0.00ms)[0m
  * test add add more than one day (1500 min = 25 hrs)[32m  * test add add more than one day (1500 min = 25 hrs) (0.00ms)[0m
  * test add add more than two days[32m  * test add add more than two days (0.00ms)[0m
  * test add subtract minutes[32m  * test add subtract minutes (0.00ms)[0m
  * test add subtract to previous hour[32m  * test add subtract to previous hour (0.00ms)[0m
  * test add subtract more than an hour[32m  * test add subtract more than an hour (0.00ms)[0m
  * test add subtract across midnight[32m  * test add subtract across midnight (0.00ms)[0m
  * test add subtract more than two hours[32m  * test add subtract more than two hours (0.00ms)[0m
  * test add subtract more than two hours with borrow[32m  * test add subtract more than two hours with borrow (0.00ms)[0m
  * test add subtract more than one day (1500 min = 25 hrs)[32m  * test add subtract more than one day (1500 min = 25 hrs) (0.00ms)[0m
  * test add subtract more than two days[32m  * test add subtract more than two days (0.00ms)[0m
  * test == clocks with same time[32m  * test == clocks with same time (0.00ms)[0m
  * test == clocks a minute apart[32m  * test == clocks a minute apart (0.00ms)[0m
  * test == clocks an hour apart[32m  * test == clocks an hour apart (0.00ms)[0m
  * test == clocks with hour overflow[32m  * test == clocks with hour overflow (0.00ms)[0m
  * test == clocks with hour overflow by several days[32m  * test == clocks with hour overflow by several days (0.00ms)[0m
  * test == clocks with negative hour[32m  * test == clocks with negative hour (0.00ms)[0m
  * test == clocks with negative hour that wraps[32m  * test == clocks with negative hour that wraps (0.00ms)[0m
  * test == clocks with negative hour that wraps multiple times[32m  * test == clocks with negative hour that wraps multiple times (0.00ms)[0m
  * test == clocks with minute overflow[32m  * test == clocks with minute overflow (0.00ms)[0m
  * test == clocks with minute overflow by several days[32m  * test == clocks with minute overflow by several days (0.00ms)[0m
  * test == clocks with negative minute[32m  * test == clocks with negative minute (0.00ms)[0m
  * test == clocks with negative minute that wraps[32m  * test == clocks with negative minute that wraps (0.00ms)[0m
  * test == clocks with negative minute that wraps multiple times[32m  * test == clocks with negative minute that wraps multiple times (0.00ms)[0m
  * test == clocks with negative hours and minutes[32m  * test == clocks with negative hours and minutes (0.00ms)[0m
  * test == clocks with negative hours and minutes that wrap[32m  * test == clocks with negative hours and minutes that wrap (0.00ms)[0m


Finished in 0.2 seconds (0.2s on load, 0.00s on tests)
[32m51 tests, 0 failures[0m

Randomized with seed 0
